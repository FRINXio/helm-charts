NAME: frinx
LAST DEPLOYED: Thu Nov  3 15:49:47 2022
NAMESPACE: default
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: frinx-machine/charts/demo-workflows/charts/sample-topology/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "sample-topology-test-connection"
  labels:
    helm.sh/chart: sample-topology-1.0.0
    app.kubernetes.io/name: sample-topology
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.9"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: test-device
      image: ubuntu:22.04
      args:
        - sh
        - -c
        - apt-get update && apt-get install netcat -y && nc -vz sample-topology 10004
  restartPolicy: Never
---
# Source: frinx-machine/charts/frinx-frontend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "frinx-frontend-test-connection"
  labels:
    helm.sh/chart: frinx-frontend-1.3.0
    app.kubernetes.io/name: frinx-frontend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['frinx-frontend:8888']
  restartPolicy: Never
---
# Source: frinx-machine/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: grafana-test
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: default
spec:
  serviceAccountName: grafana-test
  containers:
    - name: frinx-test
      image: "bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
  - name: tests
    configMap:
      name: grafana-test
  restartPolicy: Never
---
# Source: frinx-machine/charts/inventory/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "inventory-test-connection"
  labels:
    helm.sh/chart: inventory-2.3.0
    app.kubernetes.io/name: inventory
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.6.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['inventory:8000/.well-known/apollo/server-health']
  restartPolicy: Never
---
# Source: frinx-machine/charts/krakend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "krakend-test-connection"
  labels:
    helm.sh/chart: krakend-2.5.0
    app.kubernetes.io/name: krakend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['krakend:8080/__health']
  restartPolicy: Never
---
# Source: frinx-machine/charts/resource-manager/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "resource-manager-test-connection"
  labels:
    helm.sh/chart: resource-manager-1.1.0
    app.kubernetes.io/name: resource-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['resource-manager:8884/healthz/readiness']
  restartPolicy: Never
---
# Source: frinx-machine/charts/uniconfig/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "uniconfig-controller-test-connection"
  labels:
    helm.sh/chart: uniconfig-2.4.1
    app.kubernetes.io/name: uniconfig
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "5.0.12"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: check-uniconfig
      image: curlimages/curl
      command: ["/bin/sh","-c"]
      args: ['curl --fail --insecure -o /dev/null --silent --write-out "%{http_code}" -X POST uniconfig:8181/rests/operations/uniconfig-manager:health -H "Content-Type:application/json"']
  restartPolicy: Never
---
# Source: frinx-machine/charts/workflow-manager/charts/elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "frinx-gcbuy-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
  - name: "frinx-hwfhz-test"
    image: "docker.elastic.co/elasticsearch/elasticsearch:6.7.1"
    imagePullPolicy: "IfNotPresent"
    command:
      - "sh"
      - "-c"
      - |
        #!/usr/bin/env bash -e
        curl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=yellow&timeout=5s'
  restartPolicy: Never
---
# Source: frinx-machine/charts/workflow-manager/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "workflow-proxy-test-connection"
  labels:
    helm.sh/chart: workflow-manager-1.0.1
    app.kubernetes.io/name: workflow-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": hook-succeeded

spec:
  containers:
    - name: check-workflow-proxy
      image: busybox
      command: ['wget']
      args: ['-S', 'workflow-proxy:8088/probe/readiness']
    - name: check-conductor-server
      image: busybox
      command: ['wget']
      args: ['-S', 'workflow-proxy:8080/api/metadata/workflow']

  restartPolicy: Never
---
# Source: frinx-machine/charts/uniconfig/charts/traefik/templates/dashboard-hook-ingressroute.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: uniconfig-dashboard
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
  labels:
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-10.19.5
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: frinx
spec:
  entryPoints:
    - traefik
  routes:
  - match: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    kind: Rule
    services:
    - name: api@internal
      kind: TraefikService
MANIFEST:
---
# Source: frinx-machine/charts/grafana/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: grafana
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    # Default set from Docker, with DAC_OVERRIDE and CHOWN
      - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'csi'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: frinx-machine/charts/grafana/templates/tests/test-podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: grafana-test
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  allowPrivilegeEscalation: true
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - projected
  - csi
  - secret
---
# Source: frinx-machine/charts/loki/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: loki
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'secret'
    - 'projected'
    - 'downwardAPI'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
    - ALL
---
# Source: frinx-machine/charts/influxdb2/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: influxdb
  labels:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: influxdb2-2.1.0
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb2
      app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/demo-workflows/charts/sample-topology/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sample-topology
  labels:
    helm.sh/chart: sample-topology-1.0.0
    app.kubernetes.io/name: sample-topology
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.9"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/demo-workflows/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-workflows
  labels:
    helm.sh/chart: demo-workflows-1.1.2
    app.kubernetes.io/name: demo-workflows
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.10"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/frinx-frontend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frinx-frontend
  labels:
    helm.sh/chart: frinx-frontend-1.3.0
    app.kubernetes.io/name: frinx-frontend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.17"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
  name: grafana
  namespace: default
---
# Source: frinx-machine/charts/grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
  name: grafana-test
  namespace: default
---
# Source: frinx-machine/charts/influxdb2/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: influxdb
  labels:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: influxdb2-2.1.0
---
# Source: frinx-machine/charts/inventory/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: inventory
  labels:
    helm.sh/chart: inventory-2.3.0
    app.kubernetes.io/name: inventory
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.6.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/krakend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: krakend
  labels:
    helm.sh/chart: krakend-2.5.0
    app.kubernetes.io/name: krakend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
  annotations:
    {}
  name: loki
  namespace: default
automountServiceAccountToken: true
---
# Source: frinx-machine/charts/promtail/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: default
  labels:
    helm.sh/chart: promtail-6.3.0
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/resource-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: resource-manager
  labels:
    helm.sh/chart: resource-manager-1.1.0
    app.kubernetes.io/name: resource-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/telegraf-ds/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telegraf-ds
  labels:
    helm.sh/chart: telegraf-ds-1.1.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/uniconfig/charts/traefik/templates/rbac/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: uniconfig
  labels:
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-10.19.5
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: frinx
  annotations:
---
# Source: frinx-machine/charts/uniconfig/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: uniconfig-controller
  labels:
    helm.sh/chart: uniconfig-2.4.1
    app.kubernetes.io/name: uniconfig
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "5.0.12"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/workflow-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflow-proxy
  labels:
    helm.sh/chart: workflow-manager-1.0.1
    app.kubernetes.io/name: workflow-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.10"
    app.kubernetes.io/managed-by: Helm
---
# Source: frinx-machine/charts/grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: "ZnJpbng="
  admin-password: "ZnJpbngxMjMh"
  ldap-toml: ""
---
# Source: frinx-machine/charts/influxdb2/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: influxdb2-2.1.0
  name: influxdb-auth
data:
  admin-token: "ZXlKcklqb2lOMDlNU1ZwVlpqbFZSRzF4TkhsTE5YcFZibVpKT1hGTFdVMUdPWEZ4TkVJaUxDSnVJam9pYzNOemMzTWlMQ0pwWkNJNk1YMA=="
  admin-password: "ZnJpbngxMjMh"
---
# Source: frinx-machine/charts/loki/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
data:
  loki.yaml: YXV0aF9lbmFibGVkOiBmYWxzZQpjaHVua19zdG9yZV9jb25maWc6CiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDI0aApjb21wYWN0b3I6CiAgc2hhcmVkX3N0b3JlOiBmaWxlc3lzdGVtCiAgd29ya2luZ19kaXJlY3Rvcnk6IC9kYXRhL2xva2kvYm9sdGRiLXNoaXBwZXItY29tcGFjdG9yCmluZ2VzdGVyOgogIGNodW5rX2Jsb2NrX3NpemU6IDI2MjE0NAogIGNodW5rX2lkbGVfcGVyaW9kOiAzbQogIGNodW5rX3JldGFpbl9wZXJpb2Q6IDFtCiAgbGlmZWN5Y2xlcjoKICAgIHJpbmc6CiAgICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogMQogIG1heF90cmFuc2Zlcl9yZXRyaWVzOiAwCiAgd2FsOgogICAgZGlyOiAvZGF0YS9sb2tpL3dhbApsaW1pdHNfY29uZmlnOgogIGVuZm9yY2VfbWV0cmljX25hbWU6IGZhbHNlCiAgbWF4X2VudHJpZXNfbGltaXRfcGVyX3F1ZXJ5OiA1MDAwCiAgcmVqZWN0X29sZF9zYW1wbGVzOiB0cnVlCiAgcmVqZWN0X29sZF9zYW1wbGVzX21heF9hZ2U6IDE2OGgKbWVtYmVybGlzdDoKICBqb2luX21lbWJlcnM6CiAgLSAnbG9raS1tZW1iZXJsaXN0JwpzY2hlbWFfY29uZmlnOgogIGNvbmZpZ3M6CiAgLSBmcm9tOiAiMjAyMC0xMC0yNCIKICAgIGluZGV4OgogICAgICBwZXJpb2Q6IDI0aAogICAgICBwcmVmaXg6IGluZGV4XwogICAgb2JqZWN0X3N0b3JlOiBmaWxlc3lzdGVtCiAgICBzY2hlbWE6IHYxMQogICAgc3RvcmU6IGJvbHRkYi1zaGlwcGVyCnNlcnZlcjoKICBncnBjX2xpc3Rlbl9wb3J0OiA5MDk1CiAgaHR0cF9saXN0ZW5fcG9ydDogMzEwMApzdG9yYWdlX2NvbmZpZzoKICBib2x0ZGJfc2hpcHBlcjoKICAgIGFjdGl2ZV9pbmRleF9kaXJlY3Rvcnk6IC9kYXRhL2xva2kvYm9sdGRiLXNoaXBwZXItYWN0aXZlCiAgICBjYWNoZV9sb2NhdGlvbjogL2RhdGEvbG9raS9ib2x0ZGItc2hpcHBlci1jYWNoZQogICAgY2FjaGVfdHRsOiAyNGgKICAgIHNoYXJlZF9zdG9yZTogZmlsZXN5c3RlbQogIGZpbGVzeXN0ZW06CiAgICBkaXJlY3Rvcnk6IC9kYXRhL2xva2kvY2h1bmtzCnRhYmxlX21hbmFnZXI6CiAgcmV0ZW50aW9uX2RlbGV0ZXNfZW5hYmxlZDogdHJ1ZQogIHJldGVudGlvbl9wZXJpb2Q6IDI0aA==
---
# Source: frinx-machine/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: frinx-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "QlF1OVJWMlhyRw=="
  password: "cG9zdGdyZXNQ"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: frinx-machine/charts/promtail/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: promtail
  namespace: default
  labels:
    helm.sh/chart: promtail-6.3.0
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
stringData:
  promtail.yaml: |
    server:
      log_level: info
      http_listen_port: 3101
      
    
    clients:
      - url: http://loki:3100/loki/api/v1/push
    
    positions:
      filename: /run/promtail/positions.yaml
    
    scrape_configs:
      - job_name: kubernetes-pods
        pipeline_stages:
          - cri: {}
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - default
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - __meta_kubernetes_pod_label_app
              - __tmp_controller_name
              - __meta_kubernetes_pod_name
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_instance
              - __meta_kubernetes_pod_label_release
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: instance
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              - __meta_kubernetes_pod_label_component
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: node_name
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels:
            - namespace
            - app
            target_label: job
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_container_name
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
            target_label: __path__
          - action: replace
            regex: true/(.*)
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
            - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
            - __meta_kubernetes_pod_container_name
            target_label: __path__
---
# Source: frinx-machine/charts/uniconfig-postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: uniconfig-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: uniconfig-postgresql
    helm.sh/chart: uniconfig-postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "SFplckZDOTZRSQ=="
  password: "cG9zdGdyZXNQ"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: frinx-machine/charts/uniconfig/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: uniconfig-controller
data:
  dbPersistence_connection_username: cG9zdGdyZXNV
  dbPersistence_connection_password: cG9zdGdyZXNQ
---
# Source: frinx-machine/charts/frinx-frontend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frinx-frontend-configmap
data:
  {}
---
# Source: frinx-machine/charts/frinx-grafana-configs/templates/grafana-dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frinx-grafana-dashboards
data:

  db_cert_monitoring.json: |-
    {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "target": {
                "limit": 100,
                "matchAny": false,
                "tags": [],
                "type": "dashboard"
              },
              "type": "dashboard"
            }
          ]
        },
        "description": "A very simple and visual Dashboard to monitor SSL Certificates (x.509) using the native inputs.x509_cert from Telegraf.\r\nIt just works automatically once the sources are added to telegraf.",
        "editable": true,
        "fiscalYearStartMonth": 0,
        "gnetId": 13683,
        "graphTooltip": 0,
        "id": 6,
        "iteration": 1647879477301,
        "links": [],
        "liveNow": false,
        "panels": [
          {
            "collapsed": false,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 0
            },
            "id": 16,
            "panels": [],
            "title": "Expiration ",
            "type": "row"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "description": "SSL Certificate Monitoring Stat. Expiry date in days.\n\nThresholds are:\n* From 0 days to 14, Red\n* From 15 days to 30, Orange\n* From 31 days onward, Green",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-red",
                      "value": null
                    },
                    {
                      "color": "semi-dark-orange",
                      "value": 262974
                    },
                    {
                      "color": "semi-dark-green",
                      "value": 2629743
                    }
                  ]
                },
                "unit": "s"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 6,
              "w": 12,
              "x": 0,
              "y": 1
            },
            "id": 10,
            "links": [],
            "options": {
              "colorMode": "value",
              "graphMode": "area",
              "justifyMode": "auto",
              "orientation": "auto",
              "reduceOptions": {
                "calcs": [
                  "lastNotNull"
                ],
                "fields": "",
                "values": false
              },
              "textMode": "auto"
            },
            "pluginVersion": "8.3.0",
            "repeat": "ssl_name",
            "repeatDirection": "h",
            "targets": [
              {
                "datasource": {
                  "type": "influxdb",
                  "uid": "P951FEA4DE68E13C5"
                },
                "groupBy": [
                  {
                    "params": [
                      "$__interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "san"
                    ],
                    "type": "tag"
                  },
                  {
                    "params": [
                      "none"
                    ],
                    "type": "fill"
                  }
                ],
                "measurement": "x509_cert",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"x509_cert\")\n  |> filter(fn: (r) => r[\"_field\"] == \"expiry\")\n  |> filter(fn: (r) => r[\"source\"] == \"${ssl_name}\")\n  |> drop(fn: (column) => column =~ /host*/)\n  |> last()\n  |> map(fn: (r) => ({r with _value: r._value }))",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "expiry"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "last"
                    },
                    {
                      "params": [
                        "/60/60/24"
                      ],
                      "type": "math"
                    }
                  ]
                ],
                "tags": [
                  {
                    "key": "source",
                    "operator": "=~",
                    "value": "/^$ssl_name$/"
                  },
                  {
                    "condition": "AND",
                    "key": "san",
                    "operator": "!=",
                    "value": "\"\""
                  }
                ]
              }
            ],
            "title": "$ssl_name",
            "type": "stat"
          },
          {
            "collapsed": false,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 7
            },
            "id": 6,
            "panels": [],
            "title": "Expiration datetime",
            "type": "row"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "description": "SSL Certificate Monitoring Stat. Expiration date",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "fixed"
                },
                "decimals": 1,
                "mappings": [
                  {
                    "options": {
                      "match": "null",
                      "result": {
                        "text": "N/A"
                      }
                    },
                    "type": "special"
                  }
                ],
                "max": 0,
                "min": 0,
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "semi-dark-red",
                      "value": null
                    }
                  ]
                },
                "unit": "dateTimeAsSystem"
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byRegexp",
                    "options": "/^x509_cert.last.*$/"
                  },
                  "properties": [
                    {
                      "id": "displayName",
                      "value": "EXP"
                    },
                    {
                      "id": "color",
                      "value": {
                        "mode": "thresholds"
                      }
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byRegexp",
                    "options": "/^x509_cert.issuer_common_name.*$/"
                  },
                  "properties": [
                    {
                      "id": "displayName",
                      "value": "CA"
                    },
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "dark-blue",
                        "mode": "fixed"
                      }
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byRegexp",
                    "options": "/^x509_cert.verification_code.*$/"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "mode": "thresholds"
                      }
                    },
                    {
                      "id": "mappings",
                      "value": [
                        {
                          "options": {
                            "0": {
                              "text": "Chain OK"
                            }
                          },
                          "type": "value"
                        },
                        {
                          "options": {
                            "from": 1,
                            "result": {
                              "text": "Chain ERR"
                            },
                            "to": 999999
                          },
                          "type": "range"
                        }
                      ]
                    },
                    {
                      "id": "thresholds",
                      "value": {
                        "mode": "absolute",
                        "steps": [
                          {
                            "color": "semi-dark-green",
                            "value": null
                          },
                          {
                            "color": "dark-red",
                            "value": 1
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 6,
              "w": 12,
              "x": 0,
              "y": 8
            },
            "id": 2,
            "links": [],
            "options": {
              "colorMode": "value",
              "graphMode": "area",
              "justifyMode": "auto",
              "orientation": "horizontal",
              "reduceOptions": {
                "calcs": [
                  "last"
                ],
                "fields": "",
                "values": false
              },
              "textMode": "auto"
            },
            "pluginVersion": "8.3.0",
            "repeat": "ssl_name",
            "repeatDirection": "h",
            "targets": [
              {
                "datasource": {
                  "type": "influxdb",
                  "uid": "P951FEA4DE68E13C5"
                },
                "groupBy": [
                  {
                    "params": [
                      "$__interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "san"
                    ],
                    "type": "tag"
                  },
                  {
                    "params": [
                      "none"
                    ],
                    "type": "fill"
                  }
                ],
                "measurement": "x509_cert",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"x509_cert\")\n  |> filter(fn: (r) => r[\"_field\"] == \"enddate\")\n  |> filter(fn: (r) => r[\"source\"] == \"${ssl_name}\")\n  |> drop(fn: (column) => column =~ /host*/)\n  |> last()\n  |> map(fn: (r) => ({r with _value: r._value * 1000 }))",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "expiry"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "last"
                    },
                    {
                      "params": [
                        "/60/60/24"
                      ],
                      "type": "math"
                    }
                  ]
                ],
                "tags": [
                  {
                    "key": "source",
                    "operator": "=~",
                    "value": "/^$ssl_name$/"
                  },
                  {
                    "condition": "AND",
                    "key": "san",
                    "operator": "!=",
                    "value": "\"\""
                  }
                ]
              }
            ],
            "title": "$ssl_name",
            "type": "stat"
          },
          {
            "collapsed": false,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 14
            },
            "id": 22,
            "panels": [],
            "title": "Certificate validation",
            "type": "row"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "description": "SSL validation error",
            "gridPos": {
              "h": 6,
              "w": 12,
              "x": 0,
              "y": 15
            },
            "id": 23,
            "links": [],
            "options": {
              "dedupStrategy": "none",
              "enableLogDetails": true,
              "prettifyLogMessage": false,
              "showCommonLabels": false,
              "showLabels": false,
              "showTime": false,
              "sortOrder": "Descending",
              "wrapLogMessage": false
            },
            "pluginVersion": "8.3.0",
            "repeat": "ssl_name",
            "repeatDirection": "h",
            "targets": [
              {
                "datasource": {
                  "type": "influxdb",
                  "uid": "P951FEA4DE68E13C5"
                },
                "groupBy": [
                  {
                    "params": [
                      "$__interval"
                    ],
                    "type": "time"
                  },
                  {
                    "params": [
                      "san"
                    ],
                    "type": "tag"
                  },
                  {
                    "params": [
                      "none"
                    ],
                    "type": "fill"
                  }
                ],
                "measurement": "x509_cert",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"x509_cert\")\n  |> filter(fn: (r) => r[\"_field\"] == \"verification_error\")\n  |> filter(fn: (r) => r[\"source\"] == \"${ssl_name}\")\n  |> drop(fn: (column) => column =~ /host*/)\n  |> last()",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "expiry"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "last"
                    },
                    {
                      "params": [
                        "/60/60/24"
                      ],
                      "type": "math"
                    }
                  ]
                ],
                "tags": [
                  {
                    "key": "source",
                    "operator": "=~",
                    "value": "/^$ssl_name$/"
                  },
                  {
                    "condition": "AND",
                    "key": "san",
                    "operator": "!=",
                    "value": "\"\""
                  }
                ]
              }
            ],
            "title": "$ssl_name",
            "type": "logs"
          }
        ],
        "refresh": false,
        "schemaVersion": 33,
        "style": "dark",
        "tags": [],
        "templating": {
          "list": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "definition": "import \"influxdata/influxdb/schema\"\n\nschema.measurementTagValues(\n    bucket: \"frinx\",\n    tag: \"source\",\n    measurement: \"x509_cert\",\n)\n",
              "hide": 0,
              "includeAll": true,
              "label": "SSL Certificate",
              "multi": true,
              "name": "ssl_name",
              "options": [],
              "query": "import \"influxdata/influxdb/schema\"\n\nschema.measurementTagValues(\n    bucket: \"frinx\",\n    tag: \"source\",\n    measurement: \"x509_cert\",\n)\n",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            }
          ]
        },
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ]
        },
        "timezone": "",
        "title": "SSL Monitoring (x509_cert)",
        "uid": "0QnblY8Wz",
        "version": 4,
        "weekStart": ""
      }
  db_device_monitoring.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 6,
      "iteration": 1646669075703,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 7,
          "panels": [],
          "title": "Interface statistics",
          "type": "row"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 1
          },
          "id": 9,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"devices\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"full-interface-stats\")\n  |> filter(fn: (r) => r[\"node-id\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"packets-received\" or r[\"_field\"] == \"packets-sent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Packets",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 1
          },
          "id": 11,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"devices\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"full-interface-stats\")\n  |> filter(fn: (r) => r[\"node-id\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"input-errors\" or r[\"_field\"] == \"output-errors\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Errors",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 9
          },
          "id": 10,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"devices\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"full-interface-stats\")\n  |> filter(fn: (r) => r[\"node-id\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"input-drops\" or r[\"_field\"] == \"output-drops\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Drops",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "none"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 9
          },
          "id": 12,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"devices\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"full-interface-stats\")\n  |> filter(fn: (r) => r[\"node-id\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"resets\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Resets",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 17
          },
          "id": 5,
          "panels": [],
          "title": "Memory",
          "type": "row"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 18
          },
          "id": 2,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"devices\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory\")\n  |> filter(fn: (r) => r[\"node-id\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"free-application-memory\" or r[\"_field\"] == \"free-physical-memory\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "FREE Memory",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 18
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"devices\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory\")\n  |> filter(fn: (r) => r[\"node-id\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"reserved-memory\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Reserved Memory",
          "type": "timeseries"
        }
      ],
      "schemaVersion": 33,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: \"devices\",\n    tag: \"node-id\",\n    predicate: (r) => true,\n    start: -1d\n)",
            "hide": 0,
            "includeAll": false,
            "label": "Devices",
            "multi": false,
            "name": "device",
            "options": [],
            "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: \"devices\",\n    tag: \"node-id\",\n    predicate: (r) => true,\n    start: -1d\n)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Device monitoring",
      "uid": "ALRsHLY7k",
      "version": 3,
      "weekStart": ""
    }
  db_kube_monitoring.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 10,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 8,
          "panels": [],
          "title": "Memory",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 19,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_usage_bytes\")\n  |> group(columns: [\"container_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "Memory: Usage bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*container_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 11
          },
          "hiddenSeries": false,
          "id": 20,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_working_set_bytes\")\n  |> group(columns: [\"container_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "Memory: Working set bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*container_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 21
          },
          "id": 2,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "fieldConfig": {
                "defaults": {
                  "unit": "ns"
                },
                "overrides": []
              },
              "fill": 1,
              "fillGradient": 0,
              "gridPos": {
                "h": 10,
                "w": 24,
                "x": 0,
                "y": 22
              },
              "hiddenSeries": false,
              "id": 17,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "nullPointMode": "null",
              "options": {
                "alertThreshold": true
              },
              "percentage": false,
              "pluginVersion": "8.5.6",
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "datasource": {
                    "type": "influxdb",
                    "uid": "P951FEA4DE68E13C5"
                  },
                  "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage_nanocores\")\n  |> group(columns: [\"container_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeRegions": [],
              "title": "CPU: Usage nanocores",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "transformations": [
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "(.*container_name=\")",
                    "renamePattern": ""
                  }
                },
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "\\\"}",
                    "renamePattern": ""
                  }
                }
              ],
              "type": "graph",
              "xaxis": {
                "mode": "time",
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "$$hashKey": "object:106",
                  "format": "ns",
                  "logBase": 1,
                  "show": true
                },
                {
                  "$$hashKey": "object:107",
                  "format": "short",
                  "logBase": 1,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "fieldConfig": {
                "defaults": {
                  "unit": "ns"
                },
                "overrides": []
              },
              "fill": 1,
              "fillGradient": 0,
              "gridPos": {
                "h": 10,
                "w": 24,
                "x": 0,
                "y": 32
              },
              "hiddenSeries": false,
              "id": 18,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "nullPointMode": "null",
              "options": {
                "alertThreshold": true
              },
              "percentage": false,
              "pluginVersion": "8.5.6",
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "datasource": {
                    "type": "influxdb",
                    "uid": "P951FEA4DE68E13C5"
                  },
                  "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage_core_nanoseconds\")\n  |> group(columns: [\"container_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeRegions": [],
              "title": "CPU: Usage core nanoseconds",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "transformations": [
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "(.*container_name=\")",
                    "renamePattern": ""
                  }
                },
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "\\\"}",
                    "renamePattern": ""
                  }
                }
              ],
              "type": "graph",
              "xaxis": {
                "mode": "time",
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "$$hashKey": "object:106",
                  "format": "ns",
                  "logBase": 1,
                  "show": true
                },
                {
                  "$$hashKey": "object:107",
                  "format": "short",
                  "logBase": 1,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false
              }
            }
          ],
          "title": "CPU",
          "type": "row"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 22
          },
          "id": 14,
          "panels": [],
          "title": "RootFS & LogsFS",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 23
          },
          "hiddenSeries": false,
          "id": 10,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rootfs_available_bytes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "RootFS: Available bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 33
          },
          "hiddenSeries": false,
          "id": 15,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rootfs_used_bytes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "RootFS: Used bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 43
          },
          "hiddenSeries": false,
          "id": 16,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": true,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rootfs_capacity_bytes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "RootFS: Capacity bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 53
          },
          "hiddenSeries": false,
          "id": 27,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"logsfs_used_bytes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "LogsFS: Used bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 63
          },
          "id": 22,
          "panels": [],
          "title": "Network",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 64
          },
          "hiddenSeries": false,
          "id": 23,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_network\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rx_bytes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "RX bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 74
          },
          "hiddenSeries": false,
          "id": 24,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_network\")\n  |> filter(fn: (r) => r[\"_field\"] == \"tx_bytes\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "TX bytes",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 84
          },
          "hiddenSeries": false,
          "id": 25,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_network\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rx_errors\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "RX errors",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 94
          },
          "hiddenSeries": false,
          "id": 26,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.5.6",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_network\")\n  |> filter(fn: (r) => r[\"_field\"] == \"tx_errors\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "TX errors",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*pod_name=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\"}",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:106",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:107",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        }
      ],
      "schemaVersion": 36,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-30m",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Frinx-Machine deployment monitoring",
      "uid": "y8JbPAg4z",
      "version": 2,
      "weekStart": ""
    }
  db_loki_search.json: |-
    {
      "annotations": {
        "list": [
          {
            "$$hashKey": "object:75",
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 1000,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "description": "Loki logs panel with prometheus variables ",
      "editable": true,
      "gnetId": 12019,
      "graphTooltip": 0,
      "id": 2,
      "iteration": 1629884309874,
      "links": [],
      "panels": [
        {
          "aliasColors": {},
          "bars": true,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Loki",
          "fieldConfig": {
            "defaults": {
              "links": []
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "hiddenSeries": false,
          "id": 6,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": false,
            "total": false,
            "values": false
          },
          "lines": false,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.1.2",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(count_over_time({app=\"$app\"} |~ \"$search\"[$__interval]))",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:168",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            },
            {
              "$$hashKey": "object:169",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "datasource": "Loki",
          "gridPos": {
            "h": 25,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 2,
          "maxDataPoints": "",
          "options": {
            "dedupStrategy": "none",
            "enableLogDetails": true,
            "prettifyLogMessage": false,
            "showCommonLabels": false,
            "showLabels": false,
            "showTime": true,
            "sortOrder": "Descending",
            "wrapLogMessage": true
          },
          "targets": [
            {
              "expr": "{app=\"$app\"} |~ \"$search\"",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Logs Panel",
          "type": "logs"
        },
        {
          "datasource": null,
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 28
          },
          "id": 4,
          "options": {
            "content": "<div style=\"text-align:center\"> Frinx Loki search  </div>\n\n\n",
            "mode": "html"
          },
          "pluginVersion": "8.1.2",
          "timeFrom": null,
          "timeShift": null,
          "transparent": true,
          "type": "text"
        }
      ],
      "refresh": false,
      "schemaVersion": 30,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "selected": false,
              "text": "fm_grafana",
              "value": "fm_grafana"
            },
            "datasource": "Loki",
            "definition": "label_values(app)",
            "description": null,
            "error": null,
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "app",
            "options": [],
            "query": "label_values(app)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "current": {
              "selected": true,
              "text": "",
              "value": ""
            },
            "description": null,
            "error": null,
            "hide": 0,
            "label": null,
            "name": "search",
            "options": [
              {
                "selected": true,
                "text": "",
                "value": ""
              }
            ],
            "query": "",
            "skipUrlSync": false,
            "type": "textbox"
          }
        ]
      },
      "time": {
        "from": "now-30m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ]
      },
      "timezone": "",
      "title": "Frinx Machine logs viewer",
      "uid": "Y5yS_R4nz",
      "version": 1
    }
  db_node_monitoring.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 3,
      "iteration": 1639472975108,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 10,
          "panels": [],
          "title": "Quick node info",
          "type": "row"
        },
        {
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 0,
            "y": 1
          },
          "id": 25,
          "options": {
            "alertName": "",
            "dashboardAlerts": false,
            "maxItems": 20,
            "showInstances": false,
            "sortOrder": 1,
            "stateFilter": {
              "firing": true,
              "inactive": true,
              "pending": true
            }
          },
          "title": "Panel Title",
          "type": "alertlist"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Root FM Used",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 8,
            "y": 1
          },
          "id": 21,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "hide": false,
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> filter(fn: (r) => r[\"path\"] == \"/\")\n  |> aggregateWindow(every: ${time_range}, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Root FM Used",
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Swap Used",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 12,
            "y": 1
          },
          "id": 22,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "hide": false,
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"swap\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> aggregateWindow(every: ${time_range}, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Swap Used",
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "CPU Busy",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 16,
            "y": 1
          },
          "id": 23,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_idle\")\n  |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> map(fn: (r) => ({ r with _value:  100.0 - r._value }))\n  |> aggregateWindow(every: ${time_range}, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n\n",
              "refId": "A"
            }
          ],
          "title": "CPU Busy",
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "CPU Busy",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 4,
            "x": 20,
            "y": 1
          },
          "id": 18,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_idle\")\n  |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> map(fn: (r) => ({ r with _value:  100.0 - r._value }))\n  |> aggregateWindow(every: ${time_range}, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n\n",
              "refId": "A"
            }
          ],
          "title": "CPU Busy",
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Sys load",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 7
          },
          "id": 20,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == \"system\")\n  |> filter(fn: (r) => r._field == \"load1\" or r._field == \"load5\" or r._field == \"load15\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> window(period: ${time_range})\n  |> mean()\n  |> group(columns: [\"_value\", \"_time\", \"_start\", \"_stop\"], mode: \"except\")\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "Sys load",
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*field=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\", host=.*$",
                "renamePattern": ""
              }
            }
          ],
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "System uptime",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 12,
            "y": 7
          },
          "id": 16,
          "options": {
            "colorMode": "value",
            "graphMode": "none",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"system\")\n  |> filter(fn: (r) => r[\"_field\"] == \"uptime\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")",
              "refId": "A"
            }
          ],
          "title": "Uptime",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Total RootFS",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 16,
            "y": 7
          },
          "id": 13,
          "options": {
            "colorMode": "value",
            "graphMode": "none",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "sum\nfrom(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total\")\n  |> filter(fn: (r) => r[\"path\"] == \"/\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")",
              "refId": "A"
            }
          ],
          "title": "RootFS Total",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Total number of CPU cores",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 20,
            "y": 7
          },
          "id": 12,
          "options": {
            "colorMode": "value",
            "graphMode": "none",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"system\")\n  |> filter(fn: (r) => r[\"_field\"] == \"n_cpus\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
              "refId": "A"
            }
          ],
          "title": "CPU Cores",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Total RAM",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 12,
            "y": 10
          },
          "id": 14,
          "options": {
            "colorMode": "value",
            "graphMode": "none",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")",
              "refId": "A"
            }
          ],
          "title": "RAM Total",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Total Swap",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 16,
            "y": 10
          },
          "id": 15,
          "options": {
            "colorMode": "value",
            "graphMode": "none",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem\")\n  |> filter(fn: (r) => r[\"_field\"] == \"swap_total\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")",
              "refId": "A"
            }
          ],
          "title": "Swap Total",
          "type": "stat"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 13
          },
          "id": 7,
          "panels": [],
          "title": "Basic CPU/ Mem/ Net/ Disk - 30s time range",
          "type": "row"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Basic CPU info",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 40,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": true,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 14
          },
          "id": 4,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "pluginVersion": "8.3.0",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "hide": false,
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_system\" or r[\"_field\"] == \"usage_user\" or r[\"_field\"] == \"usage_iowait\" or r[\"_field\"] == \"usage_idle\" or r[\"_field\"] == \"usage_steal\" or r[\"_field\"] == \"usage_softirq\" or r[\"_field\"] == \"usage_irq\" or r[\"_field\"] == \"usage_nice\")\n  |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "title": "CPU Basic",
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\{.*$",
                "renamePattern": ""
              }
            }
          ],
          "type": "timeseries"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Basic Memory info",
          "fieldConfig": {
            "defaults": {
              "unit": "bytes"
            },
            "overrides": []
          },
          "fill": 4,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 14
          },
          "hiddenSeries": false,
          "id": 5,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.3.0",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "hide": false,
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem\")\n  |> filter(fn: (r) => r[\"_field\"] == \"free\" or r[\"_field\"] == \"total\" or r[\"_field\"] == \"used\" or r[\"_field\"] == \"cached\" or r[\"_field\"] == \"buffered\" or r[\"_field\"] == \"swap_cached\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "Memory Basic",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\ .*$",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:715",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:716",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "description": "Basic CPU info",
          "fieldConfig": {
            "defaults": {
              "unit": "percent"
            },
            "overrides": []
          },
          "fill": 4,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 22
          },
          "hiddenSeries": false,
          "id": 8,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "8.3.0",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "hide": false,
              "query": "from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"path\"] == \"/\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hosts}\")\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeRegions": [],
          "title": "Disk Space Used Basic",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "",
                "renamePattern": ""
              }
            }
          ],
          "type": "graph",
          "xaxis": {
            "mode": "time",
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:1035",
              "format": "percent",
              "logBase": 1,
              "max": "100",
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:1036",
              "format": "short",
              "logBase": 1,
              "max": "100",
              "min": "0",
              "show": true
            }
          ],
          "yaxis": {
            "align": false
          }
        }
      ],
      "schemaVersion": 33,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)",
            "hide": 0,
            "includeAll": false,
            "multi": false,
            "name": "hosts",
            "options": [],
            "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "auto": false,
            "auto_count": 30,
            "auto_min": "10s",
            "current": {
              "selected": false,
              "text": "1m",
              "value": "1m"
            },
            "hide": 0,
            "name": "time_range",
            "options": [
              {
                "selected": true,
                "text": "1m",
                "value": "1m"
              },
              {
                "selected": false,
                "text": "10m",
                "value": "10m"
              },
              {
                "selected": false,
                "text": "30m",
                "value": "30m"
              },
              {
                "selected": false,
                "text": "1h",
                "value": "1h"
              },
              {
                "selected": false,
                "text": "6h",
                "value": "6h"
              },
              {
                "selected": false,
                "text": "12h",
                "value": "12h"
              },
              {
                "selected": false,
                "text": "1d",
                "value": "1d"
              }
            ],
            "query": "1m,10m,30m,1h,6h,12h,1d",
            "queryValue": "",
            "refresh": 2,
            "skipUrlSync": false,
            "type": "interval"
          }
        ]
      },
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Frinx-Node-Monitoring",
      "uid": "RJRDpTh7k"
    }
  db_uniconfig_monitoring.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 8,
      "iteration": 1651145209611,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 12,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "right"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "pluginVersion": "8.3.0",
          "repeat": "name",
          "repeatDirection": "v",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "P951FEA4DE68E13C5"
              },
              "query": "name = from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"uniconfig\")\n  |> filter(fn: (r) => r[\"zone\"] == \"${zone}\")\n  |> filter(fn: (r) => r[\"instance\"] == \"${instance}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"name\")\n  |> filter(fn: (r) => r[\"_value\"] == \"${name}\")\n  |> keep(columns: [\"_time\", \"_value\"])\n\nrate = from(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"uniconfig\")\n  |> filter(fn: (r) => r[\"_field\"] == \"m15_rate\" or r[\"_field\"] == \"m1_rate\" or r[\"_field\"] == \"m5_rate\" or r[\"_field\"] == \"mean_rate\" or r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"zone\"] == \"${zone}\")\n  |> filter(fn: (r) => r[\"instance\"] == \"${instance}\")\n  |> map(fn:(r) => ({ r with _value: float(v: r._value) }))\n  |> drop(columns: [\"path\"])\n\njoin(\n    tables: {name:name, rate:rate},\n    on: [\"_time\"],\n    method: \"inner\"\n )\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "title": "${name}",
          "transformations": [
            {
              "id": "renameByRegex",
              "options": {
                "regex": "(.*field=\")",
                "renamePattern": ""
              }
            },
            {
              "id": "renameByRegex",
              "options": {
                "regex": "\\\", _start=.*$",
                "renamePattern": ""
              }
            }
          ],
          "type": "timeseries"
        }
      ],
      "refresh": false,
      "schemaVersion": 33,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: \"frinx\",\n    tag: \"zone\",\n    predicate: (r) => true,\n    start: -1d\n)",
            "hide": 0,
            "includeAll": false,
            "label": "Zone",
            "multi": false,
            "name": "zone",
            "options": [],
            "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: \"frinx\",\n    tag: \"zone\",\n    predicate: (r) => true,\n    start: -1d\n)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "definition": "import \"influxdata/influxdb/schema\"\nfrom(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"uniconfig\")\n  |> filter(fn: (r) => r[\"zone\"] == \"${zone}\")\n  |> group()\n  |> keep(columns: [\"instance\"])\n  |> distinct(column: \"instance\" )",
            "hide": 0,
            "includeAll": false,
            "label": "Instance",
            "multi": false,
            "name": "instance",
            "options": [],
            "query": "import \"influxdata/influxdb/schema\"\nfrom(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"uniconfig\")\n  |> filter(fn: (r) => r[\"zone\"] == \"${zone}\")\n  |> group()\n  |> keep(columns: [\"instance\"])\n  |> distinct(column: \"instance\" )",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "P951FEA4DE68E13C5"
            },
            "definition": "import \"influxdata/influxdb/schema\"\nfrom(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"uniconfig\")\n  |> filter(fn: (r) => r[\"zone\"] == \"fm_uniconfig-controller\")\n  |> filter(fn: (r) => r[\"instance\"] == \"1\")\n  |> filter(fn: (r) => r[\"_field\"] == \"name\")\n  |> group()\n  |> keep(columns: [\"_value\"])\n  |> distinct(column: \"_value\" )",
            "hide": 0,
            "includeAll": true,
            "label": "Name",
            "multi": true,
            "name": "name",
            "options": [],
            "query": "import \"influxdata/influxdb/schema\"\nfrom(bucket: \"frinx\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"uniconfig\")\n  |> filter(fn: (r) => r[\"zone\"] == \"fm_uniconfig-controller\")\n  |> filter(fn: (r) => r[\"instance\"] == \"1\")\n  |> filter(fn: (r) => r[\"_field\"] == \"name\")\n  |> group()\n  |> keep(columns: [\"_value\"])\n  |> distinct(column: \"_value\" )",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Uniconfig-controller monitoring",
      "uid": "QjwvW8wnz",
      "version": 8,
      "weekStart": ""
    }
  default.yaml: |
    apiVersion: 1
  
    providers:
      - name: Default    # A uniquely identifiable name for the provider
        folder: Frinx-Machine # The folder where to place the dashboards
        type: file
        options:
          path:  /etc/grafana/provisioning/dashboards
---
# Source: frinx-machine/charts/frinx-grafana-configs/templates/grafana-datasources.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frinx-grafana-datasources
data:
  datasource.yml: |+
    apiVersion: 1
    datasources:      
      - name: InfluxDB
        type: influxdb
        access: proxy
        url:  http://influxdb
        basicAuth:  true
        basicAuthUser:  frinx
        jsonData:
          defaultBucket:  frinx
          httpMode:  POST
          organization:  frinx-machine
          version: Flux
        secureJsonData:
          basicAuthPassword: frinx123!
          token: eyJrIjoiN09MSVpVZjlVRG1xNHlLNXpVbmZJOXFLWU1GOXFxNEIiLCJuIjoic3Nzc3MiLCJpZCI6MX0
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        jsonData:
---
# Source: frinx-machine/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
# Source: frinx-machine/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-test
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://grafana/api/health"

      code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: frinx-machine/charts/krakend/templates/configmap-krakend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: krakend-krakend
data:
  krakend.json: "{\n  \"version\": 3,\n  \"name\": \"krakend for FM\",\n  \"port\": 8080,\n  \"cache_ttl\": \"3600s\",\n  \"tls\": {\n    \"public_key\": \"/usr/local/share/ca-certificates/frinx_krakend_tls_cert.pem\",\n    \"private_key\": \"/usr/local/share/ca-certificates/frinx_krakend_tls_key.pem\",\n    \"min_version\": \"TLS11\",\n    \"prefer_server_cipher_suites\": true, \n    \"disabled\": {{ env \"TLS_DISABLED\" }}\n  },\n  \"timeout\": \"2m\",\n  \"plugin\": {\n    \"pattern\": \".so\",\n    \"folder\": \"/usr/local/lib/krakend/\"\n  },\n  \"extra_config\": {\n    \"router\":{\n      \"disable_path_decoding\" : true,\n      \"logger_skip_paths\":[\n        \"/__health\"\n      ]\n    },\n    {{ $jwt_production := env \"AUTH_ENABLED\" }}\n    {{ if eq $jwt_production \"true\" }}\n    \"plugin/http-server\": {\n      \"name\": \"krakend-azure-plugin\"\n    }, \n    {{end}}\n    \"security/http\": {},\n    \"security/cors\": {\n      \"allow_origins\": [\n        \"*\"\n      ],\n      \"allow_methods\": [\n        \"GET\",\n        \"HEAD\",\n        \"POST\",\n        \"PUT\",\n        \"PATCH\",\n        \"DELETE\"\n      ],\n      \"allow_credentials\": false\n    },\n    \"telemetry/logging\": {\n      \"level\": \"INFO\",\n      \"prefix\": \"[KRAKEND]\",\n      \"syslog\": false,\n      \"stdout\": true\n    }\n  },\n  \"endpoints\": [\n    {{ template \"workflow_proxy.tmpl\" .workflow_proxy_settings.endpoints }},\n    {{ template \"workflow_proxy_docs.tmpl\" .workflow_proxy_docs_settings.endpoints }},\n    {{ template \"inventory.tmpl\" }},\n    {{ template \"uniconfig.tmpl\" .uniconfig_settings }},\n    {{ template \"unistore.tmpl\" .unistore_settings }},\n    {{ template \"resource.tmpl\" .resource_settings.endpoints }},\n    {{ template \"frinx_frontend.tmpl\" .frinx_frontend_settings}},\n    {{ template \"topology_discovery.tmpl\" .topology_discovery_settings.endpoints }}\n  ]\n}\n"
---
# Source: frinx-machine/charts/krakend/templates/configmap-partials.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: krakend-partials
data:
  allowed_headers.tmpl: "\"X-Tenant-Id\", \"From\", \"X-Auth-User-Groups\", \"X-Auth-User-Roles\", \"Content-Type\"\n"
  jwt_config.tmpl: "\"auth/validator\": {\n    \"alg\": \"RS256\",\n    \"jwk_url\": \"https://login.microsoftonline.com/common/discovery/v2.0/keys\"\n}"
  jwt_fake_config.tmpl: "\"modifier/lua-endpoint\": {\n    \"sources\": [\"scripts/fake_frinx_token.lua\"],\n    \"allow_open_libs\": true,\n    \"pre\": \"local r = ctx.load(); fake_token_validate(r);\",\n    \"live\": true\n}\n"
  modifiers.tmpl: "\"modifier/martian\": {\n    \"fifo.Group\": {\n        \"scope\": [\"request\", \"response\"],\n        \"aggregateErrors\": true,\n        \"modifiers\": [\n            {\n                \"header.Modifier\": {\n                    \"scope\": [\"request\"],\n                    \"name\": \"Accept-Encoding\",\n                    \"value\": \"identity\"\n                }\n            },\n            {\n                \"header.Modifier\": {\n                    \"scope\": [\"request\"],\n                    \"name\": \"Content-Type\",\n                    \"value\": \"application/json\"\n                }\n            },\n            {\n                \"header.Modifier\": {\n                    \"scope\": [\"response\"],\n                    \"name\": \"Content-Type\",\n                    \"value\": \"application/json; charset=utf-8\"\n                }\n            }\n        ]\n    }\n}\n"
---
# Source: frinx-machine/charts/krakend/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: krakend-scripts
data:
  fake_frinx_token.lua: "function fake_token_validate(request)\n    -- local header = request:headers('Fake-Frinx-Token')\n    -- if header ~= '' then\n        print(\"INFO: JWT authorization is disabled. Default credentials are used!\")\n        request:headers('X-Auth-User-Groups', os.getenv(\"ADMIN_ACCESS_ROLE\"))\n        request:headers('X-Auth-User-Roles',  os.getenv(\"ADMIN_ACCESS_ROLE\"))\n        request:headers('From', 'admin-user')\n        request:headers('X-Tenant-Id', os.getenv(\"AZURE_TENANT_ID\"))\n    -- else\n        -- custom_error(\"No permissions group\", 427)\n    -- end\nend"
  inventory_rbac.lua: "\n\nfunction getenv(key, fallback)\n    value = os.getenv(key)\n    if value == nil then\n        return fallback\n    end\n    return value\nend\n\nfunction user_group_auth(request)\n    -- set variables from request\n    local headers_group = request:headers('X-Auth-User-Groups')\n    local headers_role = request:headers('X-Auth-User-Roles')\n    local headers_all = headers_group .. \",\" .. headers_role\n\n    -- inventory RBAC settings\n    local permited_groups=getenv('INVENTORY_ADMIN_GROUP')\n\n    -- remove white spaces in groups\n    headers_all = headers_all:gsub(\"%s+\", \"\")\n    headers_all = headers_all:lower()\n    permited_groups = permited_groups:gsub(\"%s+\", \"\")\n    permited_groups = permited_groups:lower()\n    \n    -- if graphql query contain mutation, then check if user is admin\n    local query=string.match(request:body(), \"mutation\")\n\n    if query ~= nil then\n        for header_group in string.gmatch(headers_all, '([^,]+)') do\n            for permited_group in string.gmatch(permited_groups, '([^,]+)') do\n                if header_group == permited_group then\n                    return\n                end\n            end\n        end\n        print(\"User has no permissions for executing request, bad group\")\n        custom_error(\"No permissions group\", 427)\n    end\nend"
  uniconfig_query_escape.lua: "local char_to_hex = function(c)\n    return string.format(\"%%%02X\", string.byte(c))\nend\n\nfunction urlencode(r)\n    local url = r:url()\n    path, query = url:match(\"([^,]+)?([^,]+)\")\n    url = url:gsub(\";\", char_to_hex)\n    return url\nend"
  uniconfig_rbac.lua: "function user_group_auth(request, permited_groups)\n    local method = request:method()\n    local headers_group = request:headers('X-Auth-User-Groups')\n    local headers_role = request:headers('X-Auth-User-Roles')\n\n    local headers_all = headers_group .. \",\" .. headers_role\n    -- remove white spaces in groups\n    headers_all = headers_all:gsub(\"%s+\", \"\")\n    headers_all = headers_all:lower()\n    permited_groups = permited_groups:gsub(\"%s+\", \"\")\n    permited_groups = permited_groups:lower()\n    \n    -- if request method is different from GET\n    --  then check if user is in permitted groups\n    if method ~= \"GET\" then\n        for header_group in string.gmatch(headers_all, '([^,]+)') do\n            for permited_group in string.gmatch(permited_groups, '([^,]+)') do\n                if header_group == permited_group then\n                    return\n                end\n            end\n        end\n        print(\"User has no permissions for executing request, bad group\")\n        custom_error(\"No permissions group\", 427)\n    end\nend\n\n\n"
  unistore_rbac.lua: "local hex_to_char = function(x)\n    return string.char(tonumber(x, 16))\nend\n\nlocal unescape = function(url)\n    return url:gsub(\"%%(%x%x)\", hex_to_char)\nend\n\nfunction getenv(key, fallback)\n    value = os.getenv(key)\n    if value == nil then\n        return fallback\n    end\n    return value\nend\n\nfunction user_group_auth(request)\n\n    -- set variables from request\n    local method = request:method()\n    local url = unescape(request:url())\n\n    local headers_group = request:headers('X-Auth-User-Groups')\n    local headers_role = request:headers('X-Auth-User-Roles')\n    local headers_all = headers_group .. \",\" .. headers_role\n\n    -- Unistore RBAC settings\n\n    local permited_groups=getenv('UNISTORE_CONTROLLER_ADMIN_GROUP')\n    local other_role=getenv(\"UNISTORE_OTHER_PERMITTED_ROLES\",'')\n\n    local bearer_role=getenv(\"UNISTORE_BEARER_ROLE\",'')\n    local service_role=getenv(\"UNISTORE_SERVICE_ROLE\",'')\n    local network_role=getenv(\"UNISTORE_NETWORK_ROLE\",'')\n\n    local bearer_node=getenv(\"UNISTORE_BEARER_NODE\",'')\n    local service_node=getenv(\"UNISTORE_SERVICE_NODE\",'')\n    local network_node=getenv(\"UNISTORE_NETWORK_NODE\",'')\n    \n\n    local permited_all=''\n\n    if string.match(url, \"node=\") then\n        -- Add role to permited_group based on node parameter\n        for word in string.gmatch(url, '([^/]+)') do\n            if string.match(word, \"node=\") then\n                word = string.gsub(word, \"node=\", \"\")\n                print(word)\n                if string.match(word, bearer_node) then\n                    print(bearer_role)\n                    permited_all=bearer_role..\",\"..permited_groups \n                elseif string.match(word, service_node) then\n                    print(service_role)\n                    permited_all=service_role..\",\"..permited_groups \n                elseif string.match(word, network_node) then\n                    print(network_role)\n                    permited_all=network_role..\",\"..permited_groups\n                end\n            end\n        end\n    else\n        permited_all=permited_groups..\",\"..service_role..\",\"..network_role..\",\"..bearer_role..\",\"..other_role\n    end\n\n    -- remove white spaces and transform to lowercase\n    headers_all = headers_all:gsub(\"%s+\", \"\")\n    headers_all = headers_all:lower()\n    permited_all = permited_all:gsub(\"%s+\", \"\")\n    permited_all = permited_all:lower()\n    \n    -- if request method is different from GET\n    --  then check if user is in permitted groups\n\n\n    if method ~= \"GET\" then\n        for header_group in string.gmatch(headers_all, '([^,]+)') do\n            for permited_group in string.gmatch(permited_all, '([^,]+)') do\n                if header_group == permited_group then\n                    return\n                end\n            end\n        end\n        print(\"User has no permissions for executing request, bad group\")\n        custom_error(\"No permissions group\", 427)\n    end\nend\n\n"
  wp_azure_swagger.lua: "function swagger_auth_modal(r,jwt,scope,client_id)\n    local body = r:body()\n    if jwt == \"true\" then\n        -- change token request to id_token\n        body = body:gsub(\"response_type=token\", \"response_type=id_token\");\n        -- -- -- disable client_id input box and use default\n        body = body:gsub(\"||C===x\", \"\");\n        body = body:gsub('client_id=\"%+encodeURIComponent%(p%)', 'client_id=' .. client_id .. '\"');\n        -- -- -- -- disable scopes selection and use default, add nonce query parameter\n        body = body:gsub('C,j=o.get%(\"allowedScopes\"%)||o.get%(\"scopes\"%),', \"\");\n        body = body:gsub('T%(%)%(l%)%?m%=l:F%(%).List.isList%(l%)&&%(m=l.toArray%(%)%),m.length%>0', \"true\");\n        body = body:gsub('scope=\"%+encodeURIComponent%(m.join%(v%)%)', 'scope=' .. scope .. '&nonce=678910\"');\n        r:headers('Content-Length', tostring(body:len()))\n    end\n    return body\nend"
---
# Source: frinx-machine/charts/krakend/templates/configmap-settings.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: krakend-settings
data:
  frinx_frontend_settings.json: "{\n    \"range\": [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10\n    ]\n}"
  uniconfig_settings.json: "{\n    \"methods\": [\n        \"PUT\",\n        \"GET\",\n        \"PATCH\",\n        \"DELETE\",\n        \"POST\"\n    ],\n    \"range\": [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        28,\n        29,\n        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n        36,\n        37,\n        38,\n        39,\n        40,\n        41,\n        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n        50\n    ]\n}"
  resource_settings.json: "{\n    \"endpoints\": [\n        {\n            \"endpoint\": \"/api/resource\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/query\"\n        }\n    ]\n}"
  unistore_settings.json: "{\n    \"hosts\": [\n        \"unistore\"\n    ],\n    \"methods\": [\n        \"PUT\",\n        \"GET\",\n        \"PATCH\",\n        \"DELETE\",\n        \"POST\"\n    ],\n    \"range\": [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        28,\n        29,\n        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n        36,\n        37,\n        38,\n        39,\n        40,\n        41,\n        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n        50\n    ]\n}\n"
  workflow_proxy_docs_settings.json: "{\n    \"endpoints\": [\n        {\n            \"endpoint\": \"/api/workflow/docs\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/docs-uniconfig\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs-uniconfig\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/swagger-ui.css\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/swagger-ui.css\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/swagger-ui-bundle.js\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/swagger-ui-bundle.js\",\n            \"extra_config\": {\n                \"modifier/lua-proxy\": {\n                    \"sources\": [\"scripts/wp_azure_swagger.lua\"],\n                    \"allow_open_libs\": true,\n                    \"post\": \"local r = response.load(); r:body(swagger_auth_modal(r, os.getenv('AUTH_ENABLED'), 'openid', os.getenv('AZURE_KRAKEND_PLUGIN_CLIENT_ID')));\",\n                    \"live\": true\n                }\n            }\n        },\n        {\n            \"endpoint\": \"/api/workflow/swagger-ui.css.map\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/swagger-ui.css.map\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/swagger-ui-standalone-preset.js\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/swagger-ui-standalone-preset.js\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/swagger-ui-standalone-preset.js.map\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/swagger-ui-standalone-preset.js.map\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/swagger-ui-init.js\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/swagger-ui-init.js\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/favicon-32x32.png\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/favicon-32x32.png\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/favicon-16x16.png\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/favicon-16x16.png\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/oauth2-redirect.html\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/docs/oauth2-redirect.html\"\n        }\n    ]\n}\n"
  workflow_proxy_settings.json: "{\n    \"endpoints\": [\n        {\n            \"endpoint\": \"/api/workflow/metadata/taskdefs\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/metadata/taskdefs\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/taskdefs\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/metadata/taskdefs\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/taskdefs\",\n            \"method\": \"PUT\",\n            \"url_pattern\": \"/metadata/taskdefs\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/taskdefs/{name}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/metadata/taskdefs/{name}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/taskdefs/{name}\",\n            \"method\": \"DELETE\",\n            \"url_pattern\": \"/metadata/taskdefs/{name}\",\n            \"input_query_strings\": [\n                \"archiveWorkflow\"\n              ]\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/workflow\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/metadata/workflow\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/workflow\",\n            \"method\": \"PUT\",\n            \"url_pattern\": \"/metadata/workflow\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/workflow\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/metadata/workflow\"\n        },   \n        {\n            \"endpoint\": \"/api/workflow/metadata/workflow/{name}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/metadata/workflow/{name}\",\n            \"input_query_strings\": [\n                \"version\"\n              ]\n        },\n        {\n            \"endpoint\": \"/api/workflow/metadata/workflow/{name}/{version}\",\n            \"method\": \"DELETE\",\n            \"url_pattern\": \"/metadata/workflow/{name}/{version}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/{a}\",\n            \"method\": \"DELETE\",\n            \"url_pattern\": \"/workflow/{a}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/{a}/{b}\",\n            \"method\": \"DELETE\",\n            \"url_pattern\": \"/workflow/{a}/{b}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/workflow\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/event\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/event\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/event\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/event\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/event/{name}\",\n            \"method\": \"DELETE\",\n            \"url_pattern\": \"/event/{name}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/event/{event}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/event/{event}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/id/{workflowId}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/id/{workflowId}\",\n            \"input_query_strings\": [\n                \"includeTasks\"\n              ]\n        },\n        {\n            \"endpoint\": \"/api/workflow/schedule\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/schedule\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/schedule/{name}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/schedule/{name}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/schedule/{name}\",\n            \"method\": \"PUT\",\n            \"url_pattern\": \"/schedule/{name}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/schedule/{name}\",\n            \"method\": \"DELETE\",\n            \"url_pattern\": \"/schedule/{name}\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/queue/data\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/queue/data\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/editableworkflows\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/editableworkflows\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/bulk/pause\",\n            \"method\": \"PUT\",\n            \"url_pattern\": \"/workflow/bulk/pause\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/bulk/resume\",\n            \"method\": \"PUT\",\n            \"url_pattern\": \"/workflow/bulk/resume\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/bulk/retry\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/workflow/bulk/retry\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/bulk/restart\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/workflow/bulk/restart\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/workflow/bulk/terminate\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/workflow/bulk/terminate\"\n        },\n        {\n            \"@comment\": \"Deprecated\",\n            \"endpoint\": \"/api/workflow/workflow/bulk/terminate\",\n            \"method\": \"DELETE\",\n            \"backend_method\": \"POST\",\n            \"url_pattern\": \"/workflow/bulk/terminate\"\n        },\n        {\n            \"endpoint\": \"/api/workflow/hierarchical\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/hierarchical\",\n            \"input_query_strings\": [\n                \"start\",\n                \"size\",\n                \"status\",\n                \"workflowId\",\n                \"order\"\n              ]\n        },\n        {\n            \"endpoint\": \"/api/workflow/executions\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/executions?q=&h=\",\n            \"input_query_strings\": [\n                \"start\",\n                \"size\",\n                \"status\",\n                \"workflowId\",\n                \"order\"\n              ]\n        },\n        {\n            \"endpoint\": \"/api/workflow/external/postgres/{dataId}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/external/postgres/{dataId}\"\n        }\n    ]\n}"
  topology_discovery_settings.json: "{\n    \"endpoints\": [\n        {\n            \"endpoint\": \"/api/topology/health\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/health\"\n        },\n        {\n            \"endpoint\": \"/api/topology/providers\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/api/providers\"\n        },\n        {\n            \"endpoint\": \"/api/topology/providers/{provider}\",\n            \"method\": \"GET\",\n            \"url_pattern\": \"/api/providers/{provider}\"\n        },\n        {\n            \"endpoint\": \"/api/topology/providers/{provider}/trigger\",\n            \"method\": \"POST\",\n            \"url_pattern\": \"/api/providers/{provider}/trigger\"\n        }\n    ]\n}\n"
---
# Source: frinx-machine/charts/krakend/templates/configmap-templates.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: krakend-templates
data:
  frinx_frontend.tmpl: "\n{{range $index_in_range, $not_used_element := $.range}}\n{{if gt $index_in_range 0}},{{end}}\n{\n    \"endpoint\": \"/{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if lt $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n    \"method\": \"GET\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [\"*\"],\n\n    \"backend\": [\n    {\n        \"url_pattern\": \"{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if lt $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n        \"encoding\": \"no-op\",\n        \"sd\": \"static\",\n        \"disable_host_sanitize\": false,\n        \"host\": [\n            \"frinx-frontend:8888\"\n        ]\n    }\n]\n}\n{{end}}"
  inventory.tmpl: "{\n    \"endpoint\": \"/api/inventory\",\n    \"method\": \"POST\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }} ],\n\n    \"extra_config\": {\n        {{ $jwt_production := env \"AUTH_ENABLED\" }}\n        {{ if eq $jwt_production \"true\" }}\n            {{ include \"jwt_config.tmpl\" }}\n        {{ else if eq $jwt_production \"false\" }}\n            {{ include \"jwt_fake_config.tmpl\" }}\n        {{ end }}\n    },\n\n    \"backend\": [\n        {\n            \"url_pattern\": \"/graphql\",\n            \"sd\": \"static\",\n            \"encoding\": \"no-op\",\n            \"disable_host_sanitize\": false,\n            \"extra_config\": {\n                {{ include \"modifiers.tmpl\" }}\n            },\n            \"host\": [\n                \"inventory:8000\"\n            ]\n        }\n    ]\n}, \n{\n    \"endpoint\": \"/api/inventory\",\n    \"method\": \"GET\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [\"*\"],\n\n    \"backend\": [\n        {\n            \"url_pattern\": \"/graphql\",\n            \"encoding\": \"no-op\",\n            \"host\": [\n                \"inventory:8000\"\n            ]\n        }\n    ]\n}"
  uniconfig.tmpl: "{{ $zones := env \"UNICONFIG_ZONES_LIST\" }}\n{{ $protocol := env \"KRAKEND_TLS_PROTOCOL\" }}\n{{ $zone_list := splitList \",\" $zones }}\n\n{{range $host_index, $host := $zone_list}}\n{{range $index_in_range, $not_used_element := $.range}}\n\n{\n    \"endpoint\": \"/api/{{$host}}/operations{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n    \"method\": \"POST\",\n    \"output_encoding\": \"no-op\",\n    \"input_query_strings\": [\"*\"],\n    \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }}, \"Accept\", \"cookie\" ],\n    \"extra_config\": {\n        {{ $jwt_production := env \"AUTH_ENABLED\" }}\n        {{ if eq $jwt_production \"true\" }}\n            {{ include \"jwt_config.tmpl\" }},\n            \"modifier/lua-endpoint\": {\n                \"sources\": [\"scripts/uniconfig_rbac.lua\"],\n                \"allow_open_libs\": true,\n                \"pre\": \"local r = ctx.load(); user_group_auth(r, os.getenv('UNICONFIG_CONTROLLER_ADMIN_GROUP'));\",\n                \"live\": true\n            }                \n        {{ else if eq $jwt_production \"false\" }}\n            {{ include \"jwt_fake_config.tmpl\" }}\n        {{ end }}\n    },\n\n    \"backend\": [\n        {\n            \"url_pattern\": \"/rests/operations{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n            \"extra_config\": {\n                {{ include \"modifiers.tmpl\" }}\n            },\n            \"encoding\": \"no-op\",\n            \"host\": [\n                \"https://{{$host}}:8181\"\n            ]\n        }\n    ]\n},\n{{end}}\n{{end}}\n\n\n{{range $host_index, $host := $zone_list}}\n{{range $index_in_range, $not_used_element := $.range}}\n{{range $method_index, $method := $.methods}}\n\n{\n    \"endpoint\": \"/api/{{$host}}/data{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n    \"method\": \"{{$method}}\",\n    \"output_encoding\": \"no-op\",\n    \"input_query_strings\": [\"*\"],\n    \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }}, \"Accept\", \"cookie\" ],\n    \"extra_config\": {\n        {{ $jwt_production := env \"AUTH_ENABLED\" }}\n        {{ if eq $jwt_production \"true\" }}\n            {{ include \"jwt_config.tmpl\" }},\n            \"modifier/lua-endpoint\": {\n                \"sources\": [\"scripts/uniconfig_query_escape.lua\", \"scripts/uniconfig_rbac.lua\"],\n                \"allow_open_libs\": true,\n                \"pre\": \"local r = ctx.load(); r:url(urlencode(r)); user_group_auth(r, os.getenv('UNICONFIG_CONTROLLER_ADMIN_GROUP'))\",\n                \"live\": true\n            }                    \n        {{ else if eq $jwt_production \"false\" }}\n            \"modifier/lua-endpoint\": {\n                \"@comment\": \"Fixing escape queries with multiple fields separated by semicolon\",\n                \"sources\": [\"scripts/uniconfig_query_escape.lua\", \"scripts/fake_frinx_token.lua\"],\n                \"allow_open_libs\": true,\n                \"pre\": \"local r = ctx.load(); r:url(urlencode(r)); fake_token_validate(r)\",\n                \"live\": true\n            }\n        {{ end }}\n    },\n\n    \"backend\": [\n        {\n            \"url_pattern\": \"/rests/data{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n            \"extra_config\": {\n                {{ include \"modifiers.tmpl\" }}\n            },\n            \"encoding\": \"no-op\",\n            \"host\": [\n                \"https://{{$host}}:8181\"\n            ]\n        }\n    ]\n},\n\n{{end}}\n{{end}}\n{{end}}\n\n{\n    \"@comment\": \"Return list of uniconfig-controller zones\",\n\n    \"endpoint\": \"/static/list/uniconfig\",\n    \"method\": \"GET\",\n    \"backend\": [\n        {\n            \"url_pattern\": \"/__health\",\n            \"extra_config\": {\n                {{ include \"modifiers.tmpl\" }}\n            },\n            \"host\": [ \"{{$protocol}}://krakend:8080/\" ],\n            \"allow\": [\n                \"instances\"\n            ]\n        }\n    ],\n   \n    \"extra_config\": {\n        \"proxy\": {\n            \"static\": {\n                \"strategy\": \"always\",\n                \"data\": {\n                    \"instances\": [ {{range $host_index, $host := $zone_list}} {{if gt $host_index 0}},{{end}} \"{{$host}}\" {{end}} ]\n                }\n            }\n        }\n    }\n}\n"
  resource.tmpl: "{{range $index, $element := .}}\n{{if gt $index 0}},{{end}}\n{\n    \"endpoint\": \"{{ .endpoint }}\",\n    \"method\": \"{{ .method }}\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }} ],\n\n    {{ if .input_query_strings }}\n    \"input_query_strings\": [ \n        {{range $query_enabled, $query := .input_query_strings}} {{if gt $query_enabled 0}},{{end}} \"{{$query}}\" {{ end }} \n        ],\n    {{end}}\n\n    \"extra_config\": {\n        {{ $jwt_production := env \"AUTH_ENABLED\" }}\n        {{ if eq $jwt_production \"true\" }}\n            {{ include \"jwt_config.tmpl\" }}\n        {{ else if eq $jwt_production \"false\" }}\n            {{ include \"jwt_fake_config.tmpl\" }}\n        {{ end }}\n    },\n\n    \"backend\": [\n    {\n        \"url_pattern\": \"{{ .url_pattern }}\",\n        \"encoding\": \"no-op\",\n        \"extra_config\": {\n            {{ include \"modifiers.tmpl\" }}\n        },\n        \"host\": [\n            \"resource-manager:8884\"\n        ]\n    }\n]\n}\n{{end}}"
  unistore.tmpl: "{{range $index_in_range, $not_used_element := $.range}}\n{{if gt $index_in_range 0}},{{end}}\n\n    {{range $host_index, $host := $.hosts}}\n    {{if gt $host_index 0}},{{end}}\n\n    {\n        \"endpoint\": \"/api/{{$host}}/operations{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n        \"method\": \"POST\",\n        \"output_encoding\": \"no-op\",\n        \"input_query_strings\": [\"*\"],\n        \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }}, \"Accept\", \"cookie\" ],\n        \"extra_config\": {\n            {{ $jwt_production := env \"AUTH_ENABLED\" }}\n            {{ if eq $jwt_production \"true\" }}\n                {{ include \"jwt_config.tmpl\" }},\n                \"modifier/lua-endpoint\": {\n                    \"sources\": [\"scripts/unistore_rbac.lua\"],\n                    \"allow_open_libs\": true,\n                    \"pre\": \"local r = ctx.load(); user_group_auth(r)\",\n                    \"live\": true\n                }\n            {{ else if eq $jwt_production \"false\" }}\n                {{ include \"jwt_fake_config.tmpl\" }}\n            {{ end }}\n        },\n\n        \"backend\": [\n            {\n                \"url_pattern\": \"/rests/operations{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n                \"extra_config\": {\n                    {{ include \"modifiers.tmpl\" }}\n                },\n                \"encoding\": \"no-op\",\n                \"host\": [\n                    \"http://{{$host}}:8181\"\n                ]\n            }\n        ]\n    }\n    {{end}}\n{{end}},\n\n\n{{range $method_index, $method := .methods}}\n{{if gt $method_index 0}},{{end}}\n\n    {{range $index_in_range, $not_used_element := $.range}}\n    {{if gt $index_in_range 0}},{{end}}\n\n        {{range $host_range, $host := $.hosts}}\n        {{if gt $host_range 0}},{{end}}\n\n            {\n                \"endpoint\": \"/api/{{$host}}/data{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n                \"method\": \"{{$method}}\",\n                \"output_encoding\": \"no-op\",\n                \"input_query_strings\": [\"*\"],\n                \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }}, \"Accept\", \"cookie\" ],\n                \"extra_config\": {\n                    {{ $jwt_production := env \"AUTH_ENABLED\" }}\n                    {{ if eq $jwt_production \"true\" }}\n                        {{ include \"jwt_config.tmpl\" }},\n                        \"modifier/lua-endpoint\": {\n                            \"sources\": [\"scripts/uniconfig_query_escape.lua\", \"scripts/unistore_rbac.lua\"],\n                            \"allow_open_libs\": true,\n                            \"pre\": \"local r = ctx.load(); r:url(urlencode(r)); user_group_auth(r)\",\n                            \"live\": true\n                        }\n                    {{ else if eq $jwt_production \"false\" }}\n                        \"modifier/lua-endpoint\": {\n                            \"@comment\": \"Fixing escape queries with multiple fields separated by semicolon\",\n                            \"sources\": [\"scripts/uniconfig_query_escape.lua\", \"scripts/fake_frinx_token.lua\"],\n                            \"allow_open_libs\": true,\n                            \"pre\": \"local r = ctx.load(); r:url(urlencode(r)); fake_token_validate(r)\",\n                            \"live\": true\n                        }\n                    {{ end }}\n                },\n\n                \"backend\": [\n                    {\n                        \"url_pattern\": \"/rests/data{{range $index_for_uri, $not_used_element2 := $.range -}} {{- if le $index_for_uri $index_in_range -}} /{{\"{\"}}n_{{$index_for_uri}}{{\"}\" -}} {{end}}{{end}}\",\n                        \"extra_config\": {\n                            {{ include \"modifiers.tmpl\" }}\n                        },\n                        \"encoding\": \"no-op\",\n                        \"host\": [\n                            \"http://{{$host}}:8181\"\n                        ]\n                    }\n                ]\n            }\n\n        {{end}}\n    {{end}}\n{{end}}\n"
  workflow_proxy_docs.tmpl: "{{range $index, $element := .}}\n{{if gt $index 0}},{{end}}\n{\n    \"endpoint\": \"{{ .endpoint }}\",\n    \"method\": \"{{ .method }}\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [\"*\"],\n\n    {{ if .input_query_strings }}\n    \"input_query_strings\": [ \n        {{range $query_enabled, $query := .input_query_strings}} {{if gt $query_enabled 0}},{{end}} \"{{$query}}\" {{ end }} \n        ],\n    {{end}}\n\n    {{ if .extra_config }}\n        \"extra_config\": {{ marshal .extra_config }},\n    {{end}}\n   \n    \"backend\": [\n    {\n        \"url_pattern\": \"{{ .url_pattern }}\",\n        \"encoding\": \"no-op\",\n        \"sd\": \"static\",\n        \"disable_host_sanitize\": false,\n        \"extra_config\": {\n            \"modifier/martian\": {\n                \"fifo.Group\": {\n                    \"scope\": [\"request\", \"response\"],\n                    \"aggregateErrors\": true,\n                    \"modifiers\": [\n                        {\n                            \"header.Modifier\": {\n                                \"scope\": [\"request\"],\n                                \"name\": \"Accept-Encoding\",\n                                \"value\": \"identity\"\n                            }\n                        }\n                    ]\n                }\n              }\n        },\n        \"host\": [\n            \"workflow-proxy:8088\"\n        ]\n    }\n]\n}\n{{end}}"
  workflow_proxy.tmpl: "{{range $index, $element := .}}\n{{if gt $index 0}},{{end}}\n{\n    \"endpoint\": \"{{ .endpoint }}\",\n    \"method\": \"{{ .method }}\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }} ],\n\n    {{ if .input_query_strings }}\n    \"input_query_strings\": [ \n        {{range $query_enabled, $query := .input_query_strings}} {{if gt $query_enabled 0}},{{end}} \"{{$query}}\" {{ end }} \n        ],\n    {{end}}\n\n    \"extra_config\": {\n        {{ $jwt_production := env \"AUTH_ENABLED\" }}\n        {{ if eq $jwt_production \"true\" }}\n            {{ include \"jwt_config.tmpl\" }}\n        {{ else if eq $jwt_production \"false\" }}\n            {{ include \"jwt_fake_config.tmpl\" }}\n        {{ end }}\n    },\n\n    \"backend\": [\n    {\n        \"url_pattern\": \"{{ .url_pattern }}\",\n        \"encoding\": \"no-op\",\n        \"sd\": \"static\",\n\n        {{ if .backend_method }}\n            \"method\": \"{{.backend_method}}\",\n        {{end}}\n        \n        \"disable_host_sanitize\": false,\n        \"extra_config\": {\n            {{ include \"modifiers.tmpl\" }}\n        },\n        \"host\": [\n            \"workflow-proxy:8088\"\n        ]\n    }\n]\n}\n{{end}}"
  topology_discovery.tmpl: "{{range $index, $element := .}}\n{{if gt $index 0}},{{end}}\n{\n    \"endpoint\": \"{{ .endpoint }}\",\n    \"method\": \"{{ .method }}\",\n    \"output_encoding\": \"no-op\",\n    \"input_headers\": [ {{ include \"allowed_headers.tmpl\" }} ],\n\n    {{ if .input_query_strings }}\n    \"input_query_strings\": [ \n        {{range $query_enabled, $query := .input_query_strings}} {{if gt $query_enabled 0}},{{end}} \"{{$query}}\" {{ end }} \n        ],\n    {{end}}\n\n    \"extra_config\": {\n        {{ $jwt_production := env \"AUTH_ENABLED\" }}\n        {{ if eq $jwt_production \"true\" }}\n            {{ include \"jwt_config.tmpl\" }}\n        {{ else if eq $jwt_production \"false\" }}\n            {{ include \"jwt_fake_config.tmpl\" }}\n        {{ end }}\n    },\n\n    \"backend\": [\n    {\n        \"url_pattern\": \"{{ .url_pattern }}\",\n        \"encoding\": \"no-op\",\n        \"sd\": \"static\",\n\n        {{ if .backend_method }}\n            \"method\": \"{{.backend_method}}\",\n        {{end}}\n        \n        \"disable_host_sanitize\": false,\n        \"extra_config\": {\n            {{ include \"modifiers.tmpl\" }}\n        },\n        \"host\": [\n            \"topology-discovery:5000\"\n        ]\n    }\n]\n}\n{{end}}\n"
---
# Source: frinx-machine/charts/postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frinx-postgresql-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
data:
  init_db.sql: |
    CREATE DATABASE schellar;
    CREATE DATABASE conductor;
    CREATE DATABASE inventory;
---
# Source: frinx-machine/charts/telegraf-ds/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-ds
  labels:
    helm.sh/chart: telegraf-ds-1.1.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: frinx
data:
  telegraf.conf: |+
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      hostname = "$HOSTNAME"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = false
      precision = ""
      quiet = false
      round_interval = true
    
    [[outputs.influxdb_v2]]
      bucket = "frinx"
      organization = "frinx-machine"
      token = "eyJrIjoiN09MSVpVZjlVRG1xNHlLNXpVbmZJOXFLWU1GOXFxNEIiLCJuIjoic3Nzc3MiLCJpZCI6MX0"
      urls = ["http://influxdb"]
    
    [[outputs.health]]
      service_address = "http://:8080"
    
    [[inputs.diskio]]
    [[inputs.kernel]]
    [[inputs.mem]]
    [[inputs.net]]
    [[inputs.processes]]
    [[inputs.swap]]
    [[inputs.system]]
    
    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      collect_cpu_time = false
      report_active = false
    
    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
    
    [[inputs.kubernetes]]
      url = "https://$HOSTIP:10250"
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      [inputs.kubernetes.tagpass]
        namespace = [ "${NAMESPACE}" ]
---
# Source: frinx-machine/charts/uniconfig/templates/configmap-lighty-uniconfig-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uniconfig-controller-configmap-lighty-uniconfig-config
data:
  lighty-uniconfig-config.json: |-
    {
        // Controller configuration.
        "controller": {
            // DOM notification service - settings related to notifications queue.
            "domNotificationRouterConfig": {
                // size of the notification queue
                "queueDepth": 65536,
                // the maximum time in to busy spin for (see PhasedBackoffWaitStrategy)
                "spinTime": 0,
                // the maximum time in to yield for (see PhasedBackoffWaitStrategy)
                "parkTime": 0,
                // time unit that expresses values of spin-time and park-time.
                "unit": "MILLISECONDS"
            },
            /*
            Contains list of paths to artifacts containing YANG modules for UniConfig schema
            and identifiers of the schema directories.
            */
            "schemaServiceConfig": {
                // set of YANG modules that are loaded at initialization of UniConfig
                "topLevelModules": [],
                // path to the root cache directory that holds custom schemas
                "rootCacheDirectory": "cache",
                // path to the directory to which system YANG schemas are loaded
                "systemSchemasDirectory": "schemas"
            },
            // Settings related to configuration datastore and associated data-change events
            "configurationDatastoreConfig": {
                // maximum thread pool size for the data change notification executor
                "maxDataChangeExecutorPoolSize": 20,
                // maximum queue size for the data change notification executor
                "maxDataChangeExecutorQueueSize": 1000,
                // maximum queue size for the data change listeners
                "maxDataChangeListenerQueueSize": 1000,
                // maximum queue size for the data store executor
                "maxDataStoreExecutorQueueSize": 5000
            },
            // Settings related to operational datastore and associated data-change events
            "operationalDatastoreConfig": {
                // maximum thread pool size for the data change notification executor
                "maxDataChangeExecutorPoolSize": 20,
                // maximum queue size for the data change notification executor
                "maxDataChangeExecutorQueueSize": 1000,
                // maximum queue size for the data change listeners
                "maxDataChangeListenerQueueSize": 1000,
                // maximum queue size for the data store executor
                "maxDataStoreExecutorQueueSize": 5000
            }
        },
        // RESTCONF and web server settings
        "restconf": {
            // listening web server port
            "httpPort": 8181,
            // IP address on which web server is listening to incoming requests (0.0.0.0 - addresses of all interfaces)
            "inetAddress": "0.0.0.0",
            // common URL prefix under which all resources and operations are registered
            "restconfServletContextPath": "/rests",
            // delimiter used for escaping of list keys in URI (for example, '%22')
            // if it is set to 'null' (default), keys cannot be escaped and must be directly encoded according to RFC-8040
            "keyDelimiter": null,
            // Flag that determines if the data node that is empty(means node contains only attribute tag) should be hidden
            // during GET operation.
            "hideEmptyDataNodes": false,
            // Settings related to filtering of data in CRUD operations.
            "schemaFilters": {
                // List of extension definitions that can be used to filter out data during PUT/POST/PATCH operation.
                //"ignoredDataOnWriteByExtensions": [
                //    "tailf:hidden full"
                //],
                // List of extension definitions that can be used to filter out data during GET operation.
                //"hiddenDataOnReadByExtensions": [
                //    "tailf:hidden deprecated",
                //    "tailf:hidden debug"
                //],
                // Indicates if the data for non-existing schema nodes will be ignored during PUT/POST/PATCH operation.
                "ignoreUnsupportedDefinitionsOnWrite": false,
                // Indicates if the definition with "DEPRECATED" status should be hidden during GET operation.
                "hideDeprecatedDefinitionsOnRead": false
            },
            // default value 0 makes the behavior as defined in RFC8040 (returns status code 404 [Not Found]),
            // if changed to anything else, that status code will be returned
            "statusCodeForEmptyGetResponse": 0,
            // this flag removes namespaces from GET response (only if there are no duplicate localnames)
            // (E.g. if there is: namespace1:test and namespace2:test  .. the namespace won't be removed because
            // there would be two identical localnames)
            "showNamespaceInJsonResponse": true
        },
        /*
        CLI shell settings via environment variables.
        Environment variables override settings from JSON config part.
  
        cliShell_sshServer_enabled=false
        cliShell_sshServer_port=2022
        cliShell_sshServer_inetAddress=0.0.0.0
        cliShell_sshServer_usernamePasswordAuth_username=admin
        cliShell_sshServer_usernamePasswordAuth_password=secret
        */
        "cliShell": {
            "sshServer": {
                // Flag that determines if ssh server will be started or not.
                "enabled": false,
                // Port bind to ssh server.
                "port": 2022,
                // IP address bind to ssh server.
                "inetAddress": "127.0.0.1",
                // Basic username + password authentication.
                "usernamePasswordAuth": {
                    "username": "admin",
                    "password": "secret"
                }
            },
            // Flag that determines if uniconfig-shell provides scrolling of output
            "enableScrolling": false,
            // Number of history items to keep in memory
            "historySize": 500,
            // Number of history items to keep in the history file
            "historyFileSize": 1000
        },
        /*
        Settings for the Device Discovery service
        */
        "deviceDiscovery":{
            // A parameter that specifies the local address from which the scanning will be ran.
            "localAddress": "",
            // A parameter that specifies the maximum pool size by the executor.
            // If left empty, the default will be CPU_COUNT * 8.
            //"maxPoolSize": 20,
            // A parameter that specifies the maximum limit of IP addresses that the service can process in one request.
            "addressCheckLimit": 254
        },
        /*
        DB persistence settings via environment variables.
        Environment variables override settings from JSON config part.
  
        dbPersistence_embedded_database_enabled=false
        dbPersistence_embedded_database_dataDir=./data/pg_dir
        dbPersistence_embedded_database_cleanDataDir=true
        dbPersistence_connection_dbName=uniconfig
        dbPersistence_connection_username=uniremote
        dbPersistence_connection_password=unipass
        dbPersistence_connection_initialDbPoolSize=5
        dbPersistence_connection_maxDbPoolSize=10
        dbPersistence_connection_maxIdleConnections=5
        dbPersistence_connection_maxWaitTime=30000
        dbPersistence_connection_enabledTls=false
        dbPersistence_connection_tlsClientCert=./client.pks
        dbPersistence_connection_tlsClientKey=./client.key
        dbPersistence_connection_tlsCaCert=./ca.pks
        dbPersistence_connection_databaseLocations_host=127.0.0.1
        dbPersistence_connection_databaseLocations_port=26257
        dbPersistence_uniconfigInstance_instanceName=uc-0
        */
        "dbPersistence": {
            /*
            Grouped settings that are related to embedded database.
            The embedded database is only for testing purposes, it should not be run in the production environment.
            Database is started and initialized using 'connection'/'dbName' and 'connection'/'username' parameters.
            The embedded database does not use a password, therefore it ignores the password parameter.
            */
            "embeddedDatabase": {
                // Flag that determines if embedded database will be started or not.
                "enabled": false,
                // A parameter that specifies the name of the subdirectory in which the embedded database is stored.
                "dataDir": "./data/pg_dir",
                // A parameter that determines if the 'dataDir' directory will be deleted after uniconfig is turned off.
                "cleanDataDir": true
            },
            // Grouped settings related to database connection.
            "connection": {
                // name of the database
                "dbName": "uniconfig",
                // name of the user that has the remote access to database specified by 'dbName'
                "username": "uniremote",
                // user password (it is used only for the password-base authentication)
                "password": "unipass",
                // initial size of the connection pool (pre-initialized connections)
                "initialDbPoolSize": 5,
                // maximum size of the connection pool, before creation of next connections are blocked
                "maxDbPoolSize": 300,
                // maximum number of idle connections before next idle connections are cleaned
                "maxIdleConnections": 5,
                /*
                Timeout value used for socket read operations. If reading from the server takes longer than this value,
                the connection is closed. This can be used as both a brute force global query timeout and a method of
                detecting network problems. The timeout is specified in seconds and a value of 0 means that it is disabled.
                */
                "socketReadTimeout": 20,
                // maximum wait time for obtaining of a new connection before fetch request is dropped [milliseconds]
                "maxWaitTime": 30000,
                // enabled TLS authentication (if it is enabled, 'tlsClientCert', 'tlsClientKey', and 'tlsCaCert'
                // are used and 'password' field is not used
                "enabledTls": false,
                // path to UniConfig client certificate (relative path from UniConfig main folder)
                // - used for authentication of UniConfig against DB
                "tlsClientCert": "./client.pks",
                // path to UniConfig client certificate key (relative path from UniConfig main folder)
                "tlsClientKey": "./client.key",
                // path to certificate of DB certificate authority - used for authentication of DB against UniConfig
                "tlsCaCert": "./ca.pks",
                /*
                List of network locations at which target database resides. The first entry is always tried in the first
                attempt during creation of database connection. If there are multiple entries specified, then other
                locations are used as fallback method in the order in which they are specified.
                */
                "databaseLocations": [
                    {
                        // database hostname / IP address
                        "host": "127.0.0.1",
                        // TCP port on which target database listens to incoming connections
                        "port": 26257
                    }
                ],
                /*
                Repairs the Flyway schema history table before Flyway migration. This will perform the following actions:
                 1. Remove any failed migrations on databases.
                 2. Realign the checksums, descriptions and types of the applied migrations with available migrations.
                */
                "repairSchemaHistory": false
            },
            // UniConfig instance naming settings.
            "uniconfigInstance": {
                // Identifier of the local UniConfig instance (name must be unique in the cluster). If it is set to 'null'
                // then this identifier is tried to be loaded from 'data/instance_name'. If this file doesn't exist, then
                // name of the UniConfig instance is randomly generated and this file is created with new name of instance.
                "instanceName": null
            },
            // Heart beat service settings.
            "heartBeat": {
                // interval between updating of local UniConfig instance heartbeat timestamp [milliseconds]
                "heartbeatInterval": 1000
            }
        },
        // Template settings
        "templates": {
            // Enabled templates - if it is set to 'false', UniConfig will not prepare YANG modules for templates
            // - creation of templates will not work. Enabled templates consumes more memory than setup without templates.
            "enabled": false,
            /* Name of the YANG module which is used for comparison of loaded YANG repositories based on revision and
               further saving the name of the latest YANG repository. Latest YANG repository is automatically used
               at creation of new template node, if user doesn't specify it explicitly. If this setting is not specified,
               this feature will be disabled.*/
            // "latestSchemaReferenceModuleName": "system"
            // Enabled auto-upgrading of templates that are using old YANG repository to templates with same name
            // and latest YANG repositories (applying version-drop). Before templates are upgraded, they are also backed up.
            "enabledTemplatesUpgrading": false,
            // Maximum age of backup template [days]. After that age, template will be removed from database permanently.
            // Negative value will cause removing of such template immediately at the next UniConfig booting process.
            "maxBackupTemplateAge": -1
        },
        // Grouped settings that are related to Uniconfig transactions.
        "transactions": {
            "maxStoredTransactions": 100,
            /*
            Time after transaction can be closed [seconds] by transaction cleaner.
            */
            "transactionIdleTimeOut": 3600,
            /*
            Maximum transaction age before it can be evicted from transaction registry [seconds].
            Configuring '0' disables cleaning of Uniconfig transactions.
            */
            "maxTransactionAge": 7200,
            /*
            Interval at which expired transactions are closed and cleaned [seconds].
            Expired transaction: transaction which age exceeds 'maxTransactionAge' setting.
            Only dedicated Uniconfig transactions (initialized using 'create-transaction' RPC)
            are cleaned - shared transaction is never removed or invalidated.
             Configuring '0' disables cleaning of Uniconfig transactions.
            */
            "cleaningInterval": 60,
            /*
            Boolean value if the Immediate Commit Model is enabled or not. Default value is true.
            If disabled, only manually created transactions can exist.
            */
            "isImmediateCommitEnabled": true
        },
        // Grouped settings that are related to notifications.
        "notifications": {
            // Flag that determines whether notifications are collected
            "enabled": false,
            "kafka": {
                // Username used for authentication into Kafka brokers (SASL). If it is not set, then authentication
                // is disabled (PLAINTEXT scheme).
                // "username": "kafka",
                // Password used for authentication into Kafka brokers.
                //"password": "kafka",
                "kafkaServers": [
                    {
                        // Address / hostname of the interface on which Kafka broker is listening to incoming connections.
                        "brokerHost": "127.0.0.1",
                        // TCP port on which Kafka broker is listening to incoming connections.
                        "brokerListeningPort": 9092
                    }
                ],
                // Kafka producer settings
                "kafkaProducer": {
                    // Specifies the number of messages that the Kafka handler processes as a batch
                    "batchSize": 16384
                },
                // Flag that determines whether netconf notifications are enabled
                "netconfNotificationsEnabled": true,
                // Flag that determines whether audit logs are enabled
                "auditLogsEnabled": true,
                // Flag that determines whether transaction notifications are enabled
                "transactionNotificationsEnabled": true,
                // Enabled collection and propagation of data-change-events into Kafka.
                "dataChangeEventsEnabled": true,
                // Enabled collection and propagation of connection notifications into Kafka.
                "connectionNotificationsEnabled": true,
                // Unique identifier of topic that is used for storing netconf notifications.
                "netconfNotificationsTopicName": "netconf-notifications",
                // Unique identifier of topic that is used for storing audit logs.
                "auditLogsTopicName": "audit-logs",
                // Unique identifier of topic that is used for storing transaction notifications.
                "transactionsTopicName": "transactions",
                // Unique identifier of the Kafka topic used for distribution of data-change-events.
                "dataChangeEventsTopicName": "data-change-events",
                // Unique identifier of the Kafka topic used for distribution of connection notifications.
                "connectionNotificationsTopicName": "connection-notifications",
                // If only connection notifications for NETCONF stream are enabled.
                "connectionNotificationsNetconfStreamOnly": true,
                // Configuration of how long the send() method and the creation of connection for
                // reading of metadata methods will block. (in ms)
                "blockingTimeout": 60000,
                // Configuration of how long will the producer wait for the acknowledgement of a request. (in ms)
                // If the acknowledgement is not received before the timeout elapses, the producer will resend the
                // request or fail the request if retries are exhausted
                "requestTimeout": 30000,
                // Configuration of the upper bound on the time to report success or failure after a
                // call to send() returns.(in ms)
                // This limits the total time that a record will be delayed prior to sending, the time to
                // await acknowledgement from the broker (if expected), and the time allowed for retriable send failures.
                "deliveryTimeout": 120000,
                // The maximum thread pool size in the executor
                // A thread pool executor is needed to send messages to Kafka
                "maxThreadPoolSize": 8,
                // The maximum capacity of the work queue in the executor
                "queueCapacity": 2048,
                // Embedded Kafka settings (embedded Kafka is disabled by default, it should not be used in the production).
                // Only PLAINTEXT authentication scheme is supported.
                "embeddedKafka": {
                    // If this flag is set to 'true', then embedded Kafka is started during boot process.
                    // Otherwise, all other settings are effectively ignored.
                    "enabled": false,
                    // Directory to which embedded Kafka is downloaded and extracted.
                    "installDir": "/tmp/embedded-kafka",
                    // URL that is used for download of Kafka, if it hasn't been downloaded yet.
                    "archiveUrl": "https://dlcdn.apache.org/kafka/3.1.0/kafka_2.13-3.1.0.tgz",
                    // Directory containing Kafka data files - persisted topics.
                    "dataDir": "./data/embedded-kafka",
                    // Clean data from previous run before starting of Kafka (= disabled persistence).
                    "cleanDataBeforeStart": true,
                    // Number of partitions used for created topic.
                    "partitions": 1
                }
            },
            // Settings related to audit logs
            "auditLogs": {
                // If response body should be included in notification
                "includeResponseBody": false
            },
            // Config for deletion of old notifications from db
            "notificationDbTreshold": {
                // Maximum count of records, after reaching this count oldest records will be deleted
                "maxCount": 10000,
                // Maximum age of records, all older records will be deleted (in hours)
                "maxAge": 100
            },
            // How often should uniconfig check for unassigned netconf notifications subscriptions (in seconds)
            "netconfSubscriptionsMonitoringInterval": 5,
            // How many unassigned netconf subscriptions can be processed within one subscription monitoring interval
            "maxNetconfSubscriptionsPerInterval": 10
        },
        // Initial logging configuration (afterwards it can be updated using RPCs).
        "loggingController": {
            // Configuration of specific logging brokers for different system components.
            "broker": [
                // Logging all NETCONF messages.
                {
                    // Logging broker identifier.
                    "broker-identifier": "netconf_messages",
                    // Enabled/disabled logging.
                    "is-logging-broker-enabled": false,
                    // Configured default logging behaviour - if it is set to 'true', logging is enabled
                    // for all NETCONF devices. Otherwise, it is enabled only for explicitly defined devices
                    // ('device-list' field).
                    "is-logging-enabled-on-all-devices": false
                    // List of devices for which logging is enabled.
                    //"device-list": ["dev1", "dev2"]
                },
                // Logging all southbound NETCONF events related to creation/closing of NETCONF connections.
                {
                    "broker-identifier": "netconf_events",
                    "is-logging-broker-enabled": false,
                    "is-logging-enabled-on-all-devices": false
                },
                // Logging all NETCONF notification messages.
                {
                    "broker-identifier": "netconf_notifications",
                    "is-logging-broker-enabled": false,
                    "is-logging-enabled-on-all-devices": false
                },
                // Logging all CLI commands and responses.
                {
                    "broker-identifier": "cli_messages",
                    "is-logging-broker-enabled": false,
                    "is-logging-enabled-on-all-devices": false
                },
                // Logging RESTCONF requests and responses.
                {
                    "broker-identifier": "restconf",
                    "is-logging-broker-enabled": false
                    // HTTP headers which content is removed from logs.
                    //"restconf-logging:hidden-http-headers": [
                    //    "Authorization",
                    //    "Cookie"
                    //],
                    // HTTP operations that are not logged.
                    //"restconf-logging:hidden-http-methods": [
                    //    "GET"
                    //]
                }
            ]
        },
        // cryptographic settings
        "crypto": {
            // identifier of YANG extension that is responsible for marking of leaves/leaf-lists that must be encrypted
            // "encryptExtensionId": "frinx-encrypt:encrypt",
            // name of YANG module from which the correct revision of 'netconfEncryptedPathsModuleName' is chosen
            // "netconfReferenceModuleName": "system",
            // name of YANG module which contains deviations to leaves/leaf-lists that must be encrypted
            // "netconfEncryptedPathsModuleName": "encrypted-paths"
        },
        // settings for metrics
        "metrics": {
                // flag that determines if metrics will be reported or not
                "enabled": true,
                // reporter type (log, csv)
                "reporter": "log",
                // reporting rate in seconds
                "rate": 30
            // example csv output for one metric
            //        t,count,mean_rate,m1_rate,m5_rate,m15_rate,rate_unit
            //        1650557436,3,0.182204,0.507889,0.580330,0.593370,events/second
            //        1650557466,3,0.064564,0.308050,0.525104,0.573917,events/second
            //        1650557496,3,0.039233,0.186842,0.475134,0.555102,events/second
            //        1650557526,3,0.028178,0.113325,0.429919,0.536904,events/second
            //        1650557534,3,0.026281,0.104264,0.422813,0.533929,events/second
            //
            // example log output
            // 18:16:20.886 INFO io.frinx.uniconfig.metrics.impl.ReporterImpl - type=GAUGE, name=io.frinx.uniconfig.manager.impl.task.TaskExecutorImpl.queue_size, value=0
            // 18:16:20.887 INFO io.frinx.uniconfig.metrics.impl.ReporterImpl - type=METER, name=org.opendaylight.controller.uniconfig.transaction.manager.impl.UniconfigTransactionManagerImpl.transaction_invoke, count=0, m1_rate=0.0, m5_rate=0.0, m15_rate=0.0, mean_rate=0.0, rate_unit=events/second
            // 18:16:20.887 INFO io.frinx.uniconfig.metrics.impl.ReporterImpl - type=METER, name=org.opendaylight.yangtools.yang.common.RpcResult.rpc_invoke, count=3, m1_rate=0.3080502714195554, m5_rate=0.5251039914257685, m15_rate=0.5739172434618175, mean_rate=0.06565517632771098, rate_unit=events/second
  
        }
    }
---
# Source: frinx-machine/charts/uniconfig/templates/configmap-logback.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uniconfig-controller-configmap-logback
data:
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
  
    <!-- For assistance related to logback-translator or configuration  -->
    <!-- files in general, please contact the logback user mailing list -->
    <!-- at http://www.qos.ch/mailman/listinfo/logback-user             -->
    <!--                                                                -->
    <!-- For professional support please see                            -->
    <!--    http://www.qos.ch/shop/products/professionalSupport         -->
    <!--                                                                -->
    <configuration scan="true" debug="true" scanPeriod="5 seconds">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
            </encoder>
        </appender>
        <appender name="logs" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>log/${SERVICE_NAME}/${CONTAINER_ID}/logs.log</File>
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                <maxIndex>20</maxIndex>
                <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/logs.log.%i</FileNamePattern>
            </rollingPolicy>
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <MaxFileSize>50MB</MaxFileSize>
            </triggeringPolicy>
        </appender>
        <appender name="netconf-notifications" class="ch.qos.logback.classic.sift.SiftingAppender">
            <discriminator class="io.lighty.discriminator.MarkerBasedDiscriminator">
                <key>deviceName</key>
                <defaultValue>unknown</defaultValue>
            </discriminator>
            <sift>
                <appender name="${deviceName}-netconf-notifications" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <file>log/${SERVICE_NAME}/${CONTAINER_ID}/netconf-notifications/${deviceName}.log</file>
                    <encoder>
                        <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
                    </encoder>
                    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                        <maxIndex>20</maxIndex>
                        <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/netconf-notifications/${deviceName}.log.%i</FileNamePattern>
                    </rollingPolicy>
                    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                        <MaxFileSize>16MB</MaxFileSize>
                    </triggeringPolicy>
                </appender>
            </sift>
        </appender>
        <appender name="netconf-messages" class="ch.qos.logback.classic.sift.SiftingAppender">
            <discriminator class="io.lighty.discriminator.MarkerBasedDiscriminator">
                <key>deviceName</key>
                <defaultValue>unknown</defaultValue>
            </discriminator>
            <sift>
                <appender name="${deviceName}-netconf-messages" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <file>log/${SERVICE_NAME}/${CONTAINER_ID}/netconf-messages/${deviceName}.log</file>
                    <encoder>
                        <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
                    </encoder>
                    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                        <maxIndex>20</maxIndex>
                        <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/netconf-messages/${deviceName}.log.%i</FileNamePattern>
                    </rollingPolicy>
                    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                        <MaxFileSize>16MB</MaxFileSize>
                    </triggeringPolicy>
                </appender>
            </sift>
        </appender>
        <appender name="netconf-events" class="ch.qos.logback.classic.sift.SiftingAppender">
            <discriminator class="io.lighty.discriminator.MarkerBasedDiscriminator">
                <key>deviceName</key>
                <defaultValue>unknown</defaultValue>
            </discriminator>
            <sift>
                <appender name="${deviceName}-netconf-events" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <file>log/${SERVICE_NAME}/${CONTAINER_ID}/netconf-events/${deviceName}.log</file>
                    <encoder>
                        <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
                    </encoder>
                    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                        <maxIndex>20</maxIndex>
                        <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/netconf-events/${deviceName}.log.%i</FileNamePattern>
                    </rollingPolicy>
                    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                        <MaxFileSize>16MB</MaxFileSize>
                    </triggeringPolicy>
                </appender>
            </sift>
        </appender>
        <appender name="restconf" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>log/${SERVICE_NAME}/${CONTAINER_ID}/restconf.log</File>
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                <maxIndex>20</maxIndex>
                <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/restconf.%i</FileNamePattern>
            </rollingPolicy>
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <MaxFileSize>50MB</MaxFileSize>
            </triggeringPolicy>
        </appender>
        <appender name="cli-messages" class="ch.qos.logback.classic.sift.SiftingAppender">
            <discriminator class="io.lighty.discriminator.MarkerBasedDiscriminator">
                <key>deviceName</key>
                <defaultValue>unknown</defaultValue>
            </discriminator>
            <sift>
                <appender name="${deviceName}-cli-messages" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <file>log/${SERVICE_NAME}/${CONTAINER_ID}/cli-messages/${deviceName}.log</file>
                    <encoder>
                        <pattern>%d{HH:mm:ss.SSS} %level %logger - %msg%n</pattern>
                    </encoder>
                    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                        <maxIndex>20</maxIndex>
                        <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/cli-messages/${deviceName}.log.%i</FileNamePattern>
                    </rollingPolicy>
                    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                        <MaxFileSize>16MB</MaxFileSize>
                    </triggeringPolicy>
                </appender>
            </sift>
        </appender>
  
        <appender name="gnmi" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>log/${SERVICE_NAME}/${CONTAINER_ID}/gnmi.log</File>
            <encoder>
                <pattern>%d{HH:mm:ss} %level %logger - %msg%n</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                <maxIndex>20</maxIndex>
                <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/gnmi.log.%i</FileNamePattern>
            </rollingPolicy>
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <MaxFileSize>16MB</MaxFileSize>
            </triggeringPolicy>
        </appender>
  
        <appender name="metrics" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>log/${SERVICE_NAME}/${CONTAINER_ID}/metrics.log</File>
            <encoder>
                <pattern> uniconfig,zone=${SERVICE_NAME},instance=${CONTAINER_ID} %replace(%replace(%msg){'=','="'}){', ','",'}"%n </pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                <maxIndex>20</maxIndex>
                <FileNamePattern>log/${SERVICE_NAME}/${CONTAINER_ID}/metrics.log.%i</FileNamePattern>
            </rollingPolicy>
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <MaxFileSize>16MB</MaxFileSize>
            </triggeringPolicy>
        </appender>
  
        <!-- used for automatic propagation of set logger level to JUL logging implementation -->
        <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
            <resetJUL>true</resetJUL>
        </contextListener>
  
        <!-- root logger -->
        <root level="INFO">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="logs"/>
        </root>
  
        <!-- UniConfig layer part -->
        <logger name="io.frinx.uniconfig" level="INFO"/>
  
        <!-- Unified layer part -->
        <logger name="io.frinx.unitopo" level="INFO"/>
  
        <!-- NETCONF part -->
        <logger name="org.opendaylight.netconf" level="INFO"/>
  
        <!-- CLI part -->
        <logger name="io.frinx.cli" level="INFO"/>
  
        <!-- SSH part (used by CLI and NETCONF) -->
        <logger name="org.apache.sshd" level="INFO"/>
  
        <!-- translation unit framework part -->
        <logger name="io.frinx.translate.unit.commons" level="INFO"/>
        <logger name="io.fd.honeycomb" level="INFO"/>
  
        <logger name="io.lighty.gnmi" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="logs"/>
            <appender-ref ref="gnmi"/>
        </logger>
  
        <!-- RESTCONF part -->
        <logger name="org.opendaylight.restconf" level="INFO"/>
        <logger name="org.opendaylight.aaa" level="INFO"/>
  
        <!-- controller part -->
        <logger name="org.opendaylight.daexim" level="INFO"/>
        <logger name="org.opendaylight.controller" level="INFO"/>
        <logger name="org.opendaylight.yangtools" level="INFO"/>
  
        <!-- Kafka -->
        <logger name="org.apache.kafka.clients.NetworkClient" level="INFO"/>
  
        <!-- Metrics -->
        <logger name="io.frinx.uniconfig.metrics" level="INFO" additivity="false">
            <appender-ref ref="metrics"/>
        </logger>
  
        <!-- PostgreSQL driver -->
        <logger name="org.postgresql" level="INFO"/>
  
        <!-- do not modify this part, we should use RESTCONF RPCs for controlling of logging brokers -->
        <logger name="org.opendaylight.restconf.nb.rfc8040.jersey.providers.logging.RestconfLoggingBroker" level="INFO" additivity="false">
            <appender-ref ref="restconf"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.opendaylight.netconf.logging.brokers.NetconfMessagesLoggingBroker" level="INFO" additivity="false">
            <appender-ref ref="netconf-messages"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.opendaylight.netconf.logging.brokers.NotificationsLoggingBroker" level="INFO" additivity="false">
            <appender-ref ref="netconf-notifications"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.opendaylight.netconf.logging.brokers.NetconfEventsLoggingBroker" level="INFO" additivity="false">
            <appender-ref ref="netconf-events"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="io.frinx.cli.io.impl.cli.CliLoggingBroker" level="INFO" additivity="false">
            <appender-ref ref="cli-messages"/>
            <appender-ref ref="STDOUT"/>
        </logger>
    </configuration>
---
# Source: frinx-machine/charts/uniconfig/templates/configmap-uniconfig-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uniconfig-controller-configmap-uniconfig-script
data:
  run_uniconfig.sh: |
    #!/bin/bash
  
    CONFIG="config/lighty-uniconfig-config.json"
    JAR_DIRS="./*:./libs/*:./config"
    MAIN_CLASS="io.frinx.lighty_uniconfig.Main"
    JAVA_MAX_MEM=${JAVA_MAX_MEM:="4G"}
    DEBUG_PARAMETER="--debug"
    UNICONFIG_ID=${CONTAINER_ID:=1}
    PROXY_ENABLED=${PROXY_ENABLED:="false"}
  
    # set sensitive env variables from docker secrets
    if [[ -f "/set_env_secrets.sh" ]]; then
      . /set_env_secrets.sh ''
    fi
  
    display_usage() {
        echo -e "Usage: $(basename "$0") [-f] [-l LICENSE_TOKEN] [--debug]"
        echo -e "where: "
        echo -e "   -l LICENSE_TOKEN : license token for running Frinx Uniconfig"
        echo -e "   -f               : new license token is forced (overwrites old license)"
        echo -e "   --debug          : enabled java debugging on port 5005"
    }
  
    is_system_proxy_enabled() {
        unset PROXY_PORT PROXY_HOST
        local PROXY_URL="$1"
        if [[ "${PROXY_URL}" == "http"* ]] && [[ $(echo "${PROXY_URL}" | tr -d -c ":" | wc -m) -eq 2 ]]; then
            PROXY_PORT="$(echo "${PROXY_URL}"| cut -d ':' -f 3 | sed 's,[^0-9]*,,g')"
            PROXY_HOST="$(echo "${PROXY_URL}"| cut -d ':' -f 2 | sed 's,//,,')"
        elif [[ "${PROXY_URL}" =~ ^[[:digit:]] ]] && [[ $(echo "${PROXY_URL}" | tr -d -c ":" | wc -m) -eq 1 ]]; then
            PROXY_PORT="$(echo "${PROXY_URL}"| cut -d ':' -f 2 | sed 's,[^0-9]*,,g')"
            PROXY_HOST="${PROXY_HOST}$(echo "${PROXY_URL}"| cut -d ':' -f 1)"
        else
            echo -e ${ERROR} "Used bad HTTP Proxy format ${PROXY_URL}"
            exit 1
        fi
        eval "$3=-D${2}.proxyHost=${PROXY_HOST}"
        eval "$4=-D${2}.proxyPort=${PROXY_PORT}"
    }
  
    is_enabled_debugging() {
      for arg in "$@"; do
        if [ "$arg" = $DEBUG_PARAMETER ]; then
          return 1
        fi
      done
      return 0
    }
  
    delete_debug_argument() {
      filtered_args=("$@")
      for i in "${!filtered_args[@]}"; do
        if [ "${filtered_args[i]}" = "$DEBUG_PARAMETER" ]; then
          unset 'filtered_args[i]'
        fi
      done
    }
  
    for i in "$@"
    do
    case $i in
        -h|--help)
        display_usage
        exit 0
        ;;
    esac
    done
  
    if [[ ${PROXY_ENABLED} == "true" ]]; then
      is_system_proxy_enabled $HTTP_PROXY "http" __HTTP_HOST __HTTP_PORT
      is_system_proxy_enabled $HTTPS_PROXY "https" __HTTPS_HOST __HTTPS_PORT
      _JAVA_OPTIONS="$_JAVA_OPTIONS ${__HTTP_HOST} ${__HTTP_PORT} ${__HTTPS_HOST} ${__HTTPS_PORT} -Dhttp.nonProxyHosts=${NO_PROXY}"
    fi
  
    mkdir -p log/${SERVICE_NAME}/${UNICONFIG_ID}
  
    # removing cached data and logs from previous run
    rm -rf snapshots/ journal/
  
    # folder where lighty stores data
    mkdir -m 700 -p data
  
    # wait for postgresql container
    sleep 5
  
    is_enabled_debugging "$@"; enabled_debugging=$?
    if [ $enabled_debugging -eq 1 ]; then
      delete_debug_argument "$@"
      java "-Xmx${JAVA_MAX_MEM}" -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -cp "${JAR_DIRS}" \
        "${MAIN_CLASS}" -c "${CONFIG}" "${filtered_args[@]}"; unset filtered_args
    else
      java "-Xmx${JAVA_MAX_MEM}" -cp "${JAR_DIRS}" "${MAIN_CLASS}" -c "${CONFIG}" "$@"
    fi
    unset enabled_debugging
---
# Source: frinx-machine/charts/workflow-manager/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-proxy-config
data:
  config.properties: |
    # All parameters can be specified as an environment variables in docker compose file by substituting dots for undserscores
    # e.g use workflow_elasticsearch_url=VALUE to specify workflow.elasticsearch.url parameter
    
    # NOTE: Configuration files overwrite the environment variables, to use an environment variable for configuration
    # you must REMOVE the appropriate parameter from the configuration file first!
    
    # Servers
    conductor.grpc-server.enabled=false
    conductor.app.ownerEmailMandatory=false
    
    # Hikari pool sizes are -1 by default and prevent startup
    spring.datasource.hikari.maximum-pool-size=10
    spring.datasource.hikari.minimum-idle=2
    
    # Needed for single node ES cluster
    conductor.elasticsearch.clusterHealthColor=yellow
    
    conductor.indexing.enabled=true
    
    # Set elasticsearch version
    conductor.elasticsearch.version=6
    
    # Transport address to elasticsearch
    # ENV conductor.elasticsearch.url=http://workflows-elasticsearch-master-headless:9200
    
    # Name of the elasticsearch cluster
    conductor.elasticsearch.indexPrefix=conductor
    
    # Additional modules (optional)
    # conductor.additional.modules=class_extending_com.google.inject.AbstractModule
    # Additional modules for metrics collection (optional)
    conductor.additional.modules=com.netflix.conductor.contribs.metrics.MetricsRegistryModule,com.netflix.conductor.contribs.metrics.LoggingMetricsModule
    conductor.metrics-logger.enabled=true
    conductor.metrics-logger.reportPeriodSeconds=15
    
    # Load sample kitchen sink workflow
    loadSample=false
    
    # Increase payload threshold limits for transferring big schemas to PostgreSQL
    conductor.app.workflow-input-payload-size-threshold=85
    conductor.app.workflow-output-payload-size-threshold=85
    conductor.app.max-workflow-input-payload-size-threshold=1024000
    conductor.app.max-workflow-output-payload-size-threshold=1024000
    conductor.app.task-input-payload-size-threshold=85
    conductor.app.task-output-payload-size-threshold=85
    conductor.app.max-task-input-payload-size-threshold=1024000
    conductor.app.max-task-output-payload-size-threshold=1024000
    
    # PostgreSQL External Payload Storage variables
    conductor.external-payload-storage.type=postgres
    conductor.external-payload-storage.postgres.conductor-url=http://workflow-proxy:8088/proxy
    conductor.external-payload-storage.postgres.max-data-rows=1000000
    conductor.external-payload-storage.postgres.max-data-days=0
    conductor.external-payload-storage.postgres.max-data-months=0
    conductor.external-payload-storage.postgres.max-data-years=1
    
    conductor.app.taskExecutionPostponeDuration=0
    
    conductor.db.type=postgres
    
    
  log4j.properties: |
    #
    # Copyright 2017 Netflix, Inc.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
    
    log4j.rootLogger=INFO,console,file
    
    log4j.appender.console=org.apache.log4j.ConsoleAppender
    log4j.appender.console.layout=org.apache.log4j.PatternLayout
    log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %5p [%t] (%C) - %m%n
    
    log4j.appender.file=org.apache.log4j.RollingFileAppender
    log4j.appender.file.File=/app/logs/conductor.log
    log4j.appender.file.MaxFileSize=10MB
    log4j.appender.file.MaxBackupIndex=10
    log4j.appender.file.layout=org.apache.log4j.PatternLayout
    log4j.appender.file.layout.ConversionPattern=%d{ISO8601} %5p [%t] (%C) - %m%n
    
    # Syslog based appender streaming metrics into fluentd
    log4j.appender.server=org.apache.log4j.net.SyslogAppender
    log4j.appender.server.syslogHost=fluentd:5170
    log4j.appender.server.facility=LOCAL1
    log4j.appender.server.layout=org.apache.log4j.PatternLayout
    log4j.appender.server.layout.ConversionPattern=%d{ISO8601} %5p [%t] (%C) - %m%n
    
    log4j.logger.ConductorMetrics=INFO,console,server
    log4j.additivity.ConductorMetrics=false
---
# Source: frinx-machine/charts/influxdb2/templates/persistent-volume-claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "influxdb"
  labels:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: influxdb2-2.1.0
  annotations:
    helm.sh/resource-policy: "keep"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "50Gi"
---
# Source: frinx-machine/charts/grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
  name: grafana-clusterrole
rules: []
---
# Source: frinx-machine/charts/promtail/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: promtail
  labels:
    helm.sh/chart: promtail-6.3.0
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - watch
      - list
---
# Source: frinx-machine/charts/telegraf-ds/templates/role.yaml
# kubernetes_plugin: Give access to stats endpoints
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx-stats-viewer
  labels:
    helm.sh/chart: telegraf-ds-1.1.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: frinx
    rbac.authorization.k8s.io/aggregate-view-telegraf-stats: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy", "nodes/stats"]
    verbs: ["get", "list", "watch"]
---
# Source: frinx-machine/charts/telegraf-ds/templates/role.yaml
# Define global role with the default system:aggregate-to-view cluster role and the two rules we just created
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:telegraf
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-view-telegraf-stats: "true"
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-view: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
# Source: frinx-machine/charts/uniconfig/charts/traefik/templates/rbac/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: uniconfig
  labels:
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-10.19.5
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: frinx
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - middlewaretcps
      - tlsoptions
      - tlsstores
      - traefikservices
      - serverstransports
    verbs:
      - get
      - list
      - watch
---
# Source: frinx-machine/charts/grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: default
roleRef:
  kind: ClusterRole
  name: grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: frinx-machine/charts/promtail/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: promtail
  labels:
    helm.sh/chart: promtail-6.3.0
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: promtail
    namespace: default
roleRef:
  kind: ClusterRole
  name: promtail
  apiGroup: rbac.authorization.k8s.io
---
# Source: frinx-machine/charts/telegraf-ds/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influx-telegraf-viewer
  labels:
    helm.sh/chart: telegraf-ds-1.1.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: frinx
subjects:
  - kind: ServiceAccount
    name: telegraf-ds
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influx:telegraf
---
# Source: frinx-machine/charts/uniconfig/charts/traefik/templates/rbac/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: uniconfig
  labels:
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-10.19.5
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: frinx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: uniconfig
subjects:
  - kind: ServiceAccount
    name: uniconfig
    namespace: default
---
# Source: frinx-machine/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [grafana]
---
# Source: frinx-machine/charts/grafana/templates/tests/test-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-test
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['policy']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [grafana-test]
---
# Source: frinx-machine/charts/loki/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [loki]
---
# Source: frinx-machine/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana
subjects:
- kind: ServiceAccount
  name: grafana
  namespace: default
---
# Source: frinx-machine/charts/grafana/templates/tests/test-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-test
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-test
subjects:
- kind: ServiceAccount
  name: grafana-test
  namespace: default
---
# Source: frinx-machine/charts/loki/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: loki
subjects:
- kind: ServiceAccount
  name: loki
---
# Source: frinx-machine/charts/demo-workflows/charts/sample-topology/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sample-topology
  labels:
    helm.sh/chart: sample-topology-1.0.0
    app.kubernetes.io/name: sample-topology
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.9"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: "17000"
      port: 17000
      targetPort: 17000
    - name: "17001"
      port: 17001
      targetPort: 17001
    - name: "17002"
      port: 17002
      targetPort: 17002
    - name: "17003"
      port: 17003
      targetPort: 17003
    - name: "17004"
      port: 17004
      targetPort: 17004
    - name: "17005"
      port: 17005
      targetPort: 17005
    - name: "17006"
      port: 17006
      targetPort: 17006
    - name: "17007"
      port: 17007
      targetPort: 17007
    - name: "17008"
      port: 17008
      targetPort: 17008
    - name: "17009"
      port: 17009
      targetPort: 17009
    - name: "17010"
      port: 17010
      targetPort: 17010
    - name: "17011"
      port: 17011
      targetPort: 17011
    - name: "17012"
      port: 17012
      targetPort: 17012
    - name: "17013"
      port: 17013
      targetPort: 17013
    - name: "17014"
      port: 17014
      targetPort: 17014
    - name: "17015"
      port: 17015
      targetPort: 17015
    - name: "17016"
      port: 17016
      targetPort: 17016
    - name: "17017"
      port: 17017
      targetPort: 17017
    - name: "17018"
      port: 17018
      targetPort: 17018
    - name: "17019"
      port: 17019
      targetPort: 17019
    - name: "17020"
      port: 17020
      targetPort: 17020
    - name: "17021"
      port: 17021
      targetPort: 17021
    - name: "17022"
      port: 17022
      targetPort: 17022
    - name: "17023"
      port: 17023
      targetPort: 17023
    - name: "17024"
      port: 17024
      targetPort: 17024
    - name: "17025"
      port: 17025
      targetPort: 17025
    - name: "17026"
      port: 17026
      targetPort: 17026
    - name: "17027"
      port: 17027
      targetPort: 17027
    - name: "17028"
      port: 17028
      targetPort: 17028
    - name: "17029"
      port: 17029
      targetPort: 17029
    - name: "17030"
      port: 17030
      targetPort: 17030
    - name: "17031"
      port: 17031
      targetPort: 17031
    - name: "17032"
      port: 17032
      targetPort: 17032
    - name: "17033"
      port: 17033
      targetPort: 17033
    - name: "17034"
      port: 17034
      targetPort: 17034
    - name: "17035"
      port: 17035
      targetPort: 17035
    - name: "17036"
      port: 17036
      targetPort: 17036
    - name: "17037"
      port: 17037
      targetPort: 17037
    - name: "17038"
      port: 17038
      targetPort: 17038
    - name: "17039"
      port: 17039
      targetPort: 17039
    - name: "17040"
      port: 17040
      targetPort: 17040
    - name: "17041"
      port: 17041
      targetPort: 17041
    - name: "17042"
      port: 17042
      targetPort: 17042
    - name: "17043"
      port: 17043
      targetPort: 17043
    - name: "17044"
      port: 17044
      targetPort: 17044
    - name: "17045"
      port: 17045
      targetPort: 17045
    - name: "17046"
      port: 17046
      targetPort: 17046
    - name: "17047"
      port: 17047
      targetPort: 17047
    - name: "17048"
      port: 17048
      targetPort: 17048
    - name: "17049"
      port: 17049
      targetPort: 17049
    - name: "17050"
      port: 17050
      targetPort: 17050
    - name: "17051"
      port: 17051
      targetPort: 17051
    - name: "17052"
      port: 17052
      targetPort: 17052
    - name: "17053"
      port: 17053
      targetPort: 17053
    - name: "17054"
      port: 17054
      targetPort: 17054
    - name: "17055"
      port: 17055
      targetPort: 17055
    - name: "17056"
      port: 17056
      targetPort: 17056
    - name: "17057"
      port: 17057
      targetPort: 17057
    - name: "17058"
      port: 17058
      targetPort: 17058
    - name: "17059"
      port: 17059
      targetPort: 17059
    - name: "17060"
      port: 17060
      targetPort: 17060
    - name: "17061"
      port: 17061
      targetPort: 17061
    - name: "17062"
      port: 17062
      targetPort: 17062
    - name: "17063"
      port: 17063
      targetPort: 17063
    - name: "17064"
      port: 17064
      targetPort: 17064
    - name: "17065"
      port: 17065
      targetPort: 17065
    - name: "17066"
      port: 17066
      targetPort: 17066
    - name: "17067"
      port: 17067
      targetPort: 17067
    - name: "17068"
      port: 17068
      targetPort: 17068
    - name: "17069"
      port: 17069
      targetPort: 17069
    - name: "17070"
      port: 17070
      targetPort: 17070
    - name: "17071"
      port: 17071
      targetPort: 17071
    - name: "17072"
      port: 17072
      targetPort: 17072
    - name: "17073"
      port: 17073
      targetPort: 17073
    - name: "17074"
      port: 17074
      targetPort: 17074
    - name: "17075"
      port: 17075
      targetPort: 17075
    - name: "17076"
      port: 17076
      targetPort: 17076
    - name: "17077"
      port: 17077
      targetPort: 17077
    - name: "17078"
      port: 17078
      targetPort: 17078
    - name: "17079"
      port: 17079
      targetPort: 17079
    - name: "17080"
      port: 17080
      targetPort: 17080
    - name: "17081"
      port: 17081
      targetPort: 17081
    - name: "17082"
      port: 17082
      targetPort: 17082
    - name: "17083"
      port: 17083
      targetPort: 17083
    - name: "17084"
      port: 17084
      targetPort: 17084
    - name: "17085"
      port: 17085
      targetPort: 17085
    - name: "17086"
      port: 17086
      targetPort: 17086
    - name: "17087"
      port: 17087
      targetPort: 17087
    - name: "17088"
      port: 17088
      targetPort: 17088
    - name: "17089"
      port: 17089
      targetPort: 17089
    - name: "17090"
      port: 17090
      targetPort: 17090
    - name: "17091"
      port: 17091
      targetPort: 17091
    - name: "17092"
      port: 17092
      targetPort: 17092
    - name: "17093"
      port: 17093
      targetPort: 17093
    - name: "17094"
      port: 17094
      targetPort: 17094
    - name: "17095"
      port: 17095
      targetPort: 17095
    - name: "17096"
      port: 17096
      targetPort: 17096
    - name: "17097"
      port: 17097
      targetPort: 17097
    - name: "17098"
      port: 17098
      targetPort: 17098
    - name: "17099"
      port: 17099
      targetPort: 17099
    - name: "17100"
      port: 17100
      targetPort: 17100
    - name: "17101"
      port: 17101
      targetPort: 17101
    - name: "17102"
      port: 17102
      targetPort: 17102
    - name: "17103"
      port: 17103
      targetPort: 17103
    - name: "17104"
      port: 17104
      targetPort: 17104
    - name: "17105"
      port: 17105
      targetPort: 17105
    - name: "17106"
      port: 17106
      targetPort: 17106
    - name: "17107"
      port: 17107
      targetPort: 17107
    - name: "17108"
      port: 17108
      targetPort: 17108
    - name: "17109"
      port: 17109
      targetPort: 17109
    - name: "17110"
      port: 17110
      targetPort: 17110
    - name: "17111"
      port: 17111
      targetPort: 17111
    - name: "17112"
      port: 17112
      targetPort: 17112
    - name: "17113"
      port: 17113
      targetPort: 17113
    - name: "17114"
      port: 17114
      targetPort: 17114
    - name: "17115"
      port: 17115
      targetPort: 17115
    - name: "17116"
      port: 17116
      targetPort: 17116
    - name: "17117"
      port: 17117
      targetPort: 17117
    - name: "17118"
      port: 17118
      targetPort: 17118
    - name: "17119"
      port: 17119
      targetPort: 17119
    - name: "17120"
      port: 17120
      targetPort: 17120
    - name: "17121"
      port: 17121
      targetPort: 17121
    - name: "17122"
      port: 17122
      targetPort: 17122
    - name: "17123"
      port: 17123
      targetPort: 17123
    - name: "17124"
      port: 17124
      targetPort: 17124
    - name: "17125"
      port: 17125
      targetPort: 17125
    - name: "17126"
      port: 17126
      targetPort: 17126
    - name: "17127"
      port: 17127
      targetPort: 17127
    - name: "17128"
      port: 17128
      targetPort: 17128
    - name: "17129"
      port: 17129
      targetPort: 17129
    - name: "17130"
      port: 17130
      targetPort: 17130
    - name: "17131"
      port: 17131
      targetPort: 17131
    - name: "17132"
      port: 17132
      targetPort: 17132
    - name: "17133"
      port: 17133
      targetPort: 17133
    - name: "17134"
      port: 17134
      targetPort: 17134
    - name: "17135"
      port: 17135
      targetPort: 17135
    - name: "17136"
      port: 17136
      targetPort: 17136
    - name: "17137"
      port: 17137
      targetPort: 17137
    - name: "17138"
      port: 17138
      targetPort: 17138
    - name: "17139"
      port: 17139
      targetPort: 17139
    - name: "17140"
      port: 17140
      targetPort: 17140
    - name: "17141"
      port: 17141
      targetPort: 17141
    - name: "17142"
      port: 17142
      targetPort: 17142
    - name: "17143"
      port: 17143
      targetPort: 17143
    - name: "17144"
      port: 17144
      targetPort: 17144
    - name: "17145"
      port: 17145
      targetPort: 17145
    - name: "17146"
      port: 17146
      targetPort: 17146
    - name: "17147"
      port: 17147
      targetPort: 17147
    - name: "17148"
      port: 17148
      targetPort: 17148
    - name: "17149"
      port: 17149
      targetPort: 17149
    - name: "17150"
      port: 17150
      targetPort: 17150
    - name: "17151"
      port: 17151
      targetPort: 17151
    - name: "17152"
      port: 17152
      targetPort: 17152
    - name: "17153"
      port: 17153
      targetPort: 17153
    - name: "17154"
      port: 17154
      targetPort: 17154
    - name: "17155"
      port: 17155
      targetPort: 17155
    - name: "17156"
      port: 17156
      targetPort: 17156
    - name: "17157"
      port: 17157
      targetPort: 17157
    - name: "17158"
      port: 17158
      targetPort: 17158
    - name: "17159"
      port: 17159
      targetPort: 17159
    - name: "17160"
      port: 17160
      targetPort: 17160
    - name: "17161"
      port: 17161
      targetPort: 17161
    - name: "17162"
      port: 17162
      targetPort: 17162
    - name: "17163"
      port: 17163
      targetPort: 17163
    - name: "17164"
      port: 17164
      targetPort: 17164
    - name: "17165"
      port: 17165
      targetPort: 17165
    - name: "17166"
      port: 17166
      targetPort: 17166
    - name: "17167"
      port: 17167
      targetPort: 17167
    - name: "17168"
      port: 17168
      targetPort: 17168
    - name: "17169"
      port: 17169
      targetPort: 17169
    - name: "17170"
      port: 17170
      targetPort: 17170
    - name: "17171"
      port: 17171
      targetPort: 17171
    - name: "17172"
      port: 17172
      targetPort: 17172
    - name: "17173"
      port: 17173
      targetPort: 17173
    - name: "17174"
      port: 17174
      targetPort: 17174
    - name: "17175"
      port: 17175
      targetPort: 17175
    - name: "17176"
      port: 17176
      targetPort: 17176
    - name: "17177"
      port: 17177
      targetPort: 17177
    - name: "17178"
      port: 17178
      targetPort: 17178
    - name: "17179"
      port: 17179
      targetPort: 17179
    - name: "17180"
      port: 17180
      targetPort: 17180
    - name: "17181"
      port: 17181
      targetPort: 17181
    - name: "17182"
      port: 17182
      targetPort: 17182
    - name: "17183"
      port: 17183
      targetPort: 17183
    - name: "17184"
      port: 17184
      targetPort: 17184
    - name: "17185"
      port: 17185
      targetPort: 17185
    - name: "17186"
      port: 17186
      targetPort: 17186
    - name: "17187"
      port: 17187
      targetPort: 17187
    - name: "17188"
      port: 17188
      targetPort: 17188
    - name: "17189"
      port: 17189
      targetPort: 17189
    - name: "17190"
      port: 17190
      targetPort: 17190
    - name: "17191"
      port: 17191
      targetPort: 17191
    - name: "17192"
      port: 17192
      targetPort: 17192
    - name: "17193"
      port: 17193
      targetPort: 17193
    - name: "17194"
      port: 17194
      targetPort: 17194
    - name: "17195"
      port: 17195
      targetPort: 17195
    - name: "17196"
      port: 17196
      targetPort: 17196
    - name: "17197"
      port: 17197
      targetPort: 17197
    - name: "17198"
      port: 17198
      targetPort: 17198
    - name: "17199"
      port: 17199
      targetPort: 17199
    - name: "17200"
      port: 17200
      targetPort: 17200
    - name: "17201"
      port: 17201
      targetPort: 17201
    - name: "17202"
      port: 17202
      targetPort: 17202
    - name: "17203"
      port: 17203
      targetPort: 17203
    - name: "17204"
      port: 17204
      targetPort: 17204
    - name: "17205"
      port: 17205
      targetPort: 17205
    - name: "17206"
      port: 17206
      targetPort: 17206
    - name: "17207"
      port: 17207
      targetPort: 17207
    - name: "17208"
      port: 17208
      targetPort: 17208
    - name: "17209"
      port: 17209
      targetPort: 17209
    - name: "17210"
      port: 17210
      targetPort: 17210
    - name: "17211"
      port: 17211
      targetPort: 17211
    - name: "17212"
      port: 17212
      targetPort: 17212
    - name: "17213"
      port: 17213
      targetPort: 17213
    - name: "17214"
      port: 17214
      targetPort: 17214
    - name: "17215"
      port: 17215
      targetPort: 17215
    - name: "17216"
      port: 17216
      targetPort: 17216
    - name: "17217"
      port: 17217
      targetPort: 17217
    - name: "17218"
      port: 17218
      targetPort: 17218
    - name: "17219"
      port: 17219
      targetPort: 17219
    - name: "17220"
      port: 17220
      targetPort: 17220
    - name: "17221"
      port: 17221
      targetPort: 17221
    - name: "17222"
      port: 17222
      targetPort: 17222
    - name: "17223"
      port: 17223
      targetPort: 17223
    - name: "17224"
      port: 17224
      targetPort: 17224
    - name: "17225"
      port: 17225
      targetPort: 17225
    - name: "17226"
      port: 17226
      targetPort: 17226
    - name: "17227"
      port: 17227
      targetPort: 17227
    - name: "17228"
      port: 17228
      targetPort: 17228
    - name: "17229"
      port: 17229
      targetPort: 17229
    - name: "17230"
      port: 17230
      targetPort: 17230
    - name: "17231"
      port: 17231
      targetPort: 17231
    - name: "17232"
      port: 17232
      targetPort: 17232
    - name: "17233"
      port: 17233
      targetPort: 17233
    - name: "17234"
      port: 17234
      targetPort: 17234
    - name: "17235"
      port: 17235
      targetPort: 17235
    - name: "17236"
      port: 17236
      targetPort: 17236
    - name: "17237"
      port: 17237
      targetPort: 17237
    - name: "17238"
      port: 17238
      targetPort: 17238
    - name: "17239"
      port: 17239
      targetPort: 17239
    - name: "17240"
      port: 17240
      targetPort: 17240
    - name: "17241"
      port: 17241
      targetPort: 17241
    - name: "17242"
      port: 17242
      targetPort: 17242
    - name: "17243"
      port: 17243
      targetPort: 17243
    - name: "17244"
      port: 17244
      targetPort: 17244
    - name: "17245"
      port: 17245
      targetPort: 17245
    - name: "17246"
      port: 17246
      targetPort: 17246
    - name: "17247"
      port: 17247
      targetPort: 17247
    - name: "17248"
      port: 17248
      targetPort: 17248
    - name: "17249"
      port: 17249
      targetPort: 17249
    - name: "17250"
      port: 17250
      targetPort: 17250
    - name: "17251"
      port: 17251
      targetPort: 17251
    - name: "17252"
      port: 17252
      targetPort: 17252
    - name: "17253"
      port: 17253
      targetPort: 17253
    - name: "17254"
      port: 17254
      targetPort: 17254
    - name: "17255"
      port: 17255
      targetPort: 17255
    - name: "17256"
      port: 17256
      targetPort: 17256
    - name: "17257"
      port: 17257
      targetPort: 17257
    - name: "17258"
      port: 17258
      targetPort: 17258
    - name: "17259"
      port: 17259
      targetPort: 17259
    - name: "17260"
      port: 17260
      targetPort: 17260
    - name: "17261"
      port: 17261
      targetPort: 17261
    - name: "17262"
      port: 17262
      targetPort: 17262
    - name: "17263"
      port: 17263
      targetPort: 17263
    - name: "17264"
      port: 17264
      targetPort: 17264
    - name: "17265"
      port: 17265
      targetPort: 17265
    - name: "17266"
      port: 17266
      targetPort: 17266
    - name: "17267"
      port: 17267
      targetPort: 17267
    - name: "17268"
      port: 17268
      targetPort: 17268
    - name: "17269"
      port: 17269
      targetPort: 17269
    - name: "17270"
      port: 17270
      targetPort: 17270
    - name: "17271"
      port: 17271
      targetPort: 17271
    - name: "17272"
      port: 17272
      targetPort: 17272
    - name: "17273"
      port: 17273
      targetPort: 17273
    - name: "17274"
      port: 17274
      targetPort: 17274
    - name: "17275"
      port: 17275
      targetPort: 17275
    - name: "17276"
      port: 17276
      targetPort: 17276
    - name: "17277"
      port: 17277
      targetPort: 17277
    - name: "17278"
      port: 17278
      targetPort: 17278
    - name: "17279"
      port: 17279
      targetPort: 17279
    - name: "17280"
      port: 17280
      targetPort: 17280
    - name: "17281"
      port: 17281
      targetPort: 17281
    - name: "17282"
      port: 17282
      targetPort: 17282
    - name: "17283"
      port: 17283
      targetPort: 17283
    - name: "17284"
      port: 17284
      targetPort: 17284
    - name: "17285"
      port: 17285
      targetPort: 17285
    - name: "17286"
      port: 17286
      targetPort: 17286
    - name: "17287"
      port: 17287
      targetPort: 17287
    - name: "17288"
      port: 17288
      targetPort: 17288
    - name: "17289"
      port: 17289
      targetPort: 17289
    - name: "17290"
      port: 17290
      targetPort: 17290
    - name: "17291"
      port: 17291
      targetPort: 17291
    - name: "17292"
      port: 17292
      targetPort: 17292
    - name: "17293"
      port: 17293
      targetPort: 17293
    - name: "17294"
      port: 17294
      targetPort: 17294
    - name: "17295"
      port: 17295
      targetPort: 17295
    - name: "17296"
      port: 17296
      targetPort: 17296
    - name: "17297"
      port: 17297
      targetPort: 17297
    - name: "17298"
      port: 17298
      targetPort: 17298
    - name: "17299"
      port: 17299
      targetPort: 17299
    - name: "10000"
      port: 10000
      targetPort: 10000
    - name: "10001"
      port: 10001
      targetPort: 10001
    - name: "10002"
      port: 10002
      targetPort: 10002
    - name: "10003"
      port: 10003
      targetPort: 10003
    - name: "10004"
      port: 10004
      targetPort: 10004
    - name: "10005"
      port: 10005
      targetPort: 10005
    - name: "10006"
      port: 10006
      targetPort: 10006
    - name: "10007"
      port: 10007
      targetPort: 10007
    - name: "10008"
      port: 10008
      targetPort: 10008
    - name: "10009"
      port: 10009
      targetPort: 10009
    - name: "10010"
      port: 10010
      targetPort: 10010
    - name: "10011"
      port: 10011
      targetPort: 10011
    - name: "10012"
      port: 10012
      targetPort: 10012
    - name: "10013"
      port: 10013
      targetPort: 10013
    - name: "10014"
      port: 10014
      targetPort: 10014
    - name: "10015"
      port: 10015
      targetPort: 10015
  selector:
    app.kubernetes.io/name: sample-topology
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/demo-workflows/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-workflows
  labels:
    helm.sh/chart: demo-workflows-1.1.2
    app.kubernetes.io/name: demo-workflows
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: demo-workflows
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/frinx-frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frinx-frontend
  labels:
    helm.sh/chart: frinx-frontend-1.3.0
    app.kubernetes.io/name: frinx-frontend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.17"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8888
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: frinx-frontend
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/influxdb2/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb
  labels:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: influxdb2-2.1.0
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8086
  selector:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/inventory/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: inventory
  labels:
    helm.sh/chart: inventory-2.3.0
    app.kubernetes.io/name: inventory
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.6.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: inventory
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/krakend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: krakend
  labels:
    helm.sh/chart: krakend-2.5.0
    app.kubernetes.io/name: krakend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: krakend
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/loki/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-headless
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
    variant: headless
spec:
  clusterIP: None
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: frinx
---
# Source: frinx-machine/charts/loki/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-memberlist
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 7946
      targetPort: memberlist-port
      protocol: TCP
  selector:
    app: loki
    release: frinx
---
# Source: frinx-machine/charts/loki/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: frinx
---
# Source: frinx-machine/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: frinx-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/component: primary
---
# Source: frinx-machine/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: frinx-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/component: primary
---
# Source: frinx-machine/charts/resource-manager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: resource-manager
  labels:
    helm.sh/chart: resource-manager-1.1.0
    app.kubernetes.io/name: resource-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8884
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: resource-manager
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/uniconfig-postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: uniconfig-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: uniconfig-postgresql
    helm.sh/chart: uniconfig-postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: uniconfig-postgresql
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/component: primary
---
# Source: frinx-machine/charts/uniconfig-postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: uniconfig-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: uniconfig-postgresql
    helm.sh/chart: uniconfig-postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: uniconfig-postgresql
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/component: primary
---
# Source: frinx-machine/charts/uniconfig/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: uniconfig-controller
  labels:
    helm.sh/chart: uniconfig-2.4.1
    app.kubernetes.io/name: uniconfig
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "5.0.12"
    app.kubernetes.io/managed-by: Helm
  annotations:
    traefik.ingress.kubernetes.io/service.passhostheader: "true"
    traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
    traefik.ingress.kubernetes.io/service.sticky.cookie.name: uniconfig_server_id
spec:
  type: ClusterIP
  ports:
    - port: 8181
      targetPort: http
      protocol: TCP
      name: http
    - port: 22
      targetPort: 22
      protocol: TCP
      name: ssh
  selector:
    app.kubernetes.io/name: uniconfig
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/workflow-manager/charts/elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "frinx"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "frinx"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: frinx-machine/charts/workflow-manager/charts/elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "frinx"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: frinx-machine/charts/workflow-manager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: workflow-proxy
  labels:
    helm.sh/chart: workflow-manager-1.0.1
    app.kubernetes.io/name: workflow-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: http
      protocol: TCP
      name: http
    - port: 8089
      targetPort: http-workers
      protocol: TCP
      name: http-workers
    - port: 8087
      targetPort: http-schellar
      protocol: TCP
      name: http-schellar
    - port: 8080
      targetPort: http-conductor
      protocol: TCP
      name: http-conductor
    - port: 8090
      targetPort: grpc-conductor
      protocol: TCP
      name: grpc-conductor
  selector:
    app.kubernetes.io/name: workflow-manager
    app.kubernetes.io/instance: frinx
---
# Source: frinx-machine/charts/promtail/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: default
  labels:
    helm.sh/chart: promtail-6.3.0
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: promtail
      app.kubernetes.io/instance: frinx
  updateStrategy:
    {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: promtail
        app.kubernetes.io/instance: frinx
      annotations:
        checksum/config: 970f565c42a61f01eda00fbaa87652b0615f9c93d8c1118da78ea1189857f172
    spec:
      serviceAccountName: promtail
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      containers:
        - name: promtail
          image: "docker.io/grafana/promtail:2.6.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/promtail/promtail.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - mountPath: /run/promtail
              name: run
            - mountPath: /var/lib/docker/containers
              name: containers
              readOnly: true
            - mountPath: /var/log/pods
              name: pods
              readOnly: true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: http-metrics
              containerPort: 3101
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      volumes:
        - name: config
          secret:
            secretName: promtail
        - hostPath:
            path: /run/promtail
          name: run
        - hostPath:
            path: /var/lib/docker/containers
          name: containers
        - hostPath:
            path: /var/log/pods
          name: pods
---
# Source: frinx-machine/charts/telegraf-ds/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf-ds
  labels:
    helm.sh/chart: telegraf-ds-1.1.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: frinx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: telegraf-ds
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegraf-ds
        app.kubernetes.io/instance: frinx
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 2c7ad950ab1f119ccf5938351053cd4d09432f9f7bb76e67f157b418884fbede
    spec:
      serviceAccountName: telegraf-ds
      containers:
      - name: telegraf-ds
        image: "telegraf:1.23-alpine"
        imagePullPolicy: "IfNotPresent"
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 0.1
            memory: 256Mi
        env:
        - name: HOSTIP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: varrunutmpro
          mountPath: /var/run/utmp
          readOnly: true
        - name: hostfsro
          mountPath: /hostfs
          readOnly: true
        - name: config
          mountPath: /etc/telegraf
      volumes:
      - name: hostfsro
        hostPath:
          path: /
      - name: varrunutmpro
        hostPath:
          path: /var/run/utmp
      - name: config
        configMap:
          name:  telegraf-ds
      hostNetwork: false
---
# Source: frinx-machine/charts/demo-workflows/charts/sample-topology/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-topology
  labels:
    helm.sh/chart: sample-topology-1.0.0
    app.kubernetes.io/name: sample-topology
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sample-topology
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sample-topology
        app.kubernetes.io/instance: frinx
    spec:
      serviceAccountName: sample-topology
      securityContext:
        {}
      containers:
        - name: sample-topology
          securityContext:
            {}
          image: "frinx/sample-topology:2.0"
          imagePullPolicy: IfNotPresent
          command: [ "/bin/bash", "-c", "./scripts/run_netconf_devices/run_netconf_testtool.sh & ./scripts/run_cli_devices/run_devices_docker.sh"]
          env:
            - name: "INSTANCES_TO_SIMULATE"
              value: ""
            - name: "RUN_TESTTOOLS"
              value: "./scripts/run_netconf_devices/run_netconf_testtool.sh & ./scripts/run_cli_devices/run_devices_docker.sh"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {}
---
# Source: frinx-machine/charts/demo-workflows/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-workflows
  labels:
    helm.sh/chart: demo-workflows-1.1.2
    app.kubernetes.io/name: demo-workflows
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.10"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: demo-workflows
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: demo-workflows
        app.kubernetes.io/instance: frinx
    spec:
      volumes:
        - name: app-volume
          emptyDir: {}
      serviceAccountName: demo-workflows
      securityContext:
        {}
      initContainers:
        - name: check-uniconfig-ready
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl --insecure -o /dev/null --silent --write-out "%{http_code}" -X POST uniconfig:8181/rests/operations/uniconfig-manager:health -H "Content-Type:application/json") -ne 200 ];
            do sleep 5; echo "waiting for uniconfig";
            done;
            echo "connection successful!"']
        - name: check-uniflow-ready
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -o /dev/null --silent --write-out "%{http_code}" workflow-proxy:8080/health) -ne 200 ];
            do sleep 5; echo "waiting for uniflow";
            done;
            echo "connection successful!"']
        - name: check-inventory-ready
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -o /dev/null --silent --write-out "%{http_code}" inventory:8000/.well-known/apollo/server-health) -ne 200 ];
            do sleep 5; echo "waiting for inventory";
            done;
            echo "connection successful!"']        
        - name: copy-worker-files
          image: "frinx/demo-workflows:2.0"
          command:
            - sh
            - '-c'
            - 'cp -r /home/app/* /tmp/app/'
          volumeMounts:
            - name: app-volume
              mountPath: /tmp/app/
      containers:
        - name: demo-workflows
          securityContext:
            {}
          image: "frinx/demo-workflows:2.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: "UNICONFIG_URL_BASE"
              value: "http://uniconfig:8181/rests"
            - name: "CONDUCTOR_URL_BASE"
              value: "http://workflow-proxy:8088/proxy/api"
            - name: "INVENTORY_URL_BASE"
              value: "http://inventory:8000/graphql"
            - name: "INSTANCES_TO_SIMULATE"
              value: ""
            - name: "RUN_TESTTOOLS"
              value: "./scripts/run_netconf_devices/run_netconf_testtool.sh & ./scripts/run_cli_devices/run_devices_docker.sh"
            - name: "X_TENANT_ID"
              value: "frinx"
            - name: "X_AUTH_USER_GROUP"
              value: "network-admin"
          volumeMounts:
          - name: app-volume
            mountPath: /home/app
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {}
---
# Source: frinx-machine/charts/frinx-frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frinx-frontend
  labels:
    helm.sh/chart: frinx-frontend-1.3.0
    app.kubernetes.io/name: frinx-frontend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.17"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: frinx-frontend
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frinx-frontend
        app.kubernetes.io/instance: frinx
    spec:
      serviceAccountName: frinx-frontend
      securityContext:
        {}
      restartPolicy: Always
      containers:
        - name: frinx-frontend
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/frinx-frontend:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          env:
            - name: "AUTH_CLIENT_ID"
              value: "frinx"
            - name: "AUTH_ENABLED"
              value: "false"
            - name: "AUTH_REDIRECT_DOMAIN"
              value: "localhost"
            - name: "AUTH_REDIRECT_SCHEME"
              value: "http"
            - name: "DEVICE_TOPOLOGY_ENABLED"
              value: "true"
            - name: "GAMMA_ENABLED"
              value: "false"
            - name: "INVENTORY_API_URL"
              value: "/api/inventory"
            - name: "INVENTORY_ENABLED"
              value: "true"
            - name: "MSAL_AUTHORITY"
              value: "https://login.microsoftonline.com/common/"
            - name: "RESOURCE_MANAGER_API_URL"
              value: "/api/resource"
            - name: "RESOURCE_MANAGER_ENABLED"
              value: "true"
            - name: "UNICONFIG_API_DOCS_URL"
              value: "/api/workflow/docs-uniconfig"
            - name: "UNICONFIG_ENABLED"
              value: "true"
            - name: "UNISTORE_API_URL"
              value: "/api/unistore"
            - name: "URL_BASENAME"
              value: "/frinxui"
            - name: "WORKFLOW_MANAGER_API_DOCS_URL"
              value: "/api/workflow/docs"
            - name: "WORKFLOW_MANAGER_API_URL"
              value: "/api/workflow"
            - name: "WORKFLOW_MANAGER_ENABLED"
              value: "true"
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: frinx-machine/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.32.14
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "9.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: frinx
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: frinx
      annotations:
        checksum/config: 0b98937608b7fdb38deee0195242ade6874ba445d71d3c1f1053fd9632a6b572
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 69f971f16a82d343ec11f9e4f0fb5c3db17a272e4514a0ebabacad38f10316e2
    spec:
      
      serviceAccountName: grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "grafana/grafana:9.0.5"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: frinx-grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              subPath: 
              readOnly: false
            - name: frinx-grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
              subPath: 
              readOnly: false
            - name: storage
              mountPath: "/var/lib/grafana"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: grafana
        - name: frinx-grafana-datasources
          configMap:
            name: frinx-grafana-datasources
        - name: frinx-grafana-dashboards
          configMap:
            name: frinx-grafana-dashboards
        - name: storage
          emptyDir: {}
---
# Source: frinx-machine/charts/inventory/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory
  labels:
    helm.sh/chart: inventory-2.3.0
    app.kubernetes.io/name: inventory
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.6.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: inventory
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: inventory
        app.kubernetes.io/instance: frinx
    spec:
      serviceAccountName: inventory
      securityContext:
        {}
      restartPolicy: Always
      initContainers:
        - name: check-db-ready
          securityContext:
            capabilities:
              drop:
              - ALL
          image: postgres:alpine
      
          command: ['sh', '-c',
            "until pg_isready -h frinx-postgresql -p 5432 -U postgresU;
            do echo waiting for database; sleep 2; done;"]
      
      
      containers:
        - name: inventory
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/frinx-inventory-server:1.6.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: "UNICONFIG_API_PROTOCOL"
              value: "http"
            - name: "UNICONFIG_API_PORT"
              value: "8181"
            - name: "UNICONFIG_LIST_URL"
              value: "http://krakend:8080/static/list/uniconfig"
            - name: "X_TENANT_ID"
              value: "frinx"
              
            - name: "DATABASE_URL"
              value: "postgres://postgresU:postgresP@frinx-postgresql:5432/inventory?sslmode=disable"
              
            - name: "ARANGO_ENABLED"
              value: "false"
            - name: "ARANGO_URL"
              value: "http://arangodb:8529"
            - name: "ARANGO_USER"
              value: "root"
            - name: "ARANGO_PASSWORD"
              value: " "
            - name: "ARANGO_DB"
              value: "lldp"
            - name: "ARANGO_TOKEN"
              value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmFuZ29kYiIsInNlcnZlcl9pZCI6ImZvbyJ9.OxGlpYQYzOysECGkonaEP8d64UH1wQeo_XxeIqK8Vgg"
          livenessProbe:
            exec:
              command:
              - wget
              - --spider
              - -q
              - 0.0.0.0:8000/.well-known/apollo/server-health
            initialDelaySeconds: 40
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
              - wget
              - --spider
              - -q
              - 0.0.0.0:8000/.well-known/apollo/server-health
            initialDelaySeconds: 40
            timeoutSeconds: 5
            failureThreshold: 5
          command: ['/bin/sh', '-c']
          args:
          - yarn prisma migrate deploy --schema=prisma/schema.prisma && node index.js
          resources:
            {}
---
# Source: frinx-machine/charts/krakend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: krakend
  labels:
    helm.sh/chart: krakend-2.5.0
    app.kubernetes.io/name: krakend
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: krakend
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: krakend
        app.kubernetes.io/instance: frinx
    spec:
      volumes:
        
        - name: config
          configMap:
            name: krakend-krakend
        - name: partials
          configMap:
            name: krakend-partials
        - name: scripts
          configMap:
            name: krakend-scripts
        - name: settings
          configMap:
            name: krakend-settings
        - name: templates
          configMap:
            name: krakend-templates
        
      serviceAccountName: krakend
      securityContext:
        null
      containers:
        - name: krakend
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/krakend:1.0.4"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            
            - name: config
              mountPath: /etc/krakend/
            - name: partials
              mountPath: /etc/krakend/partials/
            - name: scripts
              mountPath: /etc/krakend/scripts/
            - name: settings
              mountPath: /etc/krakend/settings/
            - name: templates
              mountPath: /etc/krakend/templates/
            
          env:
            - name: FC_ENABLE
              value: "1"
            - name: FC_SETTINGS
              value: "/etc/krakend/settings"
            - name: FC_PARTIALS
              value: "/etc/krakend/partials" 
            - name: FC_TEMPLATES
              value: "/etc/krakend/templates"
            - name: KRAKEND_PORT
              value: "8080"
            - name: FC_OUT
              value: "/tmp/output.json"
            - name: TLS_DISABLED
              value: "true"
            - name: KRAKEND_TLS_PROTOCOL
              value: "http"
            - name: AUTH_ENABLED
              value: "false"
            - name: UNICONFIG_ZONES_LIST
              value: "uniconfig"
            # azureAuth
            - name: AZURE_LOGIN_URL
              value: "https://login.microsoftonline.com"
            - name: AZURE_TENANT_NAME
              value: "frinx"
            - name: AZURE_TENANT_ID
              value: "frinx"
            - name: AZURE_KRAKEND_PLUGIN_JWT_VALUE_PREFIX
              value: "Bearer"
            - name: AZURE_KRAKEND_PLUGIN_GROUP_DISABLE
              value: "true"
            # RBAC - UNICONFIG
            - name: UNICONFIG_CONTROLLER_ADMIN_GROUP
              value: "network-admin"
            # RBAC - UNISTORE
            - name: UNISTORE_CONTROLLER_ADMIN_GROUP
              value: "network-admin"
            - name: UNISTORE_BEARER_ROLE
              value: ""
            - name: UNISTORE_SERVICE_ROLE
              value: ""
            - name: UNISTORE_NETWORK_ROLE
              value: ""
            - name: UNISTORE_OTHER_PERMITTED_ROLES
              value: ""
            - name: UNISTORE_BEARER_NODE
              value: "bearer"
            - name: UNISTORE_SERVICE_NODE
              value: "service"
            - name: UNISTORE_NETWORK_NODE
              value: "network"
            # RBAC - RESOURCE-MANAGER
            - name: RM_ADMIN_GROUPS
              value: "network-admin"
            - name: RM_ADMIN_ROLES
              value: ""
            # RBAC - INVENTORY
            - name: INVENTORY_ADMIN_GROUP
              value: "network-admin"
            # RBAC - WORKFLOW_PROXY
            - name: ADMIN_ACCESS_ROLE
              value: "network-admin"
            # RBAC - WORKERS
            - name: X_AUTH_USER_GROUP
              value: "network-admin"
            # PROXY
            - name: PROXY_ENABLED
              value: "false"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /__health
              port: http
          readinessProbe:
            httpGet:
              path: /__health
              port: http
          resources:
            {}
---
# Source: frinx-machine/charts/resource-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-manager
  labels:
    helm.sh/chart: resource-manager-1.1.0
    app.kubernetes.io/name: resource-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: resource-manager
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: resource-manager
        app.kubernetes.io/instance: frinx
    spec:
      serviceAccountName: resource-manager
      securityContext:
        {}
      restartPolicy: Always
      initContainers:
      - name: check-db-ready
        image: postgres:alpine
        
        command: ['sh', '-c',
          "until pg_isready -h frinx-postgresql -p 5432 -U postgresU;
          do echo waiting for database; sleep 2; done;"]
        
      containers:
        - name: resource-manager
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/resource-manager:1.0.6"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8884
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - bash
                - -c
                - curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://0.0.0.0:8884/healthz/liveness'
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://0.0.0.0:8884/healthz/readiness'
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          resources:
            {}
          env:
            - name: "PSQL_USERNAME"
              
              value: "postgresU"
              
            - name: "PSQL_PASSWORD"
              
              value: "postgresP"
              
              
            - name: "PSQL_HOSTNAME"  
              value: "frinx-postgresql"
            - name: "RM_DB_CONNECTION_STRING"
              value: "postgres://postgresU:postgresP@frinx-postgresql:5432/postgres?sslmode=disable"
              
            - name: "PSQL_PORT"
              value: "5432"
            - name: "RM_API_PORT"
              value: "8884"
            - name: "RM_ADMIN_ROLES"
              value: OWNER
            - name: "RM_ADMIN_GROUPS"
              value: NETWORK-ADMIN
            - name: "RM_LOG_PATH"
              value: /var/log/rm.log
            - name: "RM_LOG_LEVEL"
              value: warn
            - name: "WASMER_MAX_TIMEOUT_MILLIS"
              value: "10000"
          volumeMounts:
          - mountPath: /var/log
            name: log-volume
      volumes:
      - name: log-volume
        emptyDir: {}
---
# Source: frinx-machine/charts/uniconfig/charts/traefik/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: uniconfig
  labels:
    app.kubernetes.io/name: traefik
    helm.sh/chart: traefik-10.19.5
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: frinx
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: traefik
      app.kubernetes.io/instance: frinx
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 0
  template: 
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9100"
      labels:
        app.kubernetes.io/name: traefik
        helm.sh/chart: traefik-10.19.5
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: frinx
    spec:
      serviceAccountName: uniconfig
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      containers:
      - image: "traefik:2.6.6"
        imagePullPolicy: IfNotPresent
        name: uniconfig
        resources:
        readinessProbe:
          httpGet:
            path: /ping
            port: 9000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: 9000
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        ports:
        - name: "metrics"
          containerPort: 9100
          protocol: "TCP"
        - name: "traefik"
          containerPort: 9000
          protocol: "TCP"
        - name: "uniconfig"
          containerPort: 8181
          protocol: "TCP"
        - name: "web"
          containerPort: 8000
          protocol: "TCP"
        - name: "websecure"
          containerPort: 8443
          protocol: "TCP"
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        volumeMounts:
          - name: data
            mountPath: /data
          - name: tmp
            mountPath: /tmp
        args:
          - "--global.checknewversion"
          - "--global.sendanonymoususage"
          - "--entrypoints.metrics.address=:9100/tcp"
          - "--entrypoints.traefik.address=:9000/tcp"
          - "--entrypoints.uniconfig.address=:8181/tcp"
          - "--entrypoints.web.address=:8000/tcp"
          - "--entrypoints.websecure.address=:8443/tcp"
          - "--api.dashboard=true"
          - "--ping=true"
          - "--metrics.prometheus=true"
          - "--metrics.prometheus.entrypoint=metrics"
          - "--providers.kubernetescrd"
          - "--providers.kubernetesingress"
      volumes:
        - name: data
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      securityContext:
        fsGroup: 65532
---
# Source: frinx-machine/charts/uniconfig/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: uniconfig-controller
  labels:
    helm.sh/chart: uniconfig-2.4.1
    app.kubernetes.io/name: uniconfig
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "5.0.12"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: uniconfig
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: uniconfig
        app.kubernetes.io/instance: frinx
    spec:
      volumes:
        - name: uniconfig-frinx-volume
          emptyDir: {}
        - name: frinx-uniconfig-controller-logs
          emptyDir: {}
        - name: uniconfig-script
          configMap:
            name: uniconfig-controller-configmap-uniconfig-script
            defaultMode: 0777
            items:
            - key: run_uniconfig.sh
              path: run_uniconfig.sh
        - name: logback
          configMap:
            name: uniconfig-controller-configmap-logback
            defaultMode: 0777
            items:
            - key: logback.xml
              path: logback.xml
        - name: lighty-uniconfig-config
          configMap:
            name: uniconfig-controller-configmap-lighty-uniconfig-config
            defaultMode: 0777
            items:
            - key: lighty-uniconfig-config.json
              path: lighty-uniconfig-config.json
      serviceAccountName: uniconfig-controller
      securityContext:
        {}
      initContainers:
      
        - name: check-db-ready
          image: postgres:alpine
          command: ['sh', '-c',
            "until pg_isready -h uniconfig-postgresql -p 5432 -U postgresU;
            do echo waiting for database; sleep 2; done;"]
      
        - name: copy-config-files
          image: "frinx/uniconfig:5.0.16"
          command:
            - sh
            - '-c'
            - 'cp -r /opt/uniconfig-frinx/* /tmp/uniconfig-frinx/'
          volumeMounts:
            - name: uniconfig-frinx-volume
              mountPath: /tmp/uniconfig-frinx/
      containers:
        - name: uniconfig
          securityContext:
            capabilities:
              add:
              - CAP_NET_BIND_SERVICE
              - NET_ADMIN
              drop:
              - ALL
          image: "frinx/uniconfig:5.0.16"
          imagePullPolicy: IfNotPresent
          args: ["-f", "-l", "e326aaa7b1741bb530d201c49f4311d3d0f391893e15393894a77180e6478289cd1709e4afe3a643100ccd31052430de1955540cf5ae1e510d657bd2af8ef2fc"]
          env:
            - name: CONTAINER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_NAME
              value: "uniconfig"
            - name: PROXY_ENABLED
              value: "false"
            - name: HTTP_PROXY
              value: 
            - name: HTTPS_PROXY
              value: 
            - name: NO_PROXY
              value: 
            - name: JAVA_MAX_MEM
              value: "10G"
            - name: _JAVA_OPTIONS
              value: "-Xmx$(JAVA_MAX_MEM) -XX:+AlwaysPreTouch -Djna.nosys=true -XX:+AlwaysPreTouch -Djna.nosys=true -XX:+CrashOnOutOfMemoryError -XX:MaxGCPauseMillis=200 -Xlog:gc:/opt/uniconfig-frinx/log/$(SERVICE_NAME)/$(CONTAINER_ID)/gc.log:tags,time,uptime,level:filecount=10,filesize=5M -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1"
            - name: tls_keystorePassword 
              value: "password"
            - name: dbPersistence_enabled
              value: "true"
            - name: dbPersistence_connection_dbName
              value: uniconfig
            - name: dbPersistence_connection_username
              valueFrom:
                secretKeyRef:
                  name: uniconfig-controller
                  key: dbPersistence_connection_username
            - name: dbPersistence_connection_password
              valueFrom:
                secretKeyRef:
                  name: uniconfig-controller
                  key: dbPersistence_connection_password
            - name: dbPersistence_connection_databaseLocations_host
              value: uniconfig-postgresql
              
            - name: dbPersistence_connection_databaseLocations_port
              value: "5432"
          volumeMounts:
          - name: frinx-uniconfig-controller-logs
            mountPath: /opt/uniconfig-frinx/log
          - name: uniconfig-frinx-volume
            mountPath: /opt/uniconfig-frinx
          - name: uniconfig-script
            mountPath: /opt/uniconfig-frinx/run_uniconfig.sh
            subPath: run_uniconfig.sh
          - name: logback
            mountPath: /opt/uniconfig-frinx/config/logback.xml
            subPath: logback.xml
          - name: lighty-uniconfig-config
            mountPath: /opt/uniconfig-frinx/config/lighty-uniconfig-config.json
            subPath: lighty-uniconfig-config.json
          ports:
            - name: http
              containerPort: 8181
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'curl --insecure -o /dev/null --silent --write-out "%{http_code}" -X POST localhost:8181/rests/operations/uniconfig-manager:health -H "Content-Type:application/json"'
            initialDelaySeconds: 60
            timeoutSeconds: 35
            failureThreshold: 20
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'curl --insecure -o /dev/null --silent --write-out "%{http_code}" -X POST localhost:8181/rests/operations/uniconfig-manager:health -H "Content-Type:application/json"'
            initialDelaySeconds: 60
            timeoutSeconds: 35
            failureThreshold: 20
          resources:
            {}
---
# Source: frinx-machine/charts/workflow-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-proxy
  labels:
    helm.sh/chart: workflow-manager-1.0.1
    app.kubernetes.io/name: workflow-manager
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "1.0.10"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: workflow-manager
      app.kubernetes.io/instance: frinx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: workflow-manager
        app.kubernetes.io/instance: frinx
    spec:
      serviceAccountName: workflow-proxy
      securityContext:
        {}
      restartPolicy: Always
      initContainers:
      - name: check-db-ready
        image: postgres:alpine
        
        command: ['sh', '-c',
          "until pg_isready -h frinx-postgresql -p 5432 -U postgresU;
          do echo waiting for database; sleep 2; done;"]
        
      - name: check-elk-ready
        image: curlimages/curl
        command: ["/bin/sh","-c"]
        args: ['while [ $(curl -ksw "%{http_code}" "elasticsearch-master:9200/_cluster/health?wait_for_status=yellow" -o /dev/null) -ne 200 ];
          do sleep 5; echo "waiting for elasticsearch";
          done;
          echo "connection successful!"']
      containers:
        # conductor-proxy
        - name: workflow-manager-proxy
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/workflow-proxy:1.0.11"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8088
              protocol: TCP
            - name: http-schellar
              containerPort: 8087
              protocol: TCP
            - name: http-workers
              containerPort: 8089
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /probe/liveness
              port: http
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /probe/readiness
              port: http
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          resources:
            {}
          env:
            - name: "PROXY_TARGET"
              value: http://localhost:8080
            - name: "SCHELLAR_TARGET"
              value: http://localhost:3000
            - name: OAUTH2
              value: "false"
            - name: OAUTH2_AUTH_URL
              value: "https://login.microsoftonline.com/common/oauth2/v2.0/authorize"
            - name: OAUTH2_TOKEN_URL
              value: "/api/workflow-manager/docs/token"
            - name: ADMIN_ACCESS_ROLE
              value: "network-admin"
            - name: UNICONFIG_ZONES_LIST
              value: "uniconfig"
        # conductor
        - name: workflow-manager
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/conductor-server:1.0.10"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-conductor
              containerPort: 8080
              protocol: TCP
            - name: grpc-conductor
              containerPort: 8090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http-conductor
            initialDelaySeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: http-conductor
            initialDelaySeconds: 60
            timeoutSeconds: 5
          resources:
            {}
          env:
            - name: "CONFIG_PROP"
              value: config.properties
            - name: "LOG4J_PROP"
              value: log4j.properties
            - name: "_JAVA_OPTIONS"
              value: -Xmx2g
              
            - name: "spring_datasource_url"
              value: jdbc:postgresql://frinx-postgresql:5432/conductor?charset=utf8&parseTime=true&interpolateParams=true
            - name: "conductor_externalPayloadStorage_postgres_url"
              value: jdbc:postgresql://frinx-postgresql:5432/conductor?charset=utf8&parseTime=true&interpolateParams=true
              
            - name: "spring_datasource_username"
              value: postgresU
            - name: "spring_datasource_password"
              value: postgresP
            - name: "conductor_externalPayloadStorage_postgres_username"
              value: postgresU
            - name: "conductor_externalPayloadStorage_postgres_password"
              value: postgresP
            - name: "conductor_elasticsearch_url"
              value: http://elasticsearch-master-headless:9200
          volumeMounts:
            - name: workflow-proxy-config
              mountPath: /app/config/
        # schellar
        - name: workflow-manager-schellar
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "frinx/schellar:2.0.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: "LOG_LEVEL"
              value: "debug"
            - name: "CHECK_INTERVAL_SECONDS"
              value: "10"
            - name: "CONDUCTOR_API_URL"
              value: "http://localhost:8080/api"
            - name: "BACKEND"
              value: "postgres"
            - name: "POSTGRES_MIGRATIONS_DIR"
              value: "migrations"
            - name: "POSTGRES_PORT"
              value: "5432"
              
            - name: "POSTGRES_DATABASE_URL"
              value: "host=frinx-postgresql port=5432 user=postgresU password=postgresP database=schellar"
              
          livenessProbe:
            exec:
              command:
              - wget
              - --spider
              - -q
              - 127.0.0.1:3000/liveness
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
              - wget
              - --spider
              - -q
              - 127.0.0.1:3000/liveness
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
      volumes:
      - name: workflow-proxy-config
        configMap:
          name: workflow-proxy-config
---
# Source: frinx-machine/charts/influxdb2/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: influxdb
  labels:
    app.kubernetes.io/name: influxdb2
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: influxdb2-2.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb2
      app.kubernetes.io/instance: frinx
  serviceName: "influxdb"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: influxdb2
        app.kubernetes.io/instance: frinx
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: influxdb
      serviceAccountName: influxdb
      containers:
        - name: influxdb2
          image: "influxdb:2.2.0-alpine"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8086
              protocol: TCP
          env:
            # Automated setup will not run if an existing boltdb file is found at the configured path.
            # This behavior allows for the InfluxDB container to reboot post-setup without encountering "DB is already set up" errors.
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: setup
            # The username to set for the system's initial super-user (Required).
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              value: frinx
            # The password to set for the system's inital super-user (Required).
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: influxdb-auth
                  key: admin-password
            # The name to set for the system's initial organization (Required).
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: frinx-machine
            # The name to set for the system's initial bucket (Required).
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: frinx
            # The duration the system's initial bucket should retain data. If not set, the initial bucket will retain data forever.
            - name: DOCKER_INFLUXDB_INIT_RETENTION
              value: 2d
            # The authentication token to associate with the system's initial super-user. If not set, a token will be auto-generated by the system.
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: influxdb-auth
                  key: admin-token
            # Path to the BoltDB database.
            - name: INFLUXD_BOLT_PATH
              value: /var/lib/influxdb2/influxd.bolt
            # Path to persistent storage engine files where InfluxDB stores all Time-Structure Merge Tree (TSM) data on disk.
            - name: INFLUXD_ENGINE_PATH
              value: /var/lib/influxdb2
            # Extra environment variables from .Values.env
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: setup
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
          - name: data
            mountPath: /var/lib/influxdb2
            subPath: 
          resources:
            {}
---
# Source: frinx-machine/charts/loki/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.14.1
    release: frinx
    heritage: Helm
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: loki
      release: frinx
  serviceName: loki-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: loki
        name: loki
        release: frinx
      annotations:
        checksum/config: 38c95afd98ced996a58aa6c08538a5ab08022628cb131836481107765578d43d
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: loki
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        []
      containers:
        - name: loki
          image: "grafana/loki:2.6.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist-port
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          secret:
            secretName: loki
        - name: storage
          emptyDir: {}
---
# Source: frinx-machine/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: frinx-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: frinx-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: frinx
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: frinx-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.2.3
        app.kubernetes.io/instance: frinx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: frinx
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.3.0-debian-10-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "postgresU"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: frinx-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: frinx-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "postgres"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgresU" -d "dbname=postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgresU" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: frinx-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: frinx-machine/charts/uniconfig-postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: uniconfig-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: uniconfig-postgresql
    helm.sh/chart: uniconfig-postgresql-11.2.3
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: uniconfig-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: uniconfig-postgresql
      app.kubernetes.io/instance: frinx
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: uniconfig-postgresql
      labels:
        app.kubernetes.io/name: uniconfig-postgresql
        helm.sh/chart: uniconfig-postgresql-11.2.3
        app.kubernetes.io/instance: frinx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: uniconfig-postgresql
                    app.kubernetes.io/instance: frinx
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.3.0-debian-10-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "postgresU"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: uniconfig-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: uniconfig-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "uniconfig"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgresU" -d "dbname=uniconfig" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgresU" -d "dbname=uniconfig" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: frinx-machine/charts/workflow-manager/charts/elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "frinx"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "6"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "frinx"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
      enableServiceLinks: true
      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:6.7.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=yellow&timeout=5s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "6" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=yellow&timeout=5s" )'
                  if http "/_cluster/health?wait_for_status=yellow&timeout=5s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=yellow&timeout=5s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 774m
            memory: 2Gi
          requests:
            cpu: 774m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: discovery.zen.minimum_master_nodes
            value: "1"
          - name: discovery.zen.ping.unicast.hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: node.data
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.master
            value: "true"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
---
# Source: frinx-machine/charts/uniconfig/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: uniconfig-controller
  labels:
    helm.sh/chart: uniconfig-2.4.1
    app.kubernetes.io/name: uniconfig
    app.kubernetes.io/instance: frinx
    app.kubernetes.io/version: "5.0.12"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  defaultBackend:
    service:
      name: uniconfig-controller
      port:
        number: 8181
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: uniconfig-controller
                port:
                  number: 8181
---
# Source: frinx-machine/charts/uniconfig/charts/traefik/templates/service.yaml
apiVersion: v1
kind: List
metadata:
  name: uniconfig
items:
  - apiVersion: v1
    kind: Service
    metadata:
      name: uniconfig
      labels:
        app.kubernetes.io/name: traefik
        helm.sh/chart: traefik-10.19.5
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: frinx
      annotations:
    spec:
      type: ClusterIP
      selector:
        app.kubernetes.io/name: traefik
        app.kubernetes.io/instance: frinx
      ports:
      - port: 8181
        name: uniconfig
        targetPort: "uniconfig"
        protocol: TCP
      - port: 80
        name: web
        targetPort: "web"
        protocol: TCP
      - port: 443
        name: websecure
        targetPort: "websecure"
        protocol: TCP

