apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "workflow-manager.fullname" . }}
  labels:
    {{- include "workflow-manager.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "workflow-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "workflow-manager.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "workflow-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      restartPolicy: Always
      initContainers:
      - name: check-db-ready
        image: postgres:alpine
        command: ['sh', '-c',
          "until pg_isready -h ${POSTGRES_HOST} -p 5432 -U ${SPRING_DATASOURCE_USERNAME};
          do echo waiting for database; sleep 2; done;"]
        env:
          - name: "POSTGRES_HOST"
            {{ if .Values.postgresql.enabled }}            
            value: "{{ .Release.Name }}-postgresql"
            {{ else }}
            value: {{ .Values.dbPersistence.SPRING_SEARCHDATASOURCE_HOST | quote }}
            {{ end }}
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "workflow-manager.secretName" . }}
                {{- if (include "workflow-manager.createSecret" .) }}
                key: SPRING_DATASOURCE_USERNAME
                {{- else }}
                key: {{ .Values.dbPersistence.existingSecret.springDatasourceUsernameKey }}
                {{- end}}
      containers:
        # conductor
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http-conductor
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http-conductor
            timeoutSeconds: 5
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /health
              port: http-conductor
            timeoutSeconds: 5
            initialDelaySeconds: 60
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: "CONFIG_PROP"
              value: {{ .Values.conductorEnv.CONFIG_PROP }}
            - name: "LOG4J_PROP"
              value: {{ .Values.conductorEnv.LOG4J_PROP }}
            - name: "_JAVA_OPTIONS"
              value: {{ .Values.conductorEnv._JAVA_OPTIONS}}
            - name: CONDUCTOR_RBAC_ADMIN_ADMINROLES_0_
              value: {{ .Values.rbac.WM_ADMIN_ROLES | quote }}
            - name: CONDUCTOR_RBAC_ADMIN_ADMINGROUPS_0_
              value: {{ .Values.rbac.WM_ADMIN_GROUPS | quote }}
            - name: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.secretName" . }}
                  {{- if (include "workflow-manager.createSecret" .) }}
                  key: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.conductorExternalpayloadstoragePostgresUsernameKey }}
                  {{- end}}
            - name: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.secretName" . }}
                  {{- if (include "workflow-manager.createSecret" .) }}
                  key: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.conductorExternalpayloadstoragePostgresPasswordKey }}
                  {{- end}}
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.secretName" . }}
                  {{- if (include "workflow-manager.createSecret" .) }}
                  key: SPRING_DATASOURCE_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.springDatasourceUsernameKey }}
                  {{- end}}
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.secretName" . }}
                  {{- if (include "workflow-manager.createSecret" .) }}
                  key: SPRING_DATASOURCE_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.springDatasourcePasswordKey }}
                  {{- end}}
            - name: SPRING_SEARCHDATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.secretName" . }}
                  {{- if (include "workflow-manager.createSecret" .) }}
                  key: SPRING_SEARCHDATASOURCE_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.springSearchdatasourceUsernameKey }}
                  {{- end}}
            - name: SPRING_SEARCHDATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.secretName" . }}
                  {{- if (include "workflow-manager.createSecret" .) }}
                  key: SPRING_SEARCHDATASOURCE_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.springSearchdatasourcePasswordKey }}
                  {{- end}}
              {{ if .Values.postgresql.enabled }}            
            - name: "SPRING_SEARCHDATASOURCE_HOST"
              value: "{{ .Release.Name }}-postgresql"
            - name: "SPRING_DATASOURCE_HOST"
              value: "{{ .Release.Name }}-postgresql"
            - name: "CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_HOST"
              value: "{{ .Release.Name }}-postgresql"
              {{ else }}
            - name: "SPRING_SEARCHDATASOURCE_HOST"
              value: {{ .Values.dbPersistence.SPRING_SEARCHDATASOURCE_HOST | quote }}
            - name: "SPRING_DATASOURCE_HOST"
              value: {{ .Values.dbPersistence.SPRING_DATASOURCE_HOST | quote }}
            - name: "CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_HOST"
              value: {{ .Values.dbPersistence.CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_HOST | quote }}
              {{ end }}
            - name: "POSTGRES_DATABASE"
              value: {{ .Values.dbPersistence.POSTGRES_DATABASE }}
            - name: "CONDUCTOR_DATASOURCE_SCHEMA"
              value: {{ .Values.dbPersistence.CONDUCTOR_DATASOURCE_SCHEMA }}
            - name: "SPRING_DATASOURCE_URL"
              value: "jdbc:postgresql://$(SPRING_DATASOURCE_HOST):5432/$(POSTGRES_DATABASE)?charset=utf8&parseTime=true&interpolateParams=true"
            - name: "CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_URL"
              value: "jdbc:postgresql://$(CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_HOST):5432/$(POSTGRES_DATABASE)?charset=utf8&parseTime=true&interpolateParams=true"
            - name: "SPRING_SEARCHDATASOURCE_URL"
              value: "jdbc:postgresql://$(SPRING_SEARCHDATASOURCE_HOST):5432/$(POSTGRES_DATABASE)?charset=utf8&parseTime=true&interpolateParams=true"
          {{- range $key, $val := .Values.conductorExtraEnv }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
        # schellar
        - name: {{ .Chart.Name }}-schellar
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.schellarImage.repository }}:{{ .Values.schellarImage.tag }}"
          imagePullPolicy: {{ .Values.schellarImage.pullPolicy }}
          ports:
            - name: http-schellar
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /liveness
              port: 3000
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /liveness
              port: 3000
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
          resources:
            {{- toYaml .Values.schellarResources | nindent 12 }}
          env:
            - name: "LOG_LEVEL"
              value: {{ .Values.schellarEnv.LOG_LEVEL | quote }}
            - name: "CHECK_INTERVAL_SECONDS"
              value: {{ .Values.schellarEnv.CHECK_INTERVAL_SECONDS | quote }}
            - name: "CONDUCTOR_API_URL"
              value: {{ .Values.schellarEnv.CONDUCTOR_API_URL | quote }}
            - name: "BACKEND"
              value: {{ .Values.schellarEnv.BACKEND | quote }}
            - name: "ADMIN_ROLES"
              value: {{ .Values.rbac.WM_ADMIN_ROLES | quote }}
            - name: "ADMIN_GROUPS"
              value: {{ .Values.rbac.WM_ADMIN_GROUPS | quote }}  
            - name: "POSTGRES_MIGRATIONS_DIR"
              value: {{ .Values.schellarEnv.POSTGRES_MIGRATIONS_DIR | quote }}
            - name: "PLAYGROUND_QUERY_ENDPOINT"
              value: {{ .Values.schellarEnv.PLAYGROUND_QUERY_ENDPOINT }}
            - name: "POSTGRES_HOST"
              {{- if .Values.postgresql.enabled }}            
              value: "{{ .Release.Name }}-postgresql"
              {{- else }}
              value: {{ .Values.schellarDbPersistence.POSTGRES_HOST | quote }}
              {{- end }}
            - name: "POSTGRES_PORT"
              value: {{ .Values.schellarDbPersistence.POSTGRES_PORT | quote }}
            - name: "POSTGRES_DATABASE"
              value: {{ .Values.schellarDbPersistence.POSTGRES_DATABASE | quote }}
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.schellarSecretName" . }}
                  {{- if (include "workflow-manager.createSchellarSecret" .) }}
                  key: POSTGRES_USERNAME
                  {{- else }}
                  key: {{ .Values.schellarDbPersistence.existingSecret.postgresUsernameKey }}
                  {{- end}}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "workflow-manager.schellarSecretName" . }}
                  {{- if (include "workflow-manager.createSchellarSecret" .) }}
                  key: POSTGRES_PASSWORD
                  {{- else }}
                  key: {{ .Values.schellarDbPersistence.existingSecret.postgresPasswordKey }}
                  {{- end}}
            - name: "POSTGRES_DATABASE_URL"
              value: "host=$(POSTGRES_HOST) port=$(POSTGRES_PORT) user=$(POSTGRES_USERNAME) password=$(POSTGRES_PASSWORD) database=$(POSTGRES_DATABASE)"
          {{- range $key, $val := .Values.schellarExtraEnv }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
