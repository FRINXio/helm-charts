{{ if eq ( toString .Values.env.DEVICE_DISCOVERY_SEED ) "true" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "inventory.fullname" . }}-seed-{{ .Values.image.tag | default .Chart.AppVersion }}
  labels:
    {{- include "inventory.labels" . | nindent 4 }}
  {{- with .Values.job.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  template:
    spec:
      initContainers:
        - name: check-db-ready
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: postgres:alpine
      {{ if .Values.env.POSTGRES_HOSTNAME }}
          command: ['sh', '-c',
            "until pg_isready -h {{ .Values.env.POSTGRES_HOSTNAME }} -p {{ .Values.env.POSTGRES_PORT }} -U {{ .Values.env.POSTGRES_USER }};
            do echo waiting for database; sleep 2; done;"]
      {{ else }}
          command: ['sh', '-c',
            "until pg_isready -h {{ .Release.Name }}-postgresql -p 5432 -U {{ .Values.env.POSTGRES_USER }};
            do echo waiting for database; sleep 2; done;"]
      {{ end }}
      {{ if eq ( toString .Values.env.ARANGO_ENABLED ) "true"}}
        - name: check-arangodb-ready
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          {{ if .Values.env.ARANGO_TOKEN }}
          args: ['while [ $(curl -ksw "%{http_code}" --header "Authorization: Bearer {{ .Values.env.ARANGO_TOKEN }}" "{{ .Values.env.ARANGO_URL }}/_api/version" -o /dev/null) -ne 200 ];
            do sleep 5; echo "waiting for arangodb";
            done;
            echo "connection successful!"']
          {{ else }}
          args: ['while [ $(curl -ksw "%{http_code}" --user "{{ .Values.env.ARANGO_USER }}:{{ .Values.env.ARANGO_PASSWORD }}" "{{ .Values.env.ARANGO_URL }}/_api/version" -o /dev/null) -ne 200 ];
            do sleep 5; echo "waiting for arangodb";
            done;
            echo "connection successful!"']
          {{ end }}
      {{ end }}
        - name: inventory-ready
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: curlimages/curl
          command: ["/bin/sh","-c"]
          args: ['while [ $(wget --spider -q 0.0.0.0:8000/.well-known/apollo/server-health | echo $?) -ne 0 ];
            do sleep 5; echo "waiting for device inventory";
            done;
            echo "connection successful!"']
      containers:
      - name: inventory-seed
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: "X_TENANT_ID"
            value: {{ .Values.env.X_TENANT_ID | quote }}
            {{ if .Values.postgresql.enabled }}
          - name: "DATABASE_URL"
            value: "postgres://{{ .Values.env.POSTGRES_USER }}:{{ .Values.env.POSTGRES_PASSWORD }}@{{ .Release.Name }}-postgresql:5432/inventory?sslmode=disable"
            {{ else }}
          - name: "DATABASE_URL"
            value: "postgres://{{ .Values.env.POSTGRES_USER }}:{{ .Values.env.POSTGRES_PASSWORD }}@{{ .Values.env.POSTGRES_HOSTNAME }}:{{ .Values.env.POSTGRES_PORT }}/{{ .Values.env.POSTGRES_DB }}?sslmode=disable"
            {{ end }}
          - name: "ARANGO_ENABLED"
            value: {{ .Values.env.ARANGO_ENABLED | quote }}
          - name: "ARANGO_URL"
            value: {{ .Values.env.ARANGO_URL | quote }}
          - name: "ARANGO_USER"
            value: {{ .Values.env.ARANGO_USER | quote }}
          - name: "ARANGO_PASSWORD"
            value: {{ .Values.env.ARANGO_PASSWORD | default " " | quote }}
          - name: "ARANGO_DB"
            value: {{ .Values.env.ARANGO_DB | quote }}
          - name: "ARANGO_TOKEN"
            value: {{ .Values.env.ARANGO_TOKEN | quote }}
        command: ['/bin/sh', '-c']
        args: [ (node arango/init.js || true ) && (node prisma/seed.js -z uniconfig || true )]
      restartPolicy: Never
  backoffLimit: 4
{{ end }}
