apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "topology-discovery.fullname" . }}
  labels:
    {{- include "topology-discovery.labels" . | nindent 4 }}
  {{- with .Values.deployment.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "topology-discovery.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "topology-discovery.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "topology-discovery.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: check-conductor-ready
          image: "{{ .Values.utilitiesImage.repository }}:{{ .Values.utilitiesImage.tag }}"
          imagePullPolicy: "{{ .Values.utilitiesImage.pullPolicy }}"
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -o /dev/null --silent --write-out "%{http_code}" {{ .Values.env.CONDUCTOR_URL }}/health) -ne 200 ];
            do sleep 5; echo "waiting for conductor";
            done;
            echo "connection successful!"']
        - name: check-arangodb-ready
          image: "{{ .Values.utilitiesImage.repository }}:{{ .Values.utilitiesImage.tag }}"
          imagePullPolicy: "{{ .Values.utilitiesImage.pullPolicy }}"
          command: ["/bin/sh","-c"]
          env:
            - name: ARANGO_URL 
              value: {{ .Values.dbPersistence.ARANGO_URL | quote }}
            - name: ARANGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "topology-discovery.secretName" . }}
                  {{- if (include "topology-discovery.createSecret" .) }}
                  key: ARANGO_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.arangoUsernameKey }}
                  {{- end}}
            - name: ARANGO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "topology-discovery.secretName" . }}
                  {{- if (include "topology-discovery.createSecret" .) }}
                  key: ARANGO_ROOT_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.arangoRootPasswordKey }}
                  {{- end}}
          args: ['while [ $(curl -ksw "%{http_code}" --user "${ARANGO_USERNAME}:${ARANGO_ROOT_PASSWORD}" "${ARANGO_URL}/_api/version" -o /dev/null) -ne 200 ];
            do sleep 5; echo "waiting for arangodb";
            done;
            echo "connection successful!"']
        {{- if .Values.env.IMPORT_DEVICE_INVENTORY_DATA }}
        - name: check-inventory-ready
          image: "{{ .Values.utilitiesImage.repository }}:{{ .Values.utilitiesImage.tag }}"
          imagePullPolicy: "{{ .Values.utilitiesImage.pullPolicy }}"
          command: ["/bin/sh","-c"]
          args: ['while [ $(curl -o /dev/null --silent --write-out "%{http_code}" inventory:8000/.well-known/apollo/server-health) -ne 200 ];
            do sleep 5; echo "waiting for inventory";
            done;
            echo "connection successful!"']
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: CONDUCTOR_URL_BASE 
              value: "{{ .Values.env.CONDUCTOR_URL }}/api"
            - name: ARANGO_URL 
              value: {{ .Values.dbPersistence.ARANGO_URL | quote }}
            - name: ARANGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "topology-discovery.secretName" . }}
                  {{- if (include "topology-discovery.createSecret" .) }}
                  key: ARANGO_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.arangoUsernameKey }}
                  {{- end}}
            - name: ARANGO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "topology-discovery.secretName" . }}
                  {{- if (include "topology-discovery.createSecret" .) }}
                  key: ARANGO_ROOT_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.arangoRootPasswordKey }}
                  {{- end}}
          {{- range $key, $val := .Values.env }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: {{ .Chart.Name }}-kafka-consumer-api
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/.venv/bin/python"]
          args: ["/home/app/topology_discovery/kafka/kafka_client.py"]
          env:
            - name: PYTHONPATH
              value: /home/app
            - name: CONDUCTOR_URL_BASE 
              value: "{{ .Values.env.CONDUCTOR_URL }}/api"
            - name: ARANGO_URL 
              value: {{ .Values.dbPersistence.ARANGO_URL | quote }}
            - name: ARANGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "topology-discovery.secretName" . }}
                  {{- if (include "topology-discovery.createSecret" .) }}
                  key: ARANGO_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.arangoUsernameKey }}
                  {{- end}}
            - name: ARANGO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "topology-discovery.secretName" . }}
                  {{- if (include "topology-discovery.createSecret" .) }}
                  key: ARANGO_ROOT_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.arangoRootPasswordKey }}
                  {{- end}}
          {{- range $key, $val := .Values.env }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          ports:
            - name: http-kafka
              containerPort: 5005
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: http-kafka
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: http-kafka
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          resources:
            {{- toYaml .Values.kafkaClientResources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
