apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "uniconfig.fullname" . }}
  labels:
    {{- include "uniconfig.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "uniconfig.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.alwaysRollAfterUpgrade }}
        rollme: {{ randAlphaNum 5 | quote }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "uniconfig.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      # TODO check
      serviceAccountName: {{ include "uniconfig.serviceAccountName" . }}
      volumes:
        - name: {{ include "uniconfig.data-volume" . }}
          emptyDir: {}
        - name: {{ include "uniconfig.logs-volume" . }}
          emptyDir: {}
        {{- range .Values.extraConfigmapMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMapName }}
        {{- end }}
       {{- with .Values.extraVolumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      initContainers:
        - name: check-db-ready
          image: "{{ .Values.utilitiesImage.repository }}:{{ .Values.utilitiesImage.tag }}"
          imagePullPolicy: "{{ .Values.utilitiesImage.pullPolicy }}"
          command: ['sh', '-c',
            "until pg_isready -h ${DBPERSISTENCE_CONNECTION_DATABASELOCATIONS_0_HOST} -p 5432 -U ${DBPERSISTENCE_CONNECTION_USERNAME};
            do echo waiting for database; sleep 2; done;"]
          env:
            - name: DBPERSISTENCE_CONNECTION_DATABASELOCATIONS_0_HOST
              {{- if .Values.postgresql.enabled }}
              value: "{{ .Release.Name }}-postgresql"
              {{- else }}
              value: {{ .Values.dbPersistence.POSTGRES_HOST | quote }}
              {{- end }}
            - name: DBPERSISTENCE_CONNECTION_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "uniconfig.secretName" . }}
                  {{- if (include "uniconfig.createSecret" .) }}
                  key: POSTGRES_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.postgresUsernameKey }}
                  {{- end}}
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
        # Copy data files
        - name: copy-config-files
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          command:
            - sh
            - '-c'
            - 'cp -r /opt/uniconfig-frinx/. /tmp/uniconfig-frinx/'
          volumeMounts:
            - name: {{ include "uniconfig.data-volume" . }}
              mountPath: /tmp/uniconfig-frinx/
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
        # Copy mibs files
        {{- range $mib, $config := .Values.mibsConfigs }}
        - name: {{ $mib }}-mibs-copy
          image: {{ $config.repository }}{{ if $config.tag }}:{{ $config.tag }}{{ end }}
          imagePullPolicy: {{  $config.pullPolicy | default "IfNotPresent" }}
          volumeMounts:
            - name: {{ include "uniconfig.data-volume" $ }}
              mountPath: /tmp/uniconfig-frinx
          command:
            - sh
            - '-c'
            - 'mkdir -p /tmp/uniconfig-frinx/mibs && cp -rp {{ $config.mibsPath }} /tmp/uniconfig-frinx/mibs && chmod -R 777 /tmp/uniconfig-frinx/mibs'
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
        {{- end }}
        # Copy cache files
        {{- range $cache, $config := .Values.cacheConfigs }}
        - name: {{ $cache }}-cache-copy
          image: {{ $config.repository }}{{ if $config.tag }}:{{ $config.tag }}{{ end }}
          imagePullPolicy: {{  $config.pullPolicy | default "IfNotPresent" }}
          volumeMounts:
            - name: {{ include "uniconfig.data-volume" $ }}
              mountPath: /tmp/uniconfig-frinx
          command:
            - sh
            - '-c'
            - 'mkdir -p /tmp/uniconfig-frinx/cache && cp -rp {{ $config.cachePath }} /tmp/uniconfig-frinx/cache && chmod -R 777 /tmp/uniconfig-frinx/cache'
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
        {{- end }}
        {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: {{- toYaml .Values.command | nindent 12 }}
          args: {{- toYaml .Values.args | nindent 12 }}
          ports:
            - name: uc-rest-port
              containerPort: 8181
              protocol: TCP
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          env:
          # DB SECRET ENV
            {{- if .Values.postgresql.enabled }}
            - name: DBPERSISTENCE_CONNECTION_DATABASELOCATIONS_0_HOST
              value: "{{ .Release.Name }}-postgresql"
            {{- else }}
            - name: DBPERSISTENCE_CONNECTION_DATABASELOCATIONS_0_HOST
              value: {{ .Values.dbPersistence.POSTGRES_HOST | quote }}
            {{- end }}
            - name: DBPERSISTENCE_CONNECTION_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "uniconfig.secretName" . }}
                  {{- if (include "uniconfig.createSecret" .) }}
                  key: POSTGRES_USERNAME
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.postgresUsernameKey }}
                  {{- end}}
            - name: DBPERSISTENCE_CONNECTION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "uniconfig.secretName" . }}
                  {{- if (include "uniconfig.createSecret" .) }}
                  key: POSTGRES_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.postgresPasswordKey }}
                  {{- end}}
            - name: CLISHELL_SSHSERVER_USERNAMEPASSWORDAUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "uniconfig.secretName" . }}
                  {{- if (include "uniconfig.createSecret" .) }}
                  key: CLISHELL_SSHSERVER_USERNAMEPASSWORDAUTH_PASSWORD
                  {{- else }}
                  key: {{ .Values.dbPersistence.existingSecret.clishellSshserverUsernamepasswordauthPasswordKey }}
                  {{- end}}
          # Java ENV
            - name: JAVA_MAX_MEM
              value: {{ .Values.java.max_mem | quote }}
          # Logging ENV
            - name: CONTAINER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_NAME
              value: {{ include "uniconfig.fullname" . }}
          # Proxy ENV
          {{- if $.Values.proxy.enabled }}
          {{- range $key, $val := $.Values.proxy.config }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
          # Extra ENV
          {{- range $key, $val := .Values.extraEnv }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          volumeMounts:
          - name: {{ include "uniconfig.logs-volume" . }}
            mountPath: /opt/uniconfig-frinx/log
          - name: {{ include "uniconfig.data-volume" . }}
            mountPath: /opt/uniconfig-frinx
          {{- range .Values.extraConfigmapMounts }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            subPath: {{ .subPath | quote }}
            readOnly: {{ .readOnly }}
          {{- end }}
        {{- with .Values.extraContainers }}
        {{- range . }}
        - name: {{ .name }}
          image: {{ .image | quote }}
          imagePullPolicy: {{ .imagePullPolicy | quote }}
          {{- if .command }}
          command:
            {{- toYaml .command | nindent 12 }}
          {{- end }}
          {{- if .args }}
          args:
            {{- toYaml .args | nindent 12 }}
          {{- end }}
          {{- if .ports }}
          ports:
            {{- toYaml .ports | nindent 12 }}
          {{- end }}
          {{- if .env }}
          env:
            {{- toYaml .env | nindent 12 }}
          {{- end }}
          {{- if .resources }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts:
            {{- toYaml .volumeMounts | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- end }}