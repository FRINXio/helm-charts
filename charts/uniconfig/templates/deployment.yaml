apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "uniconfig.fullname" . }}
  labels:
    {{- include "uniconfig.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "uniconfig.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "uniconfig.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.azure.AKS.enabled }}
      volumes:
        - name: config
          azureFile:
            secretName: storage-secret
            shareName: frinxmachine-configs/uniconfig
            readOnly: false
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "uniconfig.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: check-db-ready
          image: postgres:alpine
          command: ['sh', '-c',
            "until pg_isready -h {{ .Release.Name }}-postgresql -p 5432;
            do echo waiting for database; sleep 2; done;"]
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # {{- if .Values.azure.AKS.enabled }}
          # command: ["/bin/sh","-c"]
          # args: ["cp -r /mnt/config_files/. /opt/uniconfig-frinx/config/; /opt/uniconfig-frinx/run_uniconfig.sh -f -l {{ .Values.license }}"]
          # {{- end }}
          args:
            - -f
            - -l
            - "{{ .Values.license }}"
          command:
            - /opt/uniconfig-frinx/run_uniconfig.sh
          env:
            - name: JAVA_MAX_MEM
              value: "7G"
            - name: _JAVA_OPTIONS
              #value: "-Xmx6G -XX:+AlwaysPreTouch -Djna.nosys=true -XX:+CrashOnOutOfMemoryError -XX:MaxGCPauseMillis=200 -Xloggc:/opt/uniconfig-frinx/log/gc.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCCause -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=5M -XX:+PrintGCDateStamps -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1"
              value: "-Xmx6G -XX:+AlwaysPreTouch"
            - name: dbPersistence_enabled
              value: {{ .Values.dbPersistence.enabled | quote }}
            - name: dbPersistence_connection_dbName
              value: {{ .Values.dbPersistence.connection_dbName }}
            - name: dbPersistence_connection_username
              value: {{ .Values.dbPersistence.connection_username }}
            - name: dbPersistence_connection_password
              value: {{ .Values.dbPersistence.connection_password }}
              {{ if .Values.postgresql.enabled }}
            - name: dbPersistence_connection_databaseLocations_host
              value: "{{ .Release.Name }}-postgresql"
              {{ else }}
            - name: dbPersistence_connection_databaseLocations_host
              value: {{ .Values.dbPersistence.connection_databaseLocations_host }}
              {{ end }}
            - name: dbPersistence_connection_databaseLocations_port
              value: {{ .Values.dbPersistence.connection_databaseLocations_port | quote }}
          # volumeMounts:
          #   - name: config
          #     mountPath: {{ .Values.mountPath }}
          #   - name: cache
          #     mountPath: "/opt/uniconfig-frinx/cache"
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'curl --insecure -o /dev/null --silent --write-out "%{http_code}" -X POST localhost:8181/rests/operations/uniconfig-manager:health -H "Content-Type:application/json"'
            initialDelaySeconds: 120
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'curl --insecure -o /dev/null --silent --write-out "%{http_code}" -X POST localhost:8181/rests/operations/uniconfig-manager:health -H "Content-Type:application/json"'
            initialDelaySeconds: 120
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
