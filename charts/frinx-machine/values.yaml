# Anchor settings
x-frinx-machine-version: &frinx-machine-version "7.0"
x-frinx-database-password: &frinx-database-password frinx-database-password
x-frinx-image-pull-secret: &frinx-image-pull-secret regcred
x-frinx-rbac-admin-role: &frinx-rbac-admin-role FRINXio
x-metrics-enabled: &metrics-enabled true

# Global secrets
global:
  dbPersistence:
    enabled: true
    secretName: *frinx-database-password
    secrets:
      TD_ARANGO_USERNAME: root
      TD_ARANGO_ROOT_PASSWORD: frinx
      INVENTORY_POSTGRES_USERNAME: inventory_user
      INVENTORY_POSTGRES_PASSWORD: inventory
      RM_POSTGRES_USERNAME: resource_user
      RM_POSTGRES_PASSWORD: resource
      SCHELLAR_POSTGRES_USERNAME: schellar_user
      SCHELLAR_POSTGRES_PASSWORD: schellar
      CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_USERNAME: conductor_user
      CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_PASSWORD: conductor
      SPRING_DATASOURCE_USERNAME: conductor_user
      SPRING_DATASOURCE_PASSWORD: conductor
      SPRING_SEARCHDATASOURCE_USERNAME: conductor_user
      SPRING_SEARCHDATASOURCE_PASSWORD: conductor
      UNICONFIG_POSTGRES_USERNAME: postgresU
      UNICONFIG_POSTGRES_PASSWORD: postgresP
      UNICONFIG_CLISHELL_SSHSERVER_USERNAMEPASSWORDAUTH_PASSWORD: admin
      TIMESCALEDB_USERNAME: postgresU
      TIMESCALEDB_PASSWORD: postgresP

# Helm Chart dependency installation
tags:
  operators: false
  monitoring: *metrics-enabled
  database: true
  backend: true

# Operators

frinx-machine-operators:

  kube-arangodb:
    enabled: true

  cloudnative-pg:
    enabled: true

  prometheus-operator-crds:
    enabled: true

# Monitoring

frinx-machine-monitoring:

  kube-prometheus-stack:
    enabled: true

    commonLabels:
      type: frinx-machine-monitoring

    grafana:
      enabled: true
      fullnameOverride: "grafana"
      adminUser: frinx
      adminPassword: frinx123!

  loki:
    enabled: true

  promtail:
    enabled: true

# Default values for FRINX-machine
# Database configuration

uniconfig-postgres:
  name: uniconfig-postgresql
  imageName: "ghcr.io/cloudnative-pg/postgresql:12.18"

  bootstrap:
    initdb:
      database: uniconfig
      owner: postgresU

  postgresql:
    parameters:
      max_connections: "300"

  storage:
    size: 10Gi
    resizeInUseVolumes: true

  secrets:
    superuserSecret:
      username: postgres
      password: postgres
    userSecret:
      username: postgresU
      password: postgresP

  monitoring:
    enablePodMonitor: *metrics-enabled

workflow-manager-postgres:
  name: postgresql
  imageName: "ghcr.io/cloudnative-pg/postgresql:12.18"

  bootstrap:
    initdb:
      postInitApplicationSQLRefs:
        secretRefs:
          - name: postgresql-post-init-sql-secret
            key: secret.sql

  postgresql:
    parameters:
      max_connections: "300"

  storage:
    size: 100Gi
    resizeInUseVolumes: true

  secrets:
    superuserSecret:
      username: postgres
      password: postgres
    userSecret:
      username: frinx
      password: postgres
    postInitSqlSecret:
      sql: |-
        CREATE ROLE schellar LOGIN PASSWORD 'schellar';
        GRANT CONNECT ON DATABASE frinx TO schellar;
        CREATE USER schellar_user WITH PASSWORD 'schellar';
        GRANT schellar TO schellar_user;
        CREATE SCHEMA schellar AUTHORIZATION schellar;
        ALTER ROLE schellar SET search_path=schellar;
        ALTER USER schellar_user SET search_path TO schellar;
        CREATE ROLE inventory LOGIN PASSWORD 'inventory';
        GRANT CONNECT ON DATABASE frinx TO inventory;
        CREATE USER inventory_user WITH PASSWORD 'inventory';
        GRANT inventory TO inventory_user;
        CREATE SCHEMA inventory AUTHORIZATION inventory;
        ALTER ROLE inventory SET search_path=inventory;
        ALTER USER inventory_user SET search_path TO inventory;
        CREATE ROLE conductor LOGIN PASSWORD 'conductor';
        GRANT CONNECT ON DATABASE frinx TO conductor;
        CREATE USER conductor_user WITH PASSWORD 'conductor';
        GRANT conductor TO conductor_user;
        CREATE SCHEMA conductor AUTHORIZATION conductor;
        CREATE SCHEMA archive AUTHORIZATION conductor;
        CREATE SCHEMA external AUTHORIZATION conductor;
        ALTER ROLE conductor SET search_path=public,conductor,archive,external;
        ALTER USER conductor_user SET search_path TO conductor,archive,external;
        CREATE ROLE resource LOGIN PASSWORD 'resource';
        GRANT CONNECT ON DATABASE frinx TO resource;
        CREATE USER resource_user WITH PASSWORD 'resource';
        GRANT resource TO resource_user;
        CREATE SCHEMA resource AUTHORIZATION resource;
        ALTER ROLE resource SET search_path=resource;
        ALTER USER resource_user SET search_path TO resource;

  monitoring:
    enablePodMonitor: *metrics-enabled

timescale-db:
  name: timescale-db
  imageName: "frinx/cloudnativepg-timescale:16-ts2"

  bootstrap:
    initdb:
      database: performancemonitor
      owner: postgresU
      postInitApplicationSQL:
        - CREATE EXTENSION IF NOT EXISTS timescaledb;

  postgresql:
    parameters:
      max_connections: "300"
    shared_preload_libraries:
      - timescaledb

  secrets:
    superuserSecret:
      username: postgres
      password: postgres
    userSecret:
      username: postgresU
      password: postgresP

  monitoring:
    enablePodMonitor: *metrics-enabled

frinx-arango-config:
  arangodb_config:
    enabled: true
    image:
      repository: arangodb/arangodb
      tag: 3.12
    securityContext:
      readOnlyRootFilesystem: true
      runAsUser: 1000
      runAsGroup: 2000
      fsGroup: 3000

kafka:
  fullnameOverride: kafka
  listeners:
    client:
      protocol: PLAINTEXT

  controller:
    replicaCount: 1

  configurationOverrides:
    log.retention.hours: 168

  persistence:
    enabled: true
    size: 10Gi

  kraft:
    # CHANGE IT IN PRODUCTION
    clusterId: eN1N4bqk4ygDDBmM85QGys

  sasl:
    controller:
      # CHANGE IT IN PRODUCTION
      password: Aepr31lTfX

    interbroker:
      # CHANGE IT IN PRODUCTION
      password: BgLj0pPhTz

  provisioning:
    enabled: true
    topics:
      - name: device-inventory
        partitions: 1
        replicationFactor: 1
        config:
          max.message.bytes: 64000
          flush.messages: 1


# Core component configuration

krakend:
  fullnameOverride: "krakend"

  image:
    repository: "frinx/krakend"
    tag: "7.0.0"

  rbac:
    UNICONFIG_CONTROLLER_ADMIN_GROUP: *frinx-rbac-admin-role
    INVENTORY_ADMIN_GROUP: *frinx-rbac-admin-role
    ADMIN_ACCESS_ROLE: *frinx-rbac-admin-role
    X_AUTH_USER_GROUP: *frinx-rbac-admin-role

  debug:
    # This setting should be disabled in production
    enabled: true
    x_forwarded_roles: *frinx-rbac-admin-role
    x_forwarded_groups: *frinx-rbac-admin-role
    x_forwarded_user: "frinx-admin-user"

  metrics:
    enabled: *metrics-enabled

  nginx:
    enabled: true

    ingress:
      enabled: true
      hostname: krakend.127.0.0.1.nip.io

    resourcesPreset: "nano"

    metrics:
      enabled: *metrics-enabled

frinx-frontend:
  fullnameOverride: "frinx-frontend"

  image:
    repository: "frinx/frinx-frontend"
    tag: "7.0.1"

  proxyImage:
    name: frinx/frinx-graphql-proxy
    tag: "7.0.0"

  env:
    AUTH_ENABLED: true
    COMMIT_HASH: *frinx-machine-version

resource-manager:
  fullnameOverride: "resource-manager"

  image:
    repository: "frinx/resource-manager"
    tag: "6.1.0"

  postgresql:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: postgresql-rw
    POSTGRES_DATABASE: frinx
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: RM_POSTGRES_USERNAME
      postgresPasswordKey: RM_POSTGRES_PASSWORD

  rbac:
    RM_ADMIN_ROLES: *frinx-rbac-admin-role
    RM_ADMIN_GROUPS: *frinx-rbac-admin-role

  metrics:
    enabled: *metrics-enabled

workflow-manager:
  fullnameOverride: "conductor-server"

  image:
    repository: "frinx/conductor-server"
    tag: "6.1.1"

  schellarImage:
    repository: "frinx/schellar"
    tag: "6.1.0"

  postgresql:
    enabled: false

  dbPersistence:
    SPRING_DATASOURCE_HOST: postgresql-rw
    SPRING_SEARCHDATASOURCE_HOST: postgresql-rw
    CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_HOST: postgresql-rw
    POSTGRES_DATABASE: frinx
    CONDUCTOR_DATASOURCE_SCHEMA: conductor
    POSTGRES_DB_SCHEMA: conductor
    existingSecret:
      secretName: *frinx-database-password
      conductorExternalpayloadstoragePostgresUsernameKey: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_USERNAME
      conductorExternalpayloadstoragePostgresPasswordKey: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_PASSWORD
      springDatasourceUsernameKey: SPRING_DATASOURCE_USERNAME
      springDatasourcePasswordKey: SPRING_DATASOURCE_PASSWORD
      springSearchdatasourceUsernameKey: SPRING_SEARCHDATASOURCE_USERNAME
      springSearchdatasourcePasswordKey: SPRING_SEARCHDATASOURCE_PASSWORD

  schellarDbPersistence:
    POSTGRES_HOST: postgresql-rw
    POSTGRES_DATABASE: frinx
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: SCHELLAR_POSTGRES_USERNAME
      postgresPasswordKey: SCHELLAR_POSTGRES_PASSWORD

  rbac:
    WM_ADMIN_ROLES: *frinx-rbac-admin-role
    WM_ADMIN_GROUPS: *frinx-rbac-admin-role

  metrics:
    enabled: *metrics-enabled

inventory:
  fullnameOverride: "inventory"

  image:
    repository: "frinx/frinx-inventory-server"
    tag: "7.0.1"

  postgresql:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: "postgresql-rw"
    POSTGRES_DATABASE: frinx
    POSTGRES_DB_SCHEMA: inventory
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: INVENTORY_POSTGRES_USERNAME
      postgresPasswordKey: INVENTORY_POSTGRES_PASSWORD

  # extraEnv:
  #   NODE_ENV: 'development'

topology-discovery:
  fullnameOverride: "topology-discovery"

  image:
    repository: "frinx/topology-discovery"
    tag: "7.0.3"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  dbPersistence:
    existingSecret:
      secretName: *frinx-database-password
      arangoUsernameKey: TD_ARANGO_USERNAME
      arangoRootPasswordKey: TD_ARANGO_ROOT_PASSWORD

  env:
    X_AUTH_USER_GROUP: *frinx-rbac-admin-role

uc-zone-lb:
  fullnameOverride: "uc-zone-lb"

  image:
    repository: traefik
    tag: v2.11

  ingressClass:
    enabled: false

  service:
    enabled: false

  providers:
    kubernetesIngress:
      enabled: false

    kubernetesCRD:
      enabled: true

  additionalArguments:
    - "--entryPoints.uniconfig.address=:8181"
    - "--entryPoints.uniconfig.http.encodequerysemicolons=true"
    - "--log.level=DEBUG"

  ports:
    uniconfig:
      port: 8181
      expose: false
      exposedPort: 8181
      protocol: TCP

uniconfig:
  fullnameOverride: "uniconfig-controller"
  replicaCount: 1

  image:
    repository: "frinx/uniconfig"
    tag: "7.0.0"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  postgresql:
    enabled: false

  kafka:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: "uniconfig-postgresql-rw"
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: UNICONFIG_POSTGRES_USERNAME
      postgresPasswordKey: UNICONFIG_POSTGRES_PASSWORD
      clishellSshserverUsernamepasswordauthPasswordKey: UNICONFIG_CLISHELL_SSHSERVER_USERNAMEPASSWORDAUTH_PASSWORD

  securityContext:
    capabilities:
      add:
        - NET_BIND_SERVICE
        - NET_RAW
      drop:
        - ALL

  highAvailability:
    enabled: true
    traefik:
      selectorName: uc-zone-lb
    stickyCookie:
      name: uniconfig_server_id
      httpOnly: true
      secure: false
      sameSite: strict
    # Expose extra service into traefik lb with sticky cookies
    # Service name must be uniqie in FM installation
    hosts:
      - uniconfig

  metrics:
    enabled: *metrics-enabled

performance-monitor:
  fullnameOverride: performance-monitor

  image:
    repository: frinx/performance-monitor
    tag: "7.0.1"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  kafka:
    enabled: false

  postgresql:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: timescale-db-rw
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: TIMESCALEDB_USERNAME
      postgresPasswordKey: TIMESCALEDB_PASSWORD
    POSTGRES_USERNAME: postgresU
    POSTGRES_PASSWORD: postgresP

swagger-ui:
  fullnameOverride: "swagger-ui"

  env:
    URLS: "[{ url: \"./api/workflow-manager.json\", name: \"WorkflowManager\"}, { url: \"./api/uniconfig.yaml\", name: \"Uniconfig\"}]"

  manageApiDocs:
    workflow-manager:
      enabled: true
      fetch:
        url: http://conductor-server:8080/v3/api-docs
        file: workflow-manager.json
      formatConfigMap: workflow-manager-filter
    uniconfig:
      enabled: true
      fetch:
        url: http://uniconfig:8181/rests/openapi/uniconfig
        file: uniconfig.yaml
      formatConfigMap: uniconfig-filter

  extraConfigMaps:
    uniconfig-filter:
      enabled: true
      server:
        url: /api/uniconfig
    workflow-manager-filter:
      enabled: true
      server:
        url: /api/workflow
      api:
        rewrite:
          from: ^/api/
          to: "/"
        whitelist:
          "/api/metadata/taskdefs":
            - "get"
            - "post"
            - "put"
          "/api/metadata/taskdefs/{name}":
            - "get"
            - "delete"
          "/api/metadata/workflow":
            - "get"
            - "post"
            - "put"
          "/api/metadata/workflow/{name}":
            - "get"
          "/api/metadata/workflow/{name}/{version}":
            - "delete"
          "/api/workflow/{name}":
            - "delete"
          "/api/workflow/{workflowId}/remove":
            - "delete"
          "/api/workflow":
            - "post"
          "/api/event":
            - "get"
            - "post"
          "/api/event/{name}":
            - "delete"
            - "get"
          "/api/workflow/bulk/pause":
            - "put"
          "/api/workflow/bulk/resume":
            - "put"
          "/api/workflow/bulk/retry":
            - "post"
          "/api/workflow/bulk/restart":
            - "post"
          "/api/workflow/bulk/terminate":
            - "post"
          "/api/external/postgres/{externalPayloadPath}":
            - "get"
          "/health":
            - "get"

device-induction:
  fullnameOverride: "device-induction"

  image:
    repository: frinx/device-induction
    tag: "1.2.2"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  commands: ["python3", "-u", "device_induction/main.py"]

  env:
    X_AUTH_USER_GROUP: *frinx-rbac-admin-role
    DEVI_DEVICE_AUTHENTICATION__DEFAULT_USERNAME: admin
    DEVI_DEVICE_AUTHENTICATION__DEFAULT_PASSWORD: admin

# Identity provider configuration

oauth2-proxy:
  enabled: false
  fullnameOverride: "oauth2-proxy"

  image:
    repository: "frinx/oauth2-proxy"
    tag: "7.0.0-alpine"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  config:
    cookieSecret: create_strong_secret
    clientSecret: ""
    clientID: ""
    configFile: |-
      # DEFAULT CONFIGURATION
      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/overview

      custom_sign_in_logo = "/tmp/frinx/frinx.png"
      upstreams = "file:///dev/null"

      cookie_secure = true
      cookie_expire = 0
      pass_authorization_header = false
      proxy_websockets = true

      scope = "user:email read:org groups"
      email_domains = [ "*" ]

      # DEPENDS ON DEPLOYMENT SETUP, INGRESS CONFIGURATION
      cookie_domains = [ "fm.127.0.0.1.nip.io" ]
      whitelist_domains = [ "fm.127.0.0.1.nip.io" ]

      # IDENTITY PROVIDER CONFIGURATION
      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/providers/
      # Configuration example with github

      ssl_insecure_skip_verify = false
      pass_access_token = false
      set_xauthrequest = true
      skip_jwt_bearer_tokens = true
      reverse_proxy = true

      github_org = "FRINXio"
      provider = "github"
      login_url = "https://github.com/login/oauth/authorize"
      redirect_url = "https://fm.127.0.0.1.nip.io/oauth2/callback"

  metrics:
    enabled: *metrics-enabled
    serviceMonitor:
      enabled: *metrics-enabled
