# Global settings

x-frinx-database-password: &frinx-database-password frinx-database-password
x-frinx-image-pull-secret: &frinx-image-pull-secret regcred
x-frinx-rbac-admin-role: &frinx-rbac-admin-role FRINXio

global:
  dbPersistence:
    enabled: true
    secretName: *frinx-database-password
    secrets:
      TD_ARANGO_USERNAME: root
      TD_ARANGO_ROOT_PASSWORD: frinx
      INVENTORY_POSTGRES_USERNAME: inventory_user
      INVENTORY_POSTGRES_PASSWORD: inventory
      RM_POSTGRES_USERNAME: resource_user
      RM_POSTGRES_PASSWORD: resource
      SCHELLAR_POSTGRES_USERNAME: schellar_user
      SCHELLAR_POSTGRES_PASSWORD: schellar
      CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_USERNAME: conductor_user
      CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_PASSWORD: conductor
      SPRING_DATASOURCE_USERNAME: conductor_user
      SPRING_DATASOURCE_PASSWORD: conductor
      SPRING_SEARCHDATASOURCE_USERNAME: conductor_user
      SPRING_SEARCHDATASOURCE_PASSWORD: conductor
      UNICONFIG_POSTGRES_USERNAME: postgresU
      UNICONFIG_POSTGRES_PASSWORD: postgresP
      UNICONFIG_CLISHELL_SSHSERVER_USERNAMEPASSWORDAUTH_PASSWORD: admin

# Stateful PG
# This section is deprecated

postgresql:
  enabled: false
  fullnameOverride: "frinx-postgresql"
  auth:
    enablePostgresUser: true
    username: postgresU
    password: postgresP
    database: postgres
  architecture: standalone
  primary:
    initdb:
      scripts:
        init_db.sql: |
          CREATE DATABASE schellar;
          CREATE DATABASE conductor;
          CREATE DATABASE inventory;

uniconfig-postgresql:
  enabled: false
  fullnameOverride: "uniconfig-postgresql"
  auth:
    enablePostgresUser: true
    username: postgresU
    password: postgresP
    database: uniconfig
  architecture: standalone

# Monitoring

grafana:
  enabled: true
  fullnameOverride: "grafana"
  adminUser: frinx
  adminPassword: frinx123!

  extraConfigmapMounts:
    - name: frinx-grafana-datasources
      mountPath: /etc/grafana/provisioning/datasources
      subPath: ""
      configMap: frinx-grafana-datasources
      readOnly: false
    - name: frinx-grafana-dashboards
      mountPath: /etc/grafana/provisioning/dashboards
      subPath: ""
      configMap: frinx-grafana-dashboards
      readOnly: false

influxdb2:
  enabled: true
  fullnameOverride: influxdb
  adminUser:
    user: "frinx"
    password: "frinx123!"
    token: "eyJrIjoiN09MSVpVZjlVRG1xNHlLNXpVbmZJOXFLWU1GOXFxNEIiLCJuIjoic3Nzc3MiLCJpZCI6MX0"
    organization: "frinx-machine"
    bucket: "frinx"
    retention_policy: "2d"

telegraf-ds:
  enabled: true
  fullnameOverride: telegraf-ds
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: HOSTNAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config:
    docker_endpoint: ""

  override_config:
    toml: |
      [agent]
        collection_jitter = "0s"
        debug = false
        flush_interval = "10s"
        flush_jitter = "0s"
        hostname = "$HOSTNAME"
        interval = "10s"
        logfile = ""
        metric_batch_size = 1000
        metric_buffer_limit = 10000
        omit_hostname = false
        precision = ""
        quiet = false
        round_interval = true

      [[outputs.influxdb_v2]]
        bucket = "frinx"
        organization = "frinx-machine"
        token = "eyJrIjoiN09MSVpVZjlVRG1xNHlLNXpVbmZJOXFLWU1GOXFxNEIiLCJuIjoic3Nzc3MiLCJpZCI6MX0"
        urls = ["http://influxdb"]

      [[outputs.health]]
        service_address = "http://:8080"

      [[inputs.diskio]]
      [[inputs.kernel]]
      [[inputs.mem]]
      [[inputs.net]]
      [[inputs.processes]]
      [[inputs.swap]]
      [[inputs.system]]

      [[inputs.cpu]]
        percpu = true
        totalcpu = true
        collect_cpu_time = false
        report_active = false

      [[inputs.disk]]
        ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

      [[inputs.kubernetes]]
        url = "https://$HOSTIP:10250"
        bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        insecure_skip_verify = true
        [inputs.kubernetes.tagpass]
          namespace = [ "${NAMESPACE}" ]

loki:
  enabled: true
  fullnameOverride: loki
  loki:
    config: |
      chunk_store_config:
        max_look_back_period: 24h
      table_manager:
        retention_deletes_enabled: false
        retention_period: 24h

promtail:
  fullnameOverride: promtail
  config:
    clients:
      - url: http://loki:3100/loki/api/v1/push
    snippets:
      pipelineStages:
        - cri: {}
      scrapeConfigs: |
        - job_name: kubernetes-pods
          pipeline_stages:
            {{- toYaml .Values.config.snippets.pipelineStages | nindent 4 }}
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - {{ .Release.Namespace }}
          relabel_configs:
            - source_labels:
                - __meta_kubernetes_pod_controller_name
              regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
              action: replace
              target_label: __tmp_controller_name
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_name
                - __meta_kubernetes_pod_label_app
                - __tmp_controller_name
                - __meta_kubernetes_pod_name
              regex: ^;*([^;]+)(;.*)?$
              action: replace
              target_label: app
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_instance
                - __meta_kubernetes_pod_label_release
              regex: ^;*([^;]+)(;.*)?$
              action: replace
              target_label: instance
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_component
                - __meta_kubernetes_pod_label_component
              regex: ^;*([^;]+)(;.*)?$
              action: replace
              target_label: component
            {{- if .Values.config.snippets.addScrapeJobLabel }}
            - replacement: kubernetes-pods
              target_label: scrape_job
            {{- end }}
            {{- toYaml .Values.config.snippets.common | nindent 4 }}
            {{- with .Values.config.snippets.extraRelabelConfigs }}
            {{- toYaml . | nindent 4 }}
            {{- end }}

# Default values for FRINX-machine
# Database configuration

uniconfig-postgres:
  enabled: true
  name: uniconfig-postgresql
  imageName: "ghcr.io/cloudnative-pg/postgresql:12.18"

  bootstrap:
    initdb:
      database: uniconfig
      owner: postgresU

  postgresql:
    parameters:
      max_connections: "300"

  storage:
    size: 10Gi
    resizeInUseVolumes: true

  secrets:
    superuserSecret:
      username: postgres
      password: postgres
    userSecret:
      username: postgresU
      password: postgresP

workflow-manager-postgres:
  enabled: true
  name: postgresql
  imageName: "ghcr.io/cloudnative-pg/postgresql:12.18"

  bootstrap:
    initdb:
      postInitApplicationSQLRefs:
        secretRefs:
          - name: postgresql-post-init-sql-secret
            key: secret.sql

  postgresql:
    parameters:
      max_connections: "300"

  storage:
    size: 100Gi
    resizeInUseVolumes: true

  secrets:
    superuserSecret:
      username: postgres
      password: postgres
    userSecret:
      username: frinx
      password: postgres
    postInitSqlSecret:
      sql: |-
        CREATE ROLE schellar LOGIN PASSWORD 'schellar';
        GRANT CONNECT ON DATABASE frinx TO schellar;
        CREATE USER schellar_user WITH PASSWORD 'schellar';
        GRANT schellar TO schellar_user;
        CREATE SCHEMA schellar AUTHORIZATION schellar;
        ALTER ROLE schellar SET search_path=schellar;
        ALTER USER schellar_user SET search_path TO schellar;
        CREATE ROLE inventory LOGIN PASSWORD 'inventory';
        GRANT CONNECT ON DATABASE frinx TO inventory;
        CREATE USER inventory_user WITH PASSWORD 'inventory';
        GRANT inventory TO inventory_user;
        CREATE SCHEMA inventory AUTHORIZATION inventory;
        ALTER ROLE inventory SET search_path=inventory;
        ALTER USER inventory_user SET search_path TO inventory;
        CREATE ROLE conductor LOGIN PASSWORD 'conductor';
        GRANT CONNECT ON DATABASE frinx TO conductor;
        CREATE USER conductor_user WITH PASSWORD 'conductor';
        GRANT conductor TO conductor_user;
        CREATE SCHEMA conductor AUTHORIZATION conductor;
        CREATE SCHEMA archive AUTHORIZATION conductor;
        CREATE SCHEMA external AUTHORIZATION conductor;
        ALTER ROLE conductor SET search_path=public,conductor,archive,external;
        ALTER USER conductor_user SET search_path TO conductor,archive,external;
        CREATE ROLE resource LOGIN PASSWORD 'resource';
        GRANT CONNECT ON DATABASE frinx TO resource;
        CREATE USER resource_user WITH PASSWORD 'resource';
        GRANT resource TO resource_user;
        CREATE SCHEMA resource AUTHORIZATION resource;
        ALTER ROLE resource SET search_path=resource;
        ALTER USER resource_user SET search_path TO resource;

frinx-arango-config:
  enabled: true
  arangodb_config:
    enabled: true
    image:
      repository: arangodb/arangodb
      tag: 3.9.9
    securityContext:
      readOnlyRootFilesystem: true
      runAsUser: 1000
      runAsGroup: 2000
      fsGroup: 3000

# Core component configuration

krakend:
  enabled: true
  fullnameOverride: "krakend"
  replicaCount: 1

  image:
    repository: "frinx/krakend"
    tag: "6.0.0"

  proxyImage:
    repository: "nginx"
    tag: "1.25.4-alpine"

  rbac:
    UNICONFIG_CONTROLLER_ADMIN_GROUP: *frinx-rbac-admin-role
    INVENTORY_ADMIN_GROUP: *frinx-rbac-admin-role
    ADMIN_ACCESS_ROLE: *frinx-rbac-admin-role
    X_AUTH_USER_GROUP: *frinx-rbac-admin-role

  debug:
    # This setting should be disabled in production
    enabled: true
    x_forwarded_roles: *frinx-rbac-admin-role
    x_forwarded_groups: *frinx-rbac-admin-role
    x_forwarded_user: "frinx-admin-user"

frinx-frontend:
  enabled: true
  fullnameOverride: "frinx-frontend"

  image:
    repository: "frinx/frinx-frontend"
    tag: "6.0.0"

  proxyImage:
    name: frinx/frinx-graphql-proxy
    tag: "6.0.0"

  env:
    AUTH_ENABLED: true

resource-manager:
  enabled: true
  fullnameOverride: "resource-manager"

  image:
    repository: "frinx/resource-manager"
    tag: "6.0.0"

  postgresql:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: postgresql-rw
    POSTGRES_DATABASE: frinx
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: RM_POSTGRES_USERNAME
      postgresPasswordKey: RM_POSTGRES_PASSWORD

  rbac:
    RM_ADMIN_ROLES: *frinx-rbac-admin-role
    RM_ADMIN_GROUPS: *frinx-rbac-admin-role

workflow-manager:
  enabled: true
  fullnameOverride: "conductor-server"

  image:
    repository: "frinx/conductor-server"
    tag: "6.0.0"

  schellarImage:
    repository: "frinx/schellar"
    tag: "6.0.0"

  postgresql:
    enabled: false

  dbPersistence:
    SPRING_DATASOURCE_HOST: postgresql-rw
    SPRING_SEARCHDATASOURCE_HOST: postgresql-rw
    CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_HOST: postgresql-rw
    POSTGRES_DATABASE: frinx
    CONDUCTOR_DATASOURCE_SCHEMA: conductor
    POSTGRES_DB_SCHEMA: conductor
    existingSecret:
      secretName: *frinx-database-password
      conductorExternalpayloadstoragePostgresUsernameKey: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_USERNAME
      conductorExternalpayloadstoragePostgresPasswordKey: CONDUCTOR_EXTERNALPAYLOADSTORAGE_POSTGRES_PASSWORD
      springDatasourceUsernameKey: SPRING_DATASOURCE_USERNAME
      springDatasourcePasswordKey: SPRING_DATASOURCE_PASSWORD
      springSearchdatasourceUsernameKey: SPRING_SEARCHDATASOURCE_USERNAME
      springSearchdatasourcePasswordKey: SPRING_SEARCHDATASOURCE_PASSWORD

  schellarDbPersistence:
    POSTGRES_HOST: postgresql-rw
    POSTGRES_DATABASE: frinx
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: SCHELLAR_POSTGRES_USERNAME
      postgresPasswordKey: SCHELLAR_POSTGRES_PASSWORD

inventory:
  enabled: true
  fullnameOverride: "inventory"

  image:
    repository: "frinx/frinx-inventory-server"
    tag: "6.0.1"

  postgresql:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: "postgresql-rw"
    POSTGRES_DATABASE: frinx
    POSTGRES_DB_SCHEMA: inventory
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: INVENTORY_POSTGRES_USERNAME
      postgresPasswordKey: INVENTORY_POSTGRES_PASSWORD

  # extraEnv:
  #   NODE_ENV: 'development'

topology-discovery:
  enabled: true
  fullnameOverride: "topology-discovery"

  image:
    repository: "frinx/topology-discovery"
    tag: "6.0.0"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  dbPersistence:
    existingSecret:
      secretName: *frinx-database-password
      arangoUsernameKey: TD_ARANGO_USERNAME
      arangoRootPasswordKey: TD_ARANGO_ROOT_PASSWORD

uc-zone-lb:
  enabled: true
  fullnameOverride: "uc-zone-lb"

  ingressClass:
    enabled: false

  service:
    enabled: false

  providers:
    kubernetesIngress:
      enabled: false

    kubernetesCRD:
      enabled: true

  additionalArguments:
    - "--entryPoints.uniconfig.address=:8181"
    - "--log.level=DEBUG"

  ports:
    uniconfig:
      port: 8181
      expose: false
      exposedPort: 8181
      protocol: TCP

uniconfig:
  enabled: true
  fullnameOverride: "uniconfig-controller"

  replicaCount: 1

  image:
    repository: "frinx/uniconfig"
    tag: "6.1.1"

  imagePullSecrets:
    - name: *frinx-image-pull-secret

  postgresql:
    enabled: false

  dbPersistence:
    POSTGRES_HOST: "uniconfig-postgresql-rw"
    existingSecret:
      secretName: *frinx-database-password
      postgresUsernameKey: UNICONFIG_POSTGRES_USERNAME
      postgresPasswordKey: UNICONFIG_POSTGRES_PASSWORD
      clishellSshserverUsernamepasswordauthPasswordKey: UNICONFIG_CLISHELL_SSHSERVER_USERNAMEPASSWORDAUTH_PASSWORD

  securityContext:
    capabilities:
      add:
        - NET_BIND_SERVICE
      drop:
        - ALL

  highAvailability:
    enabled: true
    traefik:
      selectorName: uc-zone-lb
    stickyCookie:
      name: uniconfig_server_id
      httpOnly: true
      secure: false
      sameSite: strict
    # Expose extra service into traefik lb with sticky cookies
    # Service name must be uniqie in FM installation
    hosts:
      - uniconfig

# Identity provider configuration

oauth2-proxy:
  enabled: false
  fullnameOverride: "oauth2-proxy"

  image:
    repository: "frinx/oauth2-proxy"
    tag: "6.0.0-alpine"

    imagePullSecrets:
      - name: *frinx-image-pull-secret

  ingress:
    enabled: false
    ingressClassName: nginx
    hosts:
      - "fm.127.0.0.1.nip.io"

  config:
    cookieSecret: create_strong_secret
    clientSecret: ""
    clientID: ""
    configFile: |-
      # DEFAULT CONFIGURATION
      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/overview

      custom_sign_in_logo = "/tmp/frinx/frinx.png"
      upstreams = ["http://krakend:8080"]

      cookie_secure = true
      cookie_expire = 0
      pass_authorization_header = false
      proxy_websockets = true

      scope = "user:email read:org groups"
      email_domains = [ "*" ]

      # DEPENDS ON DEPLOYMENT SETUP, INGRESS CONFIGURATION
      cookie_domains = [ "fm.127.0.0.1.nip.io" ]
      whitelist_domains = [ "fm.127.0.0.1.nip.io" ]

      # IDENTITY PROVIDER CONFIGURATION
      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/providers/
      # Configuration example with github

      github_org = "FRINXio"
      provider = "github"
      login_url = "https://github.com/login/oauth/authorize"
      redirect_url = "https://fm.127.0.0.1.nip.io/oauth2/callback"
