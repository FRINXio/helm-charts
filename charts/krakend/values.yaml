# Default values for krakend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of replicas of the deployment.
replicaCount: 1

image:
  # -- krakend image repository
  repository: frinx/krakend
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""
  # -- Image pull policy
  pullPolicy: IfNotPresent

# -- [Image Pull Secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
imagePullSecrets: []

# -- String to partially override app name
nameOverride: ""

# -- String to partially override app name
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Pod annotations
podAnnotations: {}

# -- Configure [Pods Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
podSecurityContext: {}
  # enabled: true
  # fsGroup: 0

# -- Security context for KrakenD container
containerSecurityContext:
  capabilities:
    drop:
      - ALL

# Configure the [Service resource](https://kubernetes.io/docs/concepts/services-networking/service/)
service:
  # -- Service type for HTTP and Websocket
  type: ClusterIP
  # -- KrakenD HTTP
  port: 8080
  # -- KrakenD Websocket
  wsPort: 8001
  # -- Target port for HTTP
  targetPort: 8080
  # -- Target port for Websocket
  wsTargetPort: 8001
  # -- Node port for HTTP
  nodePort: 30000
  # -- Node port for Websocket
  wsNodePort: 30001
  # -- Metrics port
  metricsPort: 9091
  # -- Metrics target port
  metricsTargetPort: 9091

# Configure the [Ingress resource](https://kubernetes.io/docs/concepts/services-networking/ingress/)
ingress:
  # -- Enable ingress
  enabled: false
  # -- IngressClass that will be be used to implement the Ingress
  className: ""
  # -- Additional labels for the Ingress resource
  labels: {}
  # -- Additional annotations for the Ingress resource
  annotations: {}
  # -- [Ingress Host](https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource)
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- [KrakenD Container resources](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/)
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- [Autoscaling parameters](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- [Node labels for pod assignment](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)
nodeSelector: {}

# -- [Tolerations for pod assignment](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
tolerations: []

# -- [Affinity for pod assignment](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity)
affinity: {}

# -- Application environment variables
env:
  TLS_DISABLED: true
  DEFAULT_TIMEOUT: "2m"
  KRAKEND_TLS_PROTOCOL: "http"
  ALLOWED_HOSTS:
  ALLOWED_ORIGINS:
  LOG_LEVEL: INFO
  # Proxy settings
  PROXY_ENABLED: false
  HTTP_PROXY:
  HTTPS_PROXY:
  NO_PROXY:
  # Uniconfig settings
  UNICONFIG_PROTOCOL: "http"
  UNICONFIG_ZONES_LIST: "uniconfig"
  UNICONFIG_TIMEOUT: "12h"
  # KrakenD endpoints settings
  WORKFLOW_MANAGER_ENABLED: true
  UNICONFIG_ENABLED: true
  INVENTORY_ENABLED: true
  RESOURCE_MANAGER_ENABLED: true
  DEVICE_TOPOLOGY_ENABLED: true
  PERFORMANCE_MONITOR_ENABLED: true
  L3VPN_ENABLED: false
  # Oauth2-Proxy
  OAUTH2_KRAKEND_PLUGIN_TENANT_ID: "frinx"
  OAUTH2_KRAKEND_PLUGIN_USER_ROLES_MAP: "X-Forwarded-Roles"
  OAUTH2_KRAKEND_PLUGIN_USER_GROUPS_MAP: "X-Forwarded-Groups"
  OAUTH2_KRAKEND_PLUGIN_FROM_MAP: "X-Forwarded-User"

# -- RBAC configuration
rbac:
  UNICONFIG_CONTROLLER_ADMIN_GROUP: "network-admin"
  UNISTORE_CONTROLLER_ADMIN_GROUP: "network-admin"
  UNISTORE_BEARER_ROLE: ""
  UNISTORE_SERVICE_ROLE: ""
  UNISTORE_NETWORK_ROLE: ""
  UNISTORE_OTHER_PERMITTED_ROLES: ""
  UNISTORE_BEARER_NODE: "bearer"
  UNISTORE_SERVICE_NODE: "service"
  UNISTORE_NETWORK_NODE: "network"
  INVENTORY_ADMIN_GROUP: "network-admin"
  ADMIN_ACCESS_ROLE: "network-admin"
  X_AUTH_USER_GROUP: "network-admin"

rateLimits:
  # -- Rate limits for workflow-manager
  workflowManager:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for schellar
  schellar:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for resource-manager
  resourceManager:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for inventory
  inventory:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for performance-monitor
  performanceMonitor:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for swagger
  swagger:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for topology-discovery
  topologDiscovery:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for frinx-frontend
  frinxFrontend:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "1s"
    proxy:
      enabled: true
      maxRate: 30
      every: "1s"
      capacity: 10
  # -- Rate limits for frinx-frontend-proxy
  frinxFrontendProxy:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for uniconfig
  uniconfig:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10
  # -- Rate limits for unistore
  unistore:
    router:
      enabled: true
      maxRate: 10
      clientCapacity: 30
      every: "10s"
    proxy:
      enabled: true
      maxRate: 30
      every: "10s"
      capacity: 10

debug:
  # -- Simulate USER RBAC headers
  # Used when deployment is without identity provider
  enabled: false
  # -- User roles
  x_forwarded_roles: "owner"
  # -- User groups
  x_forwarded_groups: "network-admin"
  # -- User name
  x_forwarded_user: "frinx-admin-user"

# -- Additional KrakenD environment variables
extraEnv: []

# -- Metrics configuration
metrics:
  enabled: false
  metricsPort: metrics
  metricsPath: /metrics

nginx:
  enabled: false

  # -- @ignored
  fullnameOverride: krakend-nginx
  # -- (existingServerBlockConfigmap ConfigMap with custom server block to be added to NGINX configuration)[https://artifacthub.io/packages/helm/bitnami/nginx?modal=values&path=existingServerBlockConfigmap]
  existingServerBlockConfigmap: krakend-nginx-config

  # --  Configure the [Nginx Ingress resource](https://artifacthub.io/packages/helm/bitnami/nginx?modal=values&path=ingress)
  ingress:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "12h"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "12h"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "12h"

  # -- @ignored
  readinessProbe:
    path: /health

  rateLimits:
    # -- [limit_req_dry_run](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_dry_run)
    dryRun: false
    # -- [limit_req_status](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_status)
    statusCode: 429
    # -- [limit_req_zone](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone)
    zoneRate:
      auth: "20r/s"
      ws: "10r/s"
      api: "100r/s"

# -- Nginx server configuration
  server: |
    client_body_buffer_size "8k";
    client_header_buffer_size "1k";
    proxy_headers_hash_max_size 2048;
    proxy_headers_hash_bucket_size 128;
    proxy_connect_timeout "12h";
    proxy_read_timeout "12h";
    proxy_send_timeout "12h";
