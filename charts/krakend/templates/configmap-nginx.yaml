apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "krakend.fullname" . }}-nginx-config
data:
  nginx.conf: |
    events {
        worker_connections  1024;
    }

    http {
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }
    
        upstream websocket {
            server 127.0.0.1:8001;
        }
    
        upstream api_gateway {
            server 127.0.0.1:80;
        }

        map $http_x_forwarded_roles $x_auth_user_roles {
            default "";
            ~^(.*)$ $1;
        }
    
        map $http_x_forwarded_groups $x_auth_user_groups {
            default "";
            ~^(.*)$ $1;
        }

        map $http_x_forwarded_user $from {
            default "";
            ~^(.*)$ $1;
        }

        server {
            listen {{ .Values.service.port }};

            location /websocket {
                internal;
                rewrite ^/websocket(.*)$ $1 break;
                proxy_pass http://websocket;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
            }

            location / {

                # DELETE RBAC HEADERS FROM CLIENT REQUEST 
                proxy_set_header       X-Tenant-ID {{ .Values.env.OAUTH2_KRAKEND_PLUGIN_TENANT_ID }};
                proxy_set_header       From "";
                proxy_set_header       X-Auth-User-Roles "";
                proxy_set_header       X-Auth-User-Groups "";
                
                # MAP RBAC HEADERS FROM OAUTH2-PROXY TO FRINX
                proxy_set_header X-Auth-User-Roles $x_auth_user_roles;
                proxy_set_header X-Auth-User-Groups $x_auth_user_groups;
                proxy_set_header From $from;

                # REVERSE PROXY CONFIG FOR REST AND WEBSOCKET REQUESTS
                set $websocket 1;
                if ($http_connection !~* "upgrade") {
                    set $websocket 0;
                }
                
                if ($http_upgrade !~* "websocket") {
                    set $websocket 0;
                }

                if ($websocket) {
                    rewrite ^ /websocket$uri last;
                }

                if ($websocket = 0) {
                    proxy_pass http://api_gateway;
                }
            }
        }
    }